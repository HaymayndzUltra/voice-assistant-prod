version: "3.9"
name: pc2_stack

services:
  # ============================================================================
  # CONTAINER GROUP 1: MEMORY PROCESSING (5 agents)
  # MemoryOrchestratorService, CacheManager, ContextManager, ExperienceTracker, UnifiedMemoryReasoningAgent
  # ============================================================================
  memory_processing:
    build:
      context: .
      dockerfile: docker/pc2/Dockerfile
    image: pc2/memory_processing:latest
    container_name: pc2-memory-processing
    command: python -m main_pc_code.system_launcher_containerized --groups memory_processing
    environment:
      - REDIS_URL=redis://mainpc:6380/0
      - LOG_LEVEL=INFO
      - MACHINE_TYPE=pc2
      - PYTHONPATH=/app
    networks:
      - backplane
    ports:
      - "7140:7140"   # MemoryOrchestratorService
      - "7102:7102"   # CacheManager
      - "7111:7111"   # ContextManager
      - "7112:7112"   # ExperienceTracker
      - "7105:7105"   # UnifiedMemoryReasoningAgent
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "3"
          memory: 8G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7140/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ============================================================================
  # CONTAINER GROUP 2: INTERACTION CORE (5 agents)
  # TieredResponder, AsyncProcessor, TaskScheduler, ResourceManager, AdvancedRouter
  # ============================================================================
  interaction_core:
    build:
      context: .
      dockerfile: docker/pc2/Dockerfile
    image: pc2/interaction_core:latest
    container_name: pc2-interaction-core
    command: python -m main_pc_code.system_launcher_containerized --groups interaction_core
    environment:
      - REDIS_URL=redis://mainpc:6380/0
      - LOG_LEVEL=INFO
      - MACHINE_TYPE=pc2
      - PYTHONPATH=/app
    depends_on:
      - memory_processing
    networks:
      - backplane
    ports:
      - "7100:7100"   # TieredResponder
      - "7101:7101"   # AsyncProcessor
      - "7115:7115"   # TaskScheduler
      - "7113:7113"   # ResourceManager
      - "7129:7129"   # AdvancedRouter
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: 6G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7100/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ============================================================================
  # CONTAINER GROUP 3: SPECIALIZED AGENTS (5 agents)
  # DreamWorldAgent, DreamingModeAgent, TutorAgent, TutoringAgent, AgentTrustScorer
  # ============================================================================
  specialized_agents:
    build:
      context: .
      dockerfile: docker/pc2/Dockerfile
    image: pc2/specialized_agents:latest
    container_name: pc2-specialized-agents
    command: python -m main_pc_code.system_launcher_containerized --groups specialized_agents
    environment:
      - REDIS_URL=redis://mainpc:6380/0
      - LOG_LEVEL=INFO
      - MACHINE_TYPE=pc2
      - PYTHONPATH=/app
    depends_on:
      - memory_processing
    networks:
      - backplane
    ports:
      - "7104:7104"   # DreamWorldAgent
      - "7127:7127"   # DreamingModeAgent
      - "7108:7108"   # TutorAgent
      - "7131:7131"   # TutoringAgent
      - "7122:7122"   # AgentTrustScorer
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "3"
          memory: 6G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7104/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ============================================================================
  # CONTAINER GROUP 4: SUPPORT SERVICES (4 agents)
  # UnifiedUtilsAgent, AuthenticationAgent, FileSystemAssistantAgent, ProactiveContextMonitor
  # ============================================================================
  support_services:
    build:
      context: .
      dockerfile: docker/pc2/Dockerfile
    image: pc2/support_services:latest
    container_name: pc2-support-services
    command: python -m main_pc_code.system_launcher_containerized --groups support_services
    environment:
      - REDIS_URL=redis://mainpc:6380/0
      - LOG_LEVEL=INFO
      - MACHINE_TYPE=pc2
      - PYTHONPATH=/app
    networks:
      - backplane
    ports:
      - "7118:7118"   # UnifiedUtilsAgent
      - "7116:7116"   # AuthenticationAgent
      - "7123:7123"   # FileSystemAssistantAgent
      - "7119:7119"   # ProactiveContextMonitor
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7118/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ============================================================================
  # CONTAINER GROUP 5: VISION PROCESSING (1 agent - GPU)
  # VisionProcessingAgent - RTX 3060 optimized
  # ============================================================================
  vision_processing:
    build:
      context: .
      dockerfile: docker/pc2/Dockerfile
    image: pc2/vision_processing:latest
    container_name: pc2-vision-processing
    command: python -m main_pc_code.system_launcher_containerized --groups vision_processing
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - REDIS_URL=redis://mainpc:6380/0
      - LOG_LEVEL=INFO
      - MACHINE_TYPE=pc2
      - PYTHONPATH=/app
    networks:
      - backplane
    ports:
      - "7160:7160"   # VisionProcessingAgent
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "2"
        reservations:
          devices:
            - capabilities: [gpu]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7150/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ============================================================================
  # CONTAINER GROUP 6: OBSERVABILITY (1 agent)
  # ObservabilityHub - PC2 monitoring
  # ============================================================================
  observability:
    build:
      context: .
      dockerfile: docker/pc2/Dockerfile
    image: pc2/observability:latest
    container_name: pc2-observability
    command: python -m main_pc_code.system_launcher_containerized --groups observability
    environment:
      - MAINPC_OBS_HUB=http://mainpc:9000
      - REDIS_URL=redis://mainpc:6380/0
      - LOG_LEVEL=INFO
      - MACHINE_TYPE=pc2
      - PYTHONPATH=/app
    networks:
      - backplane
    ports:
      - "9100:9100"   # ObservabilityHub PC2
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9100/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ============================================================================
  # CONTAINER GROUP 7: NETWORK BRIDGE (2 agents)
  # RemoteConnectorAgent, UnifiedWebAgent - External connectivity
  # ============================================================================
  network_bridge:
    build:
      context: .
      dockerfile: docker/pc2/Dockerfile
    image: pc2/network_bridge:latest
    container_name: pc2-network-bridge
    command: python -m main_pc_code.system_launcher_containerized --groups network_bridge
    environment:
      - REDIS_URL=redis://mainpc:6380/0
      - LOG_LEVEL=INFO
      - MACHINE_TYPE=pc2
      - PYTHONPATH=/app
    depends_on:
      - interaction_core
    networks:
      - backplane
    ports:
      - "7124:7124"   # RemoteConnectorAgent
      - "7126:7126"   # UnifiedWebAgent
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 3G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7124/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

networks:
  backplane:
    external: true   # Joined to the same overlay as MainPC 