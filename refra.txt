Universal Prompt for Infrastructure Refactoring
# üöÄ TOP-LEVEL GOAL
Perform a complete refactoring of the containerized agent infrastructure, from analysis and cleanup to generation, validation, and documentation of a new, optimized deployment.
# 1Ô∏è‚É£ CONTEXT
Codebase location: The entire project repository, focusing on Docker/Podman assets and agent configurations.
Current state or pain-point: The existing container setup may be outdated, inefficient, or contain unused assets. A clean, optimized, and well-documented "Source of Truth" (SoT) for the container architecture is needed.
Relevant prior tickets / PRs / docs: This is a new, major refactoring initiative.
# 2Ô∏è‚É£ DELIVERABLES
A new docker-compose.yml file that represents the optimized "Source of Truth" for the agent deployment.
Updated requirements.txt files for each container service, ensuring they are minimal.
A new or updated markdown file (ARCHITECTURE.md or similar) documenting the new container architecture and setup.
A final report confirming the successful completion of all phases.
# 3Ô∏è‚É£ TASK BREAKDOWN (optional, but boosts accuracy)
Phase 1: System Analysis & Cleanup
Inventory all existing Docker/Podman containers, images, and compose files.
Identify and list all assets deemed "old" or "unused" for deletion.
[CONFIRMATION STEP] Pause and seek user approval before executing any destructive deletion operations.
Identify all agent groups, their dependencies, and required libraries.
Phase 2: Logical Grouping & Compose Generation
Design an optimal container grouping strategy based on function, dependency, and resource needs.
Generate the new docker-compose.yml SoT with correct build contexts, volumes, networks, and healthchecks.
Generate a minimal requirements.txt for each container.
Phase 3: Validation & Optimization
Build and start all containers in the correct dependency order using the new compose file.
Validate agent startup, health, and inter-container communication.
Analyze and apply optimizations for image size, startup time, and resource usage.
Document the new architecture and compose setup.
# 4Ô∏è‚É£ CONSTRAINTS / ACCEPTANCE CRITERIA
Must: The final deployment must be fully functional, with all agents passing their health checks.
Must: Explicitly ask for user confirmation before performing any destructive actions (e.g., docker rmi, rm).
Must not: Introduce breaking changes to the core agent logic. The focus is on infrastructure, not application code.
# 5Ô∏è‚É£ RESOURCES THE AGENT MAY USE
Tools: docker, podman, python3, grep, find.
Existing scripts: memory_system/cli.py (if needed for context).
# 7Ô∏è‚É£ OUTPUT FORMAT
(D) Mixture:
For file modifications (docker-compose.yml, requirements.txt, ARCHITECTURE.md): (B) Code-edit calls (automatic patch).
For the confirmation step before deletion: (A) Inline explanation only (e.g., print the list of files to be deleted and wait for a 'yes' response).
For the final report: (A) Inline explanation only.
# 8Ô∏è‚É£ TIME / PRIORITY
Priority: High. Foundational infrastructure task.
# üîö END OF PROMPT
