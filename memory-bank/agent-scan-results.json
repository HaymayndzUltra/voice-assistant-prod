{
  "scan_timestamp": "2025-07-30T06:38:39.194096+08:00",
  "base_path": "/home/haymayndz/AI_System_Monorepo",
  "directories_found": {
    "mainpc": [
      "docker/mainpc",
      "unified-system-v1/src/agents/mainpc",
      "unified-system-v1/src/agents/mainpc/formainpc",
      "pc2_code/FORMAINPC",
      "main_pc_code/FORMAINPC",
      "MainPcDocs",
      "main_pc_code/MainPcDocs",
      "pc2_code/FORMAINPC",
      "main_pc_code/FORMAINPC"
    ],
    "pc2": [
      "pc2_code",
      "docker/pc2",
      "SUBSYSTEM_ARCHIVED/pc2_backup",
      "unified-system-v1/src/agents/pc2",
      "unified-system-v1/src/agents/pc2/forpc2",
      "phase1_implementation/backups/pc2_agents_20250716_094922",
      "phase1_implementation/backups/pc2_config_20250716_094922",
      "pc2_code/docs/pc2",
      "unified-system-v1/src/agents/pc2/ForPC2",
      "phase1_implementation/backups/pc2_agents_20250716_094922/ForPC2",
      "pc2_code/agents/ForPC2",
      "main_pc_code/MainPcDocs/SYSTEM_DOCUMENTATION/PC2",
      "unified-system-v1/src/agents/pc2/ForPC2",
      "phase1_implementation/backups/pc2_agents_20250716_094922/ForPC2",
      "pc2_code/agents/ForPC2"
    ]
  },
  "agents_found": {
    "mainpc": [
      {
        "filename": "run_mainpc_agents.py",
        "path": "run_mainpc_agents.py",
        "size": 3314,
        "modified": "2025-07-02T16:27:59.952879"
      },
      {
        "filename": "start_mainpc_agents.py",
        "path": "start_mainpc_agents.py",
        "size": 7725,
        "modified": "2025-07-24T19:10:43.748493"
      },
      {
        "filename": "start_mainpc_core_agents.py",
        "path": "start_mainpc_core_agents.py",
        "size": 6792,
        "modified": "2025-07-24T19:10:43.748493"
      },
      {
        "filename": "agent_starter.py",
        "path": "docker/mainpc/agent_starter.py",
        "size": 4989,
        "modified": "2025-07-08T16:54:48.374961"
      },
      {
        "filename": "ChainOfThoughtAgent.py",
        "path": "main_pc_code/FORMAINPC/ChainOfThoughtAgent.py",
        "size": 20610,
        "modified": "2025-07-24T19:10:43.552744"
      },
      {
        "filename": "GOT_TOTAgent.py",
        "path": "main_pc_code/FORMAINPC/GOT_TOTAgent.py",
        "size": 15375,
        "modified": "2025-07-24T19:10:43.562531"
      },
      {
        "filename": "CognitiveModelAgent.py",
        "path": "main_pc_code/FORMAINPC/CognitiveModelAgent.py",
        "size": 14300,
        "modified": "2025-07-24T19:10:43.552744"
      },
      {
        "filename": "LearningAdjusterAgent.py",
        "path": "main_pc_code/FORMAINPC/LearningAdjusterAgent.py",
        "size": 20316,
        "modified": "2025-07-24T19:10:43.562531"
      },
      {
        "filename": "LocalFineTunerAgent.py",
        "path": "main_pc_code/FORMAINPC/LocalFineTunerAgent.py",
        "size": 30527,
        "modified": "2025-07-24T19:10:43.562531"
      }
    ],
    "pc2": [
      {
        "filename": "start_pc2_agents.py",
        "path": "start_pc2_agents.py",
        "size": 6989,
        "modified": "2025-07-24T19:10:43.748493"
      },
      {
        "filename": "extract_pc2_agents.py",
        "path": "extract_pc2_agents.py",
        "size": 808,
        "modified": "2025-07-05T20:12:15.374431"
      },
      {
        "filename": "pc2_template_compliant_agent.py",
        "path": "scripts/pc2_template_compliant_agent.py",
        "size": 6546,
        "modified": "2025-07-24T19:10:43.738705"
      },
      {
        "filename": "migrate_pc2_agents.py",
        "path": "scripts/migrate_pc2_agents.py",
        "size": 17407,
        "modified": "2025-07-02T08:03:08.645226"
      },
      {
        "filename": "pc2_template_compliant_agent_improved.py",
        "path": "scripts/pc2_template_compliant_agent_improved.py",
        "size": 5717,
        "modified": "2025-07-24T19:10:43.738705"
      },
      {
        "filename": "pc2_agents_compliance_fixer.py",
        "path": "scripts/pc2_agents_compliance_fixer.py",
        "size": 22597,
        "modified": "2025-07-24T19:10:43.738705"
      },
      {
        "filename": "fix_translator_agent.py",
        "path": "pc2_code/fix_translator_agent.py",
        "size": 4188,
        "modified": "2025-06-28T16:41:58.308381"
      },
      {
        "filename": "agent_health_check_validation.py",
        "path": "pc2_code/agent_health_check_validation.py",
        "size": 10956,
        "modified": "2025-07-24T19:10:43.650618"
      },
      {
        "filename": "agent_stabilization_sweep.py",
        "path": "pc2_code/agent_stabilization_sweep.py",
        "size": 4757,
        "modified": "2025-07-24T19:10:43.650618"
      },
      {
        "filename": "test_auth_agent.py",
        "path": "pc2_code/test_auth_agent.py",
        "size": 1274,
        "modified": "2025-07-02T22:29:49.546531"
      },
      {
        "filename": "test_unified_utils_agent.py",
        "path": "pc2_code/test_unified_utils_agent.py",
        "size": 1142,
        "modified": "2025-07-02T21:57:50.095590"
      },
      {
        "filename": "test_self_healing_agent.py",
        "path": "pc2_code/test_self_healing_agent.py",
        "size": 3852,
        "modified": "2025-07-24T19:10:43.709343"
      },
      {
        "filename": "test_unified_error_agent.py",
        "path": "pc2_code/test_unified_error_agent.py",
        "size": 1134,
        "modified": "2025-07-02T22:29:49.667531"
      },
      {
        "filename": "test_simple_agent.py",
        "path": "pc2_code/test_simple_agent.py",
        "size": 1722,
        "modified": "2025-06-28T16:41:58.308381"
      },
      {
        "filename": "test_agent_health.py",
        "path": "pc2_code/test_agent_health.py",
        "size": 2672,
        "modified": "2025-07-24T19:10:43.699555"
      },
      {
        "filename": "test_agent_integration.py",
        "path": "pc2_code/test_agent_integration.py",
        "size": 6012,
        "modified": "2025-07-24T19:10:43.699555"
      },
      {
        "filename": "test_episodic_memory_agent.py",
        "path": "pc2_code/test_episodic_memory_agent.py",
        "size": 1663,
        "modified": "2025-07-24T19:10:43.709343"
      },
      {
        "filename": "test_rca_agent.py",
        "path": "pc2_code/test_rca_agent.py",
        "size": 1068,
        "modified": "2025-07-02T21:57:07.383984"
      },
      {
        "filename": "check_memory_agents.py",
        "path": "pc2_code/check_memory_agents.py",
        "size": 2476,
        "modified": "2025-07-24T19:10:43.689768"
      },
      {
        "filename": "test_dreamworld_agent.py",
        "path": "pc2_code/test_dreamworld_agent.py",
        "size": 1332,
        "modified": "2025-07-24T19:10:43.699555"
      },
      {
        "filename": "remove_services_from_active_agents.py",
        "path": "pc2_code/remove_services_from_active_agents.py",
        "size": 1106,
        "modified": "2025-07-12T23:47:35.527752"
      },
      {
        "filename": "test_dreaming_mode_agent.py",
        "path": "pc2_code/test_dreaming_mode_agent.py",
        "size": 3762,
        "modified": "2025-07-24T19:10:43.699555"
      },
      {
        "filename": "force_second_pc_agents.py",
        "path": "pc2_code/force_second_pc_agents.py",
        "size": 2146,
        "modified": "2025-07-24T19:10:43.689768"
      },
      {
        "filename": "test_unified_web_agent.py",
        "path": "pc2_code/test_unified_web_agent.py",
        "size": 3773,
        "modified": "2025-07-24T19:10:43.709343"
      },
      {
        "filename": "test_unified_memory_agent.py",
        "path": "pc2_code/test_unified_memory_agent.py",
        "size": 1852,
        "modified": "2025-07-24T19:10:43.709343"
      },
      {
        "filename": "start_agents.py",
        "path": "pc2_code/scripts/start_agents.py",
        "size": 5212,
        "modified": "2025-06-28T16:41:58.308381"
      },
      {
        "filename": "check_agents.py",
        "path": "pc2_code/scripts/check_agents.py",
        "size": 2845,
        "modified": "2025-07-24T19:10:43.699555"
      },
      {
        "filename": "agent_health_checker.py",
        "path": "pc2_code/scripts/agent_health_checker.py",
        "size": 2941,
        "modified": "2025-07-24T19:10:43.699555"
      },
      {
        "filename": "standardize_agents.py",
        "path": "pc2_code/scripts/standardize_agents.py",
        "size": 14606,
        "modified": "2025-07-24T19:10:43.699555"
      },
      {
        "filename": "rca_agent.py",
        "path": "pc2_code/src/core/rca_agent.py",
        "size": 17968,
        "modified": "2025-07-24T19:10:43.699555"
      },
      {
        "filename": "unified_memory_reasoning_agent.py",
        "path": "pc2_code/agents/unified_memory_reasoning_agent.py",
        "size": 36320,
        "modified": "2025-07-24T19:10:43.689768"
      },
      {
        "filename": "test_compliant_agent.py",
        "path": "pc2_code/agents/test_compliant_agent.py",
        "size": 5933,
        "modified": "2025-07-24T19:10:43.689768"
      },
      {
        "filename": "tutoring_agent.py",
        "path": "pc2_code/agents/tutoring_agent.py",
        "size": 17378,
        "modified": "2025-07-24T19:10:43.689768"
      },
      {
        "filename": "auto_fixer_agent.py",
        "path": "pc2_code/agents/auto_fixer_agent.py",
        "size": 0,
        "modified": "2025-07-16T22:01:09.715580"
      },
      {
        "filename": "tutoring_service_agent.py",
        "path": "pc2_code/agents/tutoring_service_agent.py",
        "size": 3210,
        "modified": "2025-07-24T19:10:43.689768"
      },
      {
        "filename": "agent_utils.py",
        "path": "pc2_code/agents/agent_utils.py",
        "size": 18497,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "unified_web_agent.py",
        "path": "pc2_code/agents/unified_web_agent.py",
        "size": 80283,
        "modified": "2025-07-24T19:10:43.689768"
      },
      {
        "filename": "tutor_agent.py",
        "path": "pc2_code/agents/tutor_agent.py",
        "size": 26160,
        "modified": "2025-07-24T19:10:43.689768"
      },
      {
        "filename": "unified_memory_reasoning_agent_simplified.py",
        "path": "pc2_code/agents/unified_memory_reasoning_agent_simplified.py",
        "size": 9507,
        "modified": "2025-07-24T19:10:43.689768"
      },
      {
        "filename": "filesystem_assistant_agent.py",
        "path": "pc2_code/agents/filesystem_assistant_agent.py",
        "size": 26603,
        "modified": "2025-07-24T19:10:43.679981"
      },
      {
        "filename": "remote_connector_agent.py",
        "path": "pc2_code/agents/remote_connector_agent.py",
        "size": 38830,
        "modified": "2025-07-24T19:10:43.679981"
      },
      {
        "filename": "unified_utils_agent.py",
        "path": "pc2_code/agents/ForPC2/unified_utils_agent.py",
        "size": 18408,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "pc2_agent_helpers.py",
        "path": "pc2_code/agents/utils/pc2_agent_helpers.py",
        "size": 4614,
        "modified": "2025-07-24T19:10:43.689768"
      },
      {
        "filename": "translator_agent.py",
        "path": "pc2_code/agents/archive/translation/translator_agent.py",
        "size": 41353,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "learning_mode_agent.py",
        "path": "pc2_code/agents/archive/memory_reasoning/learning_mode_agent.py",
        "size": 3564,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "unified_memory_reasoning_agent.py",
        "path": "pc2_code/agents/archive/memory_reasoning/unified_memory_reasoning_agent.py",
        "size": 26515,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "memory_agent.py",
        "path": "pc2_code/agents/archive/memory_reasoning/memory_agent.py",
        "size": 7185,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "context_summarizer_agent.py",
        "path": "pc2_code/agents/archive/memory_reasoning/context_summarizer_agent.py",
        "size": 17541,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "contextual_memory_agent.py",
        "path": "pc2_code/agents/archive/memory_reasoning/contextual_memory_agent.py",
        "size": 21116,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "chain_of_thought_agent.py",
        "path": "pc2_code/agents/archive/memory_reasoning/chain_of_thought_agent.py",
        "size": 20844,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "proactive_agent_interface.py",
        "path": "pc2_code/agents/archive/misc/proactive_agent_interface.py",
        "size": 2448,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "model_manager_agent.py",
        "path": "pc2_code/agents/archive/misc/model_manager_agent.py",
        "size": 19269,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "llm_task_agent.py",
        "path": "pc2_code/agents/archive/misc/llm_task_agent.py",
        "size": 8767,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "auto_fixer_agent.py",
        "path": "pc2_code/agents/archive/misc/auto_fixer_agent.py",
        "size": 5707,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "test_unified_web_agent.py",
        "path": "pc2_code/agents/archive/misc/test_unified_web_agent.py",
        "size": 6439,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "web_scraper_agent.py",
        "path": "pc2_code/agents/archive/web/web_scraper_agent.py",
        "size": 22888,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "tutoring_agent.py",
        "path": "pc2_code/agents/core_agents/tutoring_agent.py",
        "size": 12683,
        "modified": "2025-07-24T19:10:43.679981"
      },
      {
        "filename": "tutoring_service_agent.py",
        "path": "pc2_code/agents/core_agents/tutoring_service_agent.py",
        "size": 11881,
        "modified": "2025-07-24T19:10:43.679981"
      },
      {
        "filename": "unified_utils_agent.py",
        "path": "pc2_code/agents/backups/unified_utils_agent.py",
        "size": 12971,
        "modified": "2025-07-24T19:10:43.679981"
      },
      {
        "filename": "rca_agent.py",
        "path": "pc2_code/agents/backups/rca_agent.py",
        "size": 20788,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "tutoring_agent.py",
        "path": "pc2_code/agents/backups/tutoring_agent.py",
        "size": 18589,
        "modified": "2025-07-24T19:10:43.679981"
      },
      {
        "filename": "tutoring_service_agent.py",
        "path": "pc2_code/agents/backups/tutoring_service_agent.py",
        "size": 3095,
        "modified": "2025-07-16T22:01:09.715580"
      },
      {
        "filename": "unified_web_agent.py",
        "path": "pc2_code/agents/backups/unified_web_agent.py",
        "size": 77599,
        "modified": "2025-07-24T19:10:43.679981"
      },
      {
        "filename": "tutor_agent.py",
        "path": "pc2_code/agents/backups/tutor_agent.py",
        "size": 23768,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "self_healing_agent.py",
        "path": "pc2_code/agents/backups/self_healing_agent.py",
        "size": 19262,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "filesystem_assistant_agent.py",
        "path": "pc2_code/agents/backups/filesystem_assistant_agent.py",
        "size": 17461,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "remote_connector_agent.py",
        "path": "pc2_code/agents/backups/remote_connector_agent.py",
        "size": 28490,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "test_unified_memory_reasoning_agent.py",
        "path": "pc2_code/tests/test_unified_memory_reasoning_agent.py",
        "size": 5978,
        "modified": "2025-07-24T19:10:43.709343"
      },
      {
        "filename": "VisionProcessingAgent.py",
        "path": "pc2_code/agents/VisionProcessingAgent.py",
        "size": 8261,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "DreamingModeAgent.py",
        "path": "pc2_code/agents/DreamingModeAgent.py",
        "size": 20812,
        "modified": "2025-07-24T19:10:43.650618"
      },
      {
        "filename": "DreamWorldAgent.py",
        "path": "pc2_code/agents/DreamWorldAgent.py",
        "size": 35942,
        "modified": "2025-07-24T19:10:43.650618"
      },
      {
        "filename": "LearningAdjusterAgent.py",
        "path": "pc2_code/agents/LearningAdjusterAgent.py",
        "size": 22138,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "AgentTrustScorer.py",
        "path": "pc2_code/agents/AgentTrustScorer.py",
        "size": 13148,
        "modified": "2025-07-24T19:10:43.650618"
      },
      {
        "filename": "PerformanceLoggerAgent.py",
        "path": "pc2_code/agents/PerformanceLoggerAgent.py",
        "size": 15985,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "AuthenticationAgent.py",
        "path": "pc2_code/agents/ForPC2/AuthenticationAgent.py",
        "size": 17987,
        "modified": "2025-07-24T19:10:43.660406"
      },
      {
        "filename": "LearningAdjusterAgent.py",
        "path": "pc2_code/agents/core_agents/LearningAdjusterAgent.py",
        "size": 3347,
        "modified": "2025-07-24T19:10:43.679981"
      },
      {
        "filename": "DreamingModeAgent.py",
        "path": "pc2_code/agents/backups/DreamingModeAgent.py",
        "size": 15097,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "EpisodicMemoryAgent.py",
        "path": "pc2_code/agents/backups/EpisodicMemoryAgent.py",
        "size": 28807,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "DreamWorldAgent.py",
        "path": "pc2_code/agents/backups/DreamWorldAgent.py",
        "size": 35748,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "UnifiedMemoryReasoningAgent.py",
        "path": "pc2_code/agents/backups/UnifiedMemoryReasoningAgent.py",
        "size": 44723,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "UnifiedErrorAgent.py",
        "path": "pc2_code/agents/backups/UnifiedErrorAgent.py",
        "size": 10234,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "AuthenticationAgent.py",
        "path": "pc2_code/agents/backups/AuthenticationAgent.py",
        "size": 13877,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "LearningAdjusterAgent.py",
        "path": "pc2_code/agents/backups/LearningAdjusterAgent.py",
        "size": 21024,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "AgentTrustScorer.py",
        "path": "pc2_code/agents/backups/AgentTrustScorer.py",
        "size": 9236,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "PerformanceLoggerAgent.py",
        "path": "pc2_code/agents/backups/PerformanceLoggerAgent.py",
        "size": 14409,
        "modified": "2025-07-24T19:10:43.670193"
      },
      {
        "filename": "PC2_AGENT_STATUS_TEST.py",
        "path": "PC2_AGENT_STATUS_TEST.py",
        "size": 5508,
        "modified": "2025-07-24T19:10:43.464657"
      },
      {
        "filename": "PC2TRANSLATOR_AGENT.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/translation/PC2TRANSLATOR_AGENT.py",
        "size": 20155,
        "modified": "2025-07-24T19:10:43.572319"
      }
    ],
    "shared": [
      {
        "filename": "check_agent_health.py",
        "path": "check_agent_health.py",
        "size": 1123,
        "modified": "2025-07-24T19:10:43.494019"
      },
      {
        "filename": "template_agent.py",
        "path": "template_agent.py",
        "size": 9130,
        "modified": "2025-07-04T10:25:23.083560"
      },
      {
        "filename": "run_agent.py",
        "path": "run_agent.py",
        "size": 1939,
        "modified": "2025-07-09T10:29:07.651708"
      },
      {
        "filename": "agent_scanner.py",
        "path": "agent_scanner.py",
        "size": 13446,
        "modified": "2025-07-02T18:03:12.492462"
      },
      {
        "filename": "real_agent_communication_test.py",
        "path": "real_agent_communication_test.py",
        "size": 13978,
        "modified": "2025-07-24T19:10:43.719130"
      },
      {
        "filename": "register_agents.py",
        "path": "register_agents.py",
        "size": 5921,
        "modified": "2025-07-24T19:10:43.719130"
      },
      {
        "filename": "check_agents.py",
        "path": "check_agents.py",
        "size": 2142,
        "modified": "2025-07-02T15:51:51.276500"
      },
      {
        "filename": "test_agent_connection.py",
        "path": "test_agent_connection.py",
        "size": 1104,
        "modified": "2025-07-24T19:10:43.748493"
      },
      {
        "filename": "fix_all_core_agents.py",
        "path": "fix_all_core_agents.py",
        "size": 8349,
        "modified": "2025-07-02T18:52:04.871463"
      },
      {
        "filename": "agent_validation_checklist.py",
        "path": "agent_validation_checklist.py",
        "size": 21580,
        "modified": "2025-07-29T06:47:33.941328"
      },
      {
        "filename": "cleanup_agents.py",
        "path": "cleanup_agents.py",
        "size": 7725,
        "modified": "2025-07-24T19:10:43.494019"
      },
      {
        "filename": "comprehensive_agent_scanner.py",
        "path": "comprehensive_agent_scanner.py",
        "size": 20859,
        "modified": "2025-07-30T14:38:26.955303"
      },
      {
        "filename": "minimal_agent.py",
        "path": "minimal_agent.py",
        "size": 4707,
        "modified": "2025-07-04T10:03:23.525427"
      },
      {
        "filename": "validate_all_agents.py",
        "path": "validate_all_agents.py",
        "size": 4102,
        "modified": "2025-07-24T19:10:43.758280"
      },
      {
        "filename": "check_running_agents.py",
        "path": "check_running_agents.py",
        "size": 3602,
        "modified": "2025-07-24T19:10:43.494019"
      },
      {
        "filename": "audit_all_agents.py",
        "path": "audit_all_agents.py",
        "size": 1774,
        "modified": "2025-06-30T01:44:03.041642"
      },
      {
        "filename": "check_all_agents_health.py",
        "path": "check_all_agents_health.py",
        "size": 6627,
        "modified": "2025-07-24T19:10:43.494019"
      },
      {
        "filename": "check_active_agents.py",
        "path": "check_active_agents.py",
        "size": 2102,
        "modified": "2025-07-03T03:40:48.523022"
      },
      {
        "filename": "agent_ready_signal.py",
        "path": "common/utils/agent_ready_signal.py",
        "size": 4661,
        "modified": "2025-07-24T19:10:43.503807"
      },
      {
        "filename": "base_agent.py",
        "path": "common/core/base_agent.py",
        "size": 59254,
        "modified": "2025-07-24T19:10:43.503807"
      },
      {
        "filename": "enhanced_base_agent.py",
        "path": "common/core/enhanced_base_agent.py",
        "size": 18068,
        "modified": "2025-07-24T19:10:43.503807"
      },
      {
        "filename": "phase2_task2d_pilot_agent_migration.py",
        "path": "scripts/phase2_task2d_pilot_agent_migration.py",
        "size": 28360,
        "modified": "2025-07-24T19:10:43.738705"
      },
      {
        "filename": "test_memory_agent_health.py",
        "path": "scripts/test_memory_agent_health.py",
        "size": 3589,
        "modified": "2025-07-24T19:10:43.738705"
      },
      {
        "filename": "baseagent_performance_analyzer.py",
        "path": "scripts/baseagent_performance_analyzer.py",
        "size": 15948,
        "modified": "2025-07-24T19:10:43.728918"
      },
      {
        "filename": "baseagent_migration_template.py",
        "path": "scripts/baseagent_migration_template.py",
        "size": 13820,
        "modified": "2025-07-24T19:10:43.728918"
      },
      {
        "filename": "add_error_bus_to_agents.py",
        "path": "scripts/add_error_bus_to_agents.py",
        "size": 7844,
        "modified": "2025-07-24T19:10:43.719130"
      },
      {
        "filename": "fix_agent_compliance.py",
        "path": "scripts/fix_agent_compliance.py",
        "size": 23337,
        "modified": "2025-07-24T19:10:43.728918"
      },
      {
        "filename": "restore_all_agents.py",
        "path": "scripts/restore_all_agents.py",
        "size": 15943,
        "modified": "2025-07-02T08:58:33.109260"
      },
      {
        "filename": "analyze_model_manager_agent_architecture.py",
        "path": "scripts/analyze_model_manager_agent_architecture.py",
        "size": 16904,
        "modified": "2025-07-24T19:10:43.728918"
      },
      {
        "filename": "refactor_duplicate_agents.py",
        "path": "scripts/refactor_duplicate_agents.py",
        "size": 784,
        "modified": "2025-07-24T19:10:43.738705"
      },
      {
        "filename": "discover_active_agents.py",
        "path": "scripts/discover_active_agents.py",
        "size": 21312,
        "modified": "2025-07-08T07:49:30.823389"
      },
      {
        "filename": "check_active_agents_syntax.py",
        "path": "scripts/check_active_agents_syntax.py",
        "size": 2722,
        "modified": "2025-07-24T19:10:43.728918"
      },
      {
        "filename": "identify_high_risk_legacy_agents.py",
        "path": "scripts/identify_high_risk_legacy_agents.py",
        "size": 9941,
        "modified": "2025-07-24T19:10:43.728918"
      },
      {
        "filename": "template_compliant_agent.py",
        "path": "scripts/template_compliant_agent.py",
        "size": 5894,
        "modified": "2025-07-24T19:10:43.738705"
      },
      {
        "filename": "check_memory_agent_registration.py",
        "path": "scripts/check_memory_agent_registration.py",
        "size": 1753,
        "modified": "2025-07-24T19:10:43.728918"
      },
      {
        "filename": "scan_agents_by_group.py",
        "path": "scripts/scan_agents_by_group.py",
        "size": 23911,
        "modified": "2025-07-10T10:05:14.695765"
      },
      {
        "filename": "expand_agent_table.py",
        "path": "scripts/expand_agent_table.py",
        "size": 11413,
        "modified": "2025-07-24T19:10:43.728918"
      },
      {
        "filename": "analyze_remaining_agents.py",
        "path": "scripts/analyze_remaining_agents.py",
        "size": 18044,
        "modified": "2025-07-24T19:10:43.728918"
      },
      {
        "filename": "baseagent_adoption_analysis.py",
        "path": "scripts/baseagent_adoption_analysis.py",
        "size": 10397,
        "modified": "2025-07-24T19:10:43.728918"
      },
      {
        "filename": "enforce_base_agent.py",
        "path": "scripts/enforce_base_agent.py",
        "size": 11784,
        "modified": "2025-07-24T19:10:43.728918"
      },
      {
        "filename": "verify_agent_health_checks.py",
        "path": "scripts/verify_agent_health_checks.py",
        "size": 8215,
        "modified": "2025-06-28T16:41:58.319214"
      },
      {
        "filename": "generate_agent_inventory.py",
        "path": "scripts/generate_agent_inventory.py",
        "size": 2640,
        "modified": "2025-07-24T19:10:43.728918"
      },
      {
        "filename": "enhanced_baseagent_validator.py",
        "path": "scripts/enhanced_baseagent_validator.py",
        "size": 15086,
        "modified": "2025-07-24T19:10:43.728918"
      },
      {
        "filename": "test_unified_memory_agent.py",
        "path": "scripts/test_unified_memory_agent.py",
        "size": 13291,
        "modified": "2025-07-24T19:10:43.748493"
      },
      {
        "filename": "verify_agent_cleanup.py",
        "path": "scripts/verify_agent_cleanup.py",
        "size": 10086,
        "modified": "2025-06-28T16:41:58.319214"
      },
      {
        "filename": "generate_agents_report.py",
        "path": "scripts/generate_agents_report.py",
        "size": 8365,
        "modified": "2025-07-08T07:43:33.443268"
      },
      {
        "filename": "coordinator_agent.py",
        "path": "NEWPLAN/PHASE1/coordinator_agent.py",
        "size": 48491,
        "modified": "2025-07-24T19:10:43.464657"
      },
      {
        "filename": "agent_helpers.py",
        "path": "common_utils/agent_helpers.py",
        "size": 4507,
        "modified": "2025-07-28T10:53:48.363739"
      },
      {
        "filename": "user_agent.py",
        "path": "unified-system-v1/venv/lib/python3.10/site-packages/werkzeug/user_agent.py",
        "size": 1416,
        "modified": "2025-07-27T14:04:39.202775"
      },
      {
        "filename": "fix_baseagent_port_conflicts.py",
        "path": "analysis_results/claude_4_sonnet_max/fix_baseagent_port_conflicts.py",
        "size": 8318,
        "modified": "2025-07-26T04:22:47.356455"
      },
      {
        "filename": "fix_baseagent_ports.py",
        "path": "analysis_results/claude_4_opus_max/fix_baseagent_ports.py",
        "size": 4649,
        "modified": "2025-07-26T04:22:47.356455"
      },
      {
        "filename": "fix_critical_agents.py",
        "path": "analysis_results/claude_4_opus_max/fix_critical_agents.py",
        "size": 7833,
        "modified": "2025-07-26T04:22:47.356455"
      },
      {
        "filename": "model_manager_agent.py",
        "path": "tests/mocks/model_manager_agent.py",
        "size": 1191,
        "modified": "2025-07-12T23:47:35.538011"
      },
      {
        "filename": "unified_system_agent_error_bus_integration.py",
        "path": "docs/error_bus_examples/unified_system_agent_error_bus_integration.py",
        "size": 7111,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "unified_web_agent_error_bus_integration.py",
        "path": "docs/error_bus_examples/unified_web_agent_error_bus_integration.py",
        "size": 7096,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "remote_connector_agent_api_integration.py",
        "path": "docs/api_integration_examples/remote_connector_agent_api_integration.py",
        "size": 1920,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "session_memory_agent_api_integration.py",
        "path": "docs/api_integration_examples/session_memory_agent_api_integration.py",
        "size": 1908,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "unified_web_agent_api_integration.py",
        "path": "docs/api_integration_examples/unified_web_agent_api_integration.py",
        "size": 1890,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "unified_web_agent_encryption.py",
        "path": "docs/security_examples/unified_web_agent_encryption.py",
        "size": 8304,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "face_recognition_agent_access_control.py",
        "path": "docs/security_examples/face_recognition_agent_access_control.py",
        "size": 9609,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "unified_web_agent_access_control.py",
        "path": "docs/security_examples/unified_web_agent_access_control.py",
        "size": 9529,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "unified_web_agent_authentication.py",
        "path": "docs/security_examples/unified_web_agent_authentication.py",
        "size": 7170,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "face_recognition_agent_authentication.py",
        "path": "docs/security_examples/face_recognition_agent_authentication.py",
        "size": 7215,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "face_recognition_agent_encryption.py",
        "path": "docs/security_examples/face_recognition_agent_encryption.py",
        "size": 8374,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "unified_web_agent_contract.py",
        "path": "docs/api_contract_templates/unified_web_agent_contract.py",
        "size": 1956,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "session_memory_agent_contract.py",
        "path": "docs/api_contract_templates/session_memory_agent_contract.py",
        "size": 1995,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "remote_connector_agent_contract.py",
        "path": "docs/api_contract_templates/remote_connector_agent_contract.py",
        "size": 2021,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "unified_web_agent_health.py",
        "path": "docs/resiliency_examples/unified_web_agent_health.py",
        "size": 3217,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "base_agent_health.py",
        "path": "docs/resiliency_examples/base_agent_health.py",
        "size": 3170,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "unified_system_agent_circuit_breaker.py",
        "path": "docs/resiliency_examples/unified_system_agent_circuit_breaker.py",
        "size": 2246,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "base_agent_circuit_breaker.py",
        "path": "docs/resiliency_examples/base_agent_circuit_breaker.py",
        "size": 2178,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "unified_web_agent_bulkhead.py",
        "path": "docs/resiliency_examples/unified_web_agent_bulkhead.py",
        "size": 2832,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "unified_system_agent_health.py",
        "path": "docs/resiliency_examples/unified_system_agent_health.py",
        "size": 3238,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "unified_system_agent_bulkhead.py",
        "path": "docs/resiliency_examples/unified_system_agent_bulkhead.py",
        "size": 2859,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "base_agent_bulkhead.py",
        "path": "docs/resiliency_examples/base_agent_bulkhead.py",
        "size": 2771,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "unified_web_agent_circuit_breaker.py",
        "path": "docs/resiliency_examples/unified_web_agent_circuit_breaker.py",
        "size": 2225,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "session_memory_agent_optimization.py",
        "path": "docs/performance_examples/session_memory_agent_optimization.py",
        "size": 3790,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "voice_profiling_agent_caching.py",
        "path": "docs/performance_examples/voice_profiling_agent_caching.py",
        "size": 2832,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "voice_profiling_agent_optimization.py",
        "path": "docs/performance_examples/voice_profiling_agent_optimization.py",
        "size": 3795,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "session_memory_agent_caching.py",
        "path": "docs/performance_examples/session_memory_agent_caching.py",
        "size": 2823,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "session_memory_agent_profiling.py",
        "path": "docs/performance_examples/session_memory_agent_profiling.py",
        "size": 2775,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "unified_web_agent_optimization.py",
        "path": "docs/performance_examples/unified_web_agent_optimization.py",
        "size": 3775,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "unified_web_agent_profiling.py",
        "path": "docs/performance_examples/unified_web_agent_profiling.py",
        "size": 2745,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "voice_profiling_agent_profiling.py",
        "path": "docs/performance_examples/voice_profiling_agent_profiling.py",
        "size": 2785,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "unified_web_agent_caching.py",
        "path": "docs/performance_examples/unified_web_agent_caching.py",
        "size": 2796,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "human_awareness_agent_health_integration.py",
        "path": "docs/health_integration_examples/human_awareness_agent_health_integration.py",
        "size": 1997,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "proactive_agent_interface_health_integration.py",
        "path": "docs/health_integration_examples/proactive_agent_interface_health_integration.py",
        "size": 2017,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "model_manager_agent_health_integration.py",
        "path": "docs/health_integration_examples/model_manager_agent_health_integration.py",
        "size": 1993,
        "modified": "2025-07-24T19:10:43.533169"
      },
      {
        "filename": "simple_agent_health_test.py",
        "path": "main_pc_code/simple_agent_health_test.py",
        "size": 7546,
        "modified": "2025-07-24T19:10:43.631043"
      },
      {
        "filename": "refactor_agents.py",
        "path": "main_pc_code/refactor_agents.py",
        "size": 3109,
        "modified": "2025-06-28T16:41:58.286714"
      },
      {
        "filename": "test_base_agent_health.py",
        "path": "main_pc_code/test_base_agent_health.py",
        "size": 1705,
        "modified": "2025-07-24T19:10:43.640831"
      },
      {
        "filename": "validate_agent_paths.py",
        "path": "main_pc_code/validate_agent_paths.py",
        "size": 2483,
        "modified": "2025-07-24T19:10:43.640831"
      },
      {
        "filename": "working_agent_health_test.py",
        "path": "main_pc_code/working_agent_health_test.py",
        "size": 6276,
        "modified": "2025-07-24T19:10:43.640831"
      },
      {
        "filename": "test_single_agent.py",
        "path": "main_pc_code/test_single_agent.py",
        "size": 2889,
        "modified": "2025-06-28T16:41:58.286714"
      },
      {
        "filename": "agent_health_check_validator.py",
        "path": "main_pc_code/agent_health_check_validator.py",
        "size": 9966,
        "modified": "2025-07-24T19:10:43.562531"
      },
      {
        "filename": "agent_ports.py",
        "path": "main_pc_code/config/agent_ports.py",
        "size": 2322,
        "modified": "2025-06-28T16:41:58.275881"
      },
      {
        "filename": "start_agents_new.py",
        "path": "main_pc_code/scripts/start_agents_new.py",
        "size": 12529,
        "modified": "2025-07-24T19:10:43.631043"
      },
      {
        "filename": "smoke_test_agents.py",
        "path": "main_pc_code/scripts/smoke_test_agents.py",
        "size": 2227,
        "modified": "2025-07-24T19:10:43.631043"
      },
      {
        "filename": "agent_audit.py",
        "path": "main_pc_code/scripts/agent_audit.py",
        "size": 4285,
        "modified": "2025-06-30T01:42:00.947816"
      },
      {
        "filename": "fix_agent_health_issues.py",
        "path": "main_pc_code/scripts/fix_agent_health_issues.py",
        "size": 13873,
        "modified": "2025-07-24T19:10:43.631043"
      },
      {
        "filename": "validate_agents.py",
        "path": "main_pc_code/scripts/validate_agents.py",
        "size": 5274,
        "modified": "2025-07-24T19:10:43.631043"
      },
      {
        "filename": "check_all_agents_health.py",
        "path": "main_pc_code/scripts/check_all_agents_health.py",
        "size": 8377,
        "modified": "2025-07-24T19:10:43.631043"
      },
      {
        "filename": "start_all_agents.py",
        "path": "main_pc_code/scripts/start_all_agents.py",
        "size": 5746,
        "modified": "2025-07-24T19:10:43.631043"
      },
      {
        "filename": "start_agents_win.py",
        "path": "main_pc_code/scripts/start_agents_win.py",
        "size": 6255,
        "modified": "2025-06-28T16:41:58.286714"
      },
      {
        "filename": "agent_supervisor.py",
        "path": "main_pc_code/utils/agent_supervisor.py",
        "size": 21485,
        "modified": "2025-07-24T19:10:43.640831"
      },
      {
        "filename": "agent_health.py",
        "path": "main_pc_code/utils/agent_health.py",
        "size": 2183,
        "modified": "2025-07-24T19:10:43.640831"
      },
      {
        "filename": "analyze_agent_blocking.py",
        "path": "main_pc_code/utils/analyze_agent_blocking.py",
        "size": 3516,
        "modified": "2025-07-24T19:10:43.640831"
      },
      {
        "filename": "human_awareness_agent.py",
        "path": "main_pc_code/agents/human_awareness_agent.py",
        "size": 11115,
        "modified": "2025-07-24T19:10:43.591893"
      },
      {
        "filename": "nlu_agent_enhanced.py",
        "path": "main_pc_code/agents/nlu_agent_enhanced.py",
        "size": 15839,
        "modified": "2025-07-24T19:10:43.601681"
      },
      {
        "filename": "proactive_agent_interface.py",
        "path": "main_pc_code/agents/proactive_agent_interface.py",
        "size": 16906,
        "modified": "2025-07-24T19:10:43.601681"
      },
      {
        "filename": "vram_optimizer_agent_day4_optimized.py",
        "path": "main_pc_code/agents/vram_optimizer_agent_day4_optimized.py",
        "size": 66352,
        "modified": "2025-07-24T19:10:43.611469"
      },
      {
        "filename": "model_manager_agent.py",
        "path": "main_pc_code/agents/model_manager_agent.py",
        "size": 234712,
        "modified": "2025-07-24T19:12:53.043298"
      },
      {
        "filename": "model_manager_agent_migrated.py",
        "path": "main_pc_code/agents/model_manager_agent_migrated.py",
        "size": 233242,
        "modified": "2025-07-24T19:10:43.591893"
      },
      {
        "filename": "session_memory_agent.py",
        "path": "main_pc_code/agents/session_memory_agent.py",
        "size": 17811,
        "modified": "2025-07-24T19:10:43.611469"
      },
      {
        "filename": "chitchat_agent.py",
        "path": "main_pc_code/agents/chitchat_agent.py",
        "size": 19806,
        "modified": "2025-07-24T19:10:43.582106"
      },
      {
        "filename": "nlu_agent.py",
        "path": "main_pc_code/agents/nlu_agent.py",
        "size": 15658,
        "modified": "2025-07-28T10:32:18.895155"
      },
      {
        "filename": "noise_reduction_agent_day4_optimized.py",
        "path": "main_pc_code/agents/noise_reduction_agent_day4_optimized.py",
        "size": 17355,
        "modified": "2025-07-24T19:10:43.601681"
      },
      {
        "filename": "vram_optimizer_agent.py",
        "path": "main_pc_code/agents/vram_optimizer_agent.py",
        "size": 66979,
        "modified": "2025-07-24T19:10:43.611469"
      },
      {
        "filename": "vision_capture_agent.py",
        "path": "main_pc_code/agents/vision_capture_agent.py",
        "size": 8757,
        "modified": "2025-07-24T19:10:43.611469"
      },
      {
        "filename": "face_recognition_agent_optimized.py",
        "path": "main_pc_code/agents/face_recognition_agent_optimized.py",
        "size": 15077,
        "modified": "2025-07-24T19:10:43.582106"
      },
      {
        "filename": "code_generator_agent.py",
        "path": "main_pc_code/agents/code_generator_agent.py",
        "size": 17186,
        "modified": "2025-07-24T19:10:43.582106"
      },
      {
        "filename": "noise_reduction_agent.py",
        "path": "main_pc_code/agents/noise_reduction_agent.py",
        "size": 16950,
        "modified": "2025-07-24T19:10:43.601681"
      },
      {
        "filename": "unified_system_agent.py",
        "path": "main_pc_code/agents/unified_system_agent.py",
        "size": 20717,
        "modified": "2025-07-24T19:10:43.611469"
      },
      {
        "filename": "mood_tracker_agent.py",
        "path": "main_pc_code/agents/mood_tracker_agent.py",
        "size": 17156,
        "modified": "2025-07-24T19:10:43.591893"
      },
      {
        "filename": "model_manager_agent_test.py",
        "path": "main_pc_code/agents/model_manager_agent_test.py",
        "size": 233109,
        "modified": "2025-07-24T19:10:43.591893"
      },
      {
        "filename": "emotion_synthesis_agent.py",
        "path": "main_pc_code/agents/emotion_synthesis_agent.py",
        "size": 10034,
        "modified": "2025-07-24T19:10:43.582106"
      },
      {
        "filename": "voice_profiling_agent.py",
        "path": "main_pc_code/agents/voice_profiling_agent.py",
        "size": 18395,
        "modified": "2025-07-24T19:10:43.611469"
      },
      {
        "filename": "face_recognition_agent.py",
        "path": "main_pc_code/agents/face_recognition_agent.py",
        "size": 30659,
        "modified": "2025-07-24T19:10:43.582106"
      },
      {
        "filename": "streaming_tts_agent.py",
        "path": "main_pc_code/agents/streaming_tts_agent.py",
        "size": 32778,
        "modified": "2025-07-24T19:10:43.611469"
      },
      {
        "filename": "model_manager_agent_day4_optimized.py",
        "path": "main_pc_code/agents/model_manager_agent_day4_optimized.py",
        "size": 233512,
        "modified": "2025-07-24T19:10:43.591893"
      },
      {
        "filename": "service_registry_agent.py",
        "path": "main_pc_code/agents/service_registry_agent.py",
        "size": 13463,
        "modified": "2025-07-26T14:17:02.859243"
      },
      {
        "filename": "streaming_tts_agent_day4_optimized.py",
        "path": "main_pc_code/agents/core_speech_output/streaming_tts_agent_day4_optimized.py",
        "size": 33224,
        "modified": "2025-07-24T19:10:43.582106"
      },
      {
        "filename": "streaming_tts_agent.py",
        "path": "main_pc_code/agents/core_speech_output/streaming_tts_agent.py",
        "size": 32802,
        "modified": "2025-07-24T19:10:43.582106"
      },
      {
        "filename": "jarvis_memory_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/jarvis_memory_agent.py",
        "size": 6448,
        "modified": "2025-07-24T19:10:43.572319"
      },
      {
        "filename": "web_scraper_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/web_utils/web_scraper_agent.py",
        "size": 23829,
        "modified": "2025-07-24T19:10:43.582106"
      },
      {
        "filename": "translator_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/translation/translator_agent.py",
        "size": 32050,
        "modified": "2025-07-24T19:10:43.572319"
      },
      {
        "filename": "learning_mode_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/memory_reasoning/learning_mode_agent.py",
        "size": 5833,
        "modified": "2025-07-24T19:10:43.572319"
      },
      {
        "filename": "unified_memory_reasoning_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/memory_reasoning/unified_memory_reasoning_agent.py",
        "size": 7370,
        "modified": "2025-07-22T03:50:51.307894"
      },
      {
        "filename": "llm_task_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/memory_reasoning/llm_task_agent.py",
        "size": 10761,
        "modified": "2025-07-24T19:10:43.572319"
      },
      {
        "filename": "context_summarizer_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/memory_reasoning/context_summarizer_agent.py",
        "size": 18174,
        "modified": "2025-07-24T19:10:43.572319"
      },
      {
        "filename": "contextual_memory_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/memory_reasoning/contextual_memory_agent.py",
        "size": 13979,
        "modified": "2025-07-24T19:10:43.572319"
      },
      {
        "filename": "chain_of_thought_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/memory_reasoning/chain_of_thought_agent.py",
        "size": 16907,
        "modified": "2025-07-22T03:50:51.318646"
      },
      {
        "filename": "test_generator_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/misc/test_generator_agent.py",
        "size": 17585,
        "modified": "2025-07-24T19:10:43.572319"
      },
      {
        "filename": "tts_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/tts/tts_agent.py",
        "size": 14863,
        "modified": "2025-07-24T19:10:43.582106"
      },
      {
        "filename": "streaming_tts_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/tts/streaming_tts_agent.py",
        "size": 16090,
        "modified": "2025-07-24T19:10:43.582106"
      },
      {
        "filename": "model_manager_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/model_management/model_manager_agent.py",
        "size": 182369,
        "modified": "2025-07-24T19:10:43.572319"
      },
      {
        "filename": "model_manager_agent_gguf_connector.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/model_management/model_manager_agent_gguf_connector.py",
        "size": 13441,
        "modified": "2025-07-24T19:10:43.572319"
      },
      {
        "filename": "planner_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/planning_utils/planner_agent.py",
        "size": 18137,
        "modified": "2025-07-24T19:10:43.572319"
      },
      {
        "filename": "executor_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/planning_utils/executor_agent.py",
        "size": 21998,
        "modified": "2025-07-24T19:10:43.572319"
      },
      {
        "filename": "chain_of_thought_agent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/planning_utils/chain_of_thought_agent.py",
        "size": 20643,
        "modified": "2025-07-24T19:10:43.572319"
      },
      {
        "filename": "unified_web_agent_main_pc.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/archive/web/unified_web_agent_main_pc.py",
        "size": 10288,
        "modified": "2025-07-24T19:10:43.582106"
      },
      {
        "filename": "context_summarizer_agent.py",
        "path": "main_pc_code/agents/core_memory/context_summarizer_agent.py",
        "size": 18164,
        "modified": "2025-07-24T19:10:43.582106"
      },
      {
        "filename": "auto_fixer_agent.py",
        "path": "main_pc_code/agents/needtoverify/auto_fixer_agent.py",
        "size": 6855,
        "modified": "2025-07-24T19:10:43.601681"
      },
      {
        "filename": "agent_utils.py",
        "path": "main_pc_code/agents/needtoverify/agent_utils.py",
        "size": 19837,
        "modified": "2025-07-24T19:10:43.601681"
      },
      {
        "filename": "context_bridge_agent.py",
        "path": "main_pc_code/agents/needtoverify/context_bridge_agent.py",
        "size": 10829,
        "modified": "2025-07-24T19:10:43.601681"
      },
      {
        "filename": "autonomous_agent_framework.py",
        "path": "main_pc_code/agents/needtoverify/autonomous_agent_framework.py",
        "size": 29625,
        "modified": "2025-07-24T19:10:43.601681"
      },
      {
        "filename": "filesystem_assistant_agent.py",
        "path": "main_pc_code/agents/needtoverify/filesystem_assistant_agent.py",
        "size": 6532,
        "modified": "2025-07-24T19:10:43.601681"
      },
      {
        "filename": "test_vram_optimizer_agent.py",
        "path": "main_pc_code/tests/test_vram_optimizer_agent.py",
        "size": 5843,
        "modified": "2025-07-24T19:10:43.640831"
      },
      {
        "filename": "test_unified_planning_agent.py",
        "path": "main_pc_code/tests/test_unified_planning_agent.py",
        "size": 5523,
        "modified": "2025-07-24T19:10:43.640831"
      },
      {
        "filename": "copy_agent_files.py",
        "path": "main_pc_code/NEWMUSTFOLLOW/copy_agent_files.py",
        "size": 5337,
        "modified": "2025-07-03T21:32:38.408835"
      },
      {
        "filename": "find_agent_files.py",
        "path": "main_pc_code/NEWMUSTFOLLOW/find_agent_files.py",
        "size": 6539,
        "modified": "2025-07-24T19:10:43.562531"
      },
      {
        "filename": "tutoring_agent_original.py",
        "path": "backups/week4_second_migration/tutoring_agent_original.py",
        "size": 11953,
        "modified": "2025-07-24T19:10:43.494019"
      },
      {
        "filename": "unifiedutilsagent_original.py",
        "path": "backups/task2d_pilot_agent_backups/unifiedutilsagent_original.py",
        "size": 18379,
        "modified": "2025-07-24T19:10:43.494019"
      },
      {
        "filename": "model_manager_agent_original.py",
        "path": "backups/week4_mma_migration/model_manager_agent_original.py",
        "size": 232844,
        "modified": "2025-07-24T19:10:43.494019"
      },
      {
        "filename": "faulty_agent_backend_registry.py",
        "path": "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/distributed/rpc/_testing/faulty_agent_backend_registry.py",
        "size": 1682,
        "modified": "2025-06-27T23:02:28.799351"
      },
      {
        "filename": "local_elastic_agent.py",
        "path": "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/distributed/elastic/agent/server/local_elastic_agent.py",
        "size": 15084,
        "modified": "2025-06-30T06:42:34.918359"
      },
      {
        "filename": "rpc_agent_test_fixture.py",
        "path": "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/rpc_agent_test_fixture.py",
        "size": 3523,
        "modified": "2025-06-30T06:42:34.918359"
      },
      {
        "filename": "faulty_agent_rpc_test.py",
        "path": "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/faulty_agent_rpc_test.py",
        "size": 15730,
        "modified": "2025-06-30T06:42:34.918359"
      },
      {
        "filename": "faulty_rpc_agent_test_fixture.py",
        "path": "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/faulty_rpc_agent_test_fixture.py",
        "size": 3833,
        "modified": "2025-06-30T06:42:34.929359"
      },
      {
        "filename": "tensorpipe_rpc_agent_test_fixture.py",
        "path": "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/tensorpipe_rpc_agent_test_fixture.py",
        "size": 2639,
        "modified": "2025-06-30T06:42:34.929359"
      },
      {
        "filename": "agent_types.py",
        "path": "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/transformers/tools/agent_types.py",
        "size": 9716,
        "modified": "2025-06-27T23:02:35.163827"
      },
      {
        "filename": "evaluate_agent.py",
        "path": "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/transformers/tools/evaluate_agent.py",
        "size": 25329,
        "modified": "2025-06-27T23:02:35.174660"
      },
      {
        "filename": "agents.py",
        "path": "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/transformers/tools/agents.py",
        "size": 31177,
        "modified": "2025-06-27T23:02:35.174660"
      },
      {
        "filename": "user_agent.py",
        "path": "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/werkzeug/user_agent.py",
        "size": 2006,
        "modified": "2025-07-19T09:30:59.088501"
      },
      {
        "filename": "faulty_agent_backend_registry.py",
        "path": "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/distributed/rpc/_testing/faulty_agent_backend_registry.py",
        "size": 1682,
        "modified": "2025-06-27T23:03:29.310013"
      },
      {
        "filename": "local_elastic_agent.py",
        "path": "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/distributed/elastic/agent/server/local_elastic_agent.py",
        "size": 15084,
        "modified": "2025-06-30T06:42:34.940359"
      },
      {
        "filename": "rpc_agent_test_fixture.py",
        "path": "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/rpc_agent_test_fixture.py",
        "size": 3523,
        "modified": "2025-06-30T06:42:34.940359"
      },
      {
        "filename": "faulty_agent_rpc_test.py",
        "path": "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/faulty_agent_rpc_test.py",
        "size": 15730,
        "modified": "2025-06-30T06:42:34.940359"
      },
      {
        "filename": "faulty_rpc_agent_test_fixture.py",
        "path": "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/faulty_rpc_agent_test_fixture.py",
        "size": 3833,
        "modified": "2025-06-30T06:42:34.951359"
      },
      {
        "filename": "tensorpipe_rpc_agent_test_fixture.py",
        "path": "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/tensorpipe_rpc_agent_test_fixture.py",
        "size": 2639,
        "modified": "2025-06-30T06:42:34.951359"
      },
      {
        "filename": "agent_types.py",
        "path": "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/transformers/tools/agent_types.py",
        "size": 9716,
        "modified": "2025-06-27T23:03:38.281643"
      },
      {
        "filename": "evaluate_agent.py",
        "path": "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/transformers/tools/evaluate_agent.py",
        "size": 25329,
        "modified": "2025-06-27T23:03:38.303310"
      },
      {
        "filename": "agents.py",
        "path": "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/transformers/tools/agents.py",
        "size": 31177,
        "modified": "2025-06-27T23:03:38.303310"
      },
      {
        "filename": "user_agent.py",
        "path": "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/werkzeug/user_agent.py",
        "size": 2006,
        "modified": "2025-07-19T09:31:00.066649"
      },
      {
        "filename": "MetaCognitionAgent_circuit_breaker.py",
        "path": "docs/resiliency_examples/MetaCognitionAgent_circuit_breaker.py",
        "size": 2236,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "MetaCognitionAgent_health.py",
        "path": "docs/resiliency_examples/MetaCognitionAgent_health.py",
        "size": 3228,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "MetaCognitionAgent_bulkhead.py",
        "path": "docs/resiliency_examples/MetaCognitionAgent_bulkhead.py",
        "size": 2845,
        "modified": "2025-07-24T19:10:43.542956"
      },
      {
        "filename": "ProactiveAgent.py",
        "path": "main_pc_code/agents/ProactiveAgent.py",
        "size": 25760,
        "modified": "2025-07-28T10:32:18.895155"
      },
      {
        "filename": "IntentionValidatorAgent.py",
        "path": "main_pc_code/agents/IntentionValidatorAgent.py",
        "size": 19099,
        "modified": "2025-07-24T19:10:43.562531"
      },
      {
        "filename": "EmpathyAgent.py",
        "path": "main_pc_code/agents/EmpathyAgent.py",
        "size": 19060,
        "modified": "2025-07-24T19:10:43.562531"
      },
      {
        "filename": "HumanAwarenessAgent.py",
        "path": "main_pc_code/agents/HumanAwarenessAgent.py",
        "size": 9412,
        "modified": "2025-07-24T19:10:43.562531"
      },
      {
        "filename": "DynamicIdentityAgent.py",
        "path": "main_pc_code/agents/DynamicIdentityAgent.py",
        "size": 19001,
        "modified": "2025-07-24T19:10:43.562531"
      },
      {
        "filename": "MetaCognitionAgent.py",
        "path": "main_pc_code/agents/MetaCognitionAgent.py",
        "size": 36458,
        "modified": "2025-07-24T19:10:43.562531"
      },
      {
        "filename": "LearningAgent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/LearningAgent.py",
        "size": 18257,
        "modified": "2025-07-24T19:10:43.572319"
      },
      {
        "filename": "SecurityPolicyAgent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/SecurityPolicyAgent.py",
        "size": 13895,
        "modified": "2025-07-24T19:10:43.572319"
      },
      {
        "filename": "PredictiveActionAgent.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/PredictiveActionAgent.py",
        "size": 321,
        "modified": "2025-07-22T03:50:51.286390"
      },
      {
        "filename": "AgentBreeder.py",
        "path": "main_pc_code/agents/_trash_2025-06-13/AgentBreeder.py",
        "size": 18916,
        "modified": "2025-07-24T19:10:43.562531"
      },
      {
        "filename": "SessionAgent.py",
        "path": "main_pc_code/agents/needtoverify/SessionAgent.py",
        "size": 10991,
        "modified": "2025-07-24T19:10:43.591893"
      }
    ]
  },
  "analysis_results": {
    "run_mainpc_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "run_agent",
          "line": 18,
          "args": [
            "agent_path"
          ]
        },
        {
          "name": "run_core_agents",
          "line": 69,
          "args": []
        },
        {
          "name": "main",
          "line": 94,
          "args": []
        }
      ],
      "imports": [
        "os",
        "sys",
        "subprocess",
        "argparse",
        "pathlib.Path"
      ],
      "ports": [],
      "configurations": [
        ".env"
      ],
      "health_checks": [],
      "errors": []
    },
    "start_mainpc_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "load_config",
          "line": 34,
          "args": []
        },
        {
          "name": "check_port_available",
          "line": 44,
          "args": [
            "port"
          ]
        },
        {
          "name": "check_agent_health",
          "line": 52,
          "args": [
            "name",
            "port",
            "timeout"
          ]
        },
        {
          "name": "start_agent",
          "line": 71,
          "args": [
            "agent",
            "dry_run"
          ]
        },
        {
          "name": "start_agents_in_order",
          "line": 136,
          "args": [
            "config",
            "dry_run"
          ]
        },
        {
          "name": "cleanup",
          "line": 185,
          "args": [
            "signum",
            "frame"
          ]
        },
        {
          "name": "main",
          "line": 205,
          "args": []
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "os",
        "sys",
        "yaml",
        "time",
        "subprocess",
        "argparse",
        "pathlib.Path",
        "zmq",
        "signal",
        "threading",
        "socket"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = load_config()",
        "config = yaml.safe_load(f)",
        "config = load_config()",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [
        "def check_agent_health(name, port, timeout=5):"
      ],
      "errors": []
    },
    "start_mainpc_core_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "load_config",
          "line": 43,
          "args": []
        },
        {
          "name": "extract_agents",
          "line": 53,
          "args": [
            "config"
          ]
        },
        {
          "name": "check_port_available",
          "line": 66,
          "args": [
            "port"
          ]
        },
        {
          "name": "check_agent_health",
          "line": 74,
          "args": [
            "name",
            "port",
            "timeout"
          ]
        },
        {
          "name": "start_agent",
          "line": 94,
          "args": [
            "agent",
            "dry_run"
          ]
        },
        {
          "name": "cleanup",
          "line": 159,
          "args": [
            "signum",
            "frame"
          ]
        },
        {
          "name": "main",
          "line": 179,
          "args": []
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "os",
        "sys",
        "yaml",
        "time",
        "subprocess",
        "argparse",
        "pathlib.Path",
        "signal",
        "threading",
        "socket",
        "zmq"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = load_config()",
        "config = yaml.safe_load(f)",
        "config = load_config()",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [
        "def check_agent_health(name, port, timeout=5):"
      ],
      "errors": []
    },
    "docker/mainpc/agent_starter.py": {
      "classes": [],
      "functions": [
        {
          "name": "load_startup_config",
          "line": 27,
          "args": []
        },
        {
          "name": "start_agent",
          "line": 38,
          "args": [
            "agent_name",
            "script_path"
          ]
        },
        {
          "name": "log_monitor",
          "line": 66,
          "args": [
            "agent_name",
            "pipe",
            "is_stderr"
          ]
        },
        {
          "name": "cleanup",
          "line": 79,
          "args": [
            "signum",
            "frame"
          ]
        },
        {
          "name": "main",
          "line": 96,
          "args": []
        }
      ],
      "imports": [
        "os",
        "sys",
        "yaml",
        "time",
        "signal",
        "logging",
        "subprocess",
        "pathlib.Path",
        "multiprocessing"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = load_startup_config()",
        "config = yaml.safe_load(f)",
        "config = load_startup_config()",
        ".env",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/FORMAINPC/ChainOfThoughtAgent.py": {
      "classes": [
        {
          "name": "ChainOfThoughtAgent",
          "line": 58,
          "methods": [
            "__init__",
            "connect_llm_router",
            "report_error",
            "send_to_llm",
            "generate_problem_breakdown",
            "generate_solution_for_step",
            "verify_solution",
            "refine_solution",
            "generate_combined_solution",
            "generate_with_cot",
            "cleanup",
            "_get_health_status",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 59,
          "args": [
            "self",
            "port",
            "name"
          ]
        },
        {
          "name": "connect_llm_router",
          "line": 93,
          "args": [
            "self"
          ]
        },
        {
          "name": "report_error",
          "line": 101,
          "args": [
            "self",
            "error_message",
            "severity",
            "context"
          ]
        },
        {
          "name": "send_to_llm",
          "line": 116,
          "args": [
            "self",
            "prompt",
            "model",
            "max_tokens"
          ]
        },
        {
          "name": "generate_problem_breakdown",
          "line": 171,
          "args": [
            "self",
            "user_request",
            "code_context"
          ]
        },
        {
          "name": "generate_solution_for_step",
          "line": 207,
          "args": [
            "self",
            "step",
            "previous_steps_info",
            "code_context"
          ]
        },
        {
          "name": "verify_solution",
          "line": 237,
          "args": [
            "self",
            "step",
            "solution",
            "code_context"
          ]
        },
        {
          "name": "refine_solution",
          "line": 279,
          "args": [
            "self",
            "step",
            "original_solution",
            "verification_results",
            "code_context"
          ]
        },
        {
          "name": "generate_combined_solution",
          "line": 306,
          "args": [
            "self",
            "steps_with_solutions",
            "user_request",
            "code_context"
          ]
        },
        {
          "name": "generate_with_cot",
          "line": 334,
          "args": [
            "self",
            "user_request",
            "code_context"
          ]
        },
        {
          "name": "cleanup",
          "line": 395,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 427,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 442,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "zmq",
        "json",
        "os",
        "threading",
        "time",
        "logging",
        "re",
        "sys",
        "pathlib.Path",
        "datetime.datetime",
        "traceback",
        "psutil",
        "main_pc_code.utils.config_loader.load_config",
        "common.core.base_agent.BaseAgent",
        "main_pc_code.utils.config_loader.load_config",
        "main_pc_code.utils.network_utils.get_zmq_connection_string",
        "main_pc_code.utils.network_utils.get_machine_ip",
        "sys",
        "os",
        "pathlib.Path",
        "common.env_helpers.get_env",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        "config = load_config()",
        "config = load_config()",
        "config = load_config()",
        "config = load_config()",
        ".env"
      ],
      "health_checks": [
        "health",
        "def _get_health_status(self):",
        "def health_check(self):",
        "def _get_health_status(self):"
      ],
      "errors": []
    },
    "main_pc_code/FORMAINPC/GOT_TOTAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 401)"
      ]
    },
    "main_pc_code/FORMAINPC/CognitiveModelAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 378)"
      ]
    },
    "main_pc_code/FORMAINPC/LearningAdjusterAgent.py": {
      "classes": [
        {
          "name": "ParameterType",
          "line": 69,
          "methods": []
        },
        {
          "name": "ParameterConfig",
          "line": 80,
          "methods": []
        },
        {
          "name": "LearningAdjusterAgent",
          "line": 90,
          "methods": [
            "__init__",
            "_init_db",
            "_update_health_status",
            "register_parameter",
            "adjust_parameter",
            "record_performance",
            "optimize_parameters",
            "_get_active_parameters",
            "_analyze_parameter_trend",
            "_get_health_status",
            "handle_request",
            "run",
            "cleanup",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 91,
          "args": [
            "self",
            "config"
          ]
        },
        {
          "name": "_init_db",
          "line": 133,
          "args": [
            "self"
          ]
        },
        {
          "name": "_update_health_status",
          "line": 183,
          "args": [
            "self"
          ]
        },
        {
          "name": "register_parameter",
          "line": 196,
          "args": [
            "self",
            "config"
          ]
        },
        {
          "name": "adjust_parameter",
          "line": 227,
          "args": [
            "self",
            "parameter_name",
            "new_value"
          ]
        },
        {
          "name": "record_performance",
          "line": 268,
          "args": [
            "self",
            "metric_name",
            "value",
            "parameters"
          ]
        },
        {
          "name": "optimize_parameters",
          "line": 295,
          "args": [
            "self",
            "metric_name"
          ]
        },
        {
          "name": "_get_active_parameters",
          "line": 334,
          "args": [
            "self"
          ]
        },
        {
          "name": "_analyze_parameter_trend",
          "line": 349,
          "args": [
            "self",
            "parameter_name",
            "history"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 401,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_request",
          "line": 419,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 460,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 509,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 519,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "sys",
        "os",
        "pathlib.Path",
        "zmq",
        "json",
        "logging",
        "sqlite3",
        "numpy",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "dataclasses.dataclass",
        "enum.Enum",
        "time",
        "threading",
        "typing.Dict",
        "typing.Any",
        "common.core.base_agent.BaseAgent",
        "argparse",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.path_manager.PathManager",
        "sys",
        "pathlib.Path",
        "psutil",
        "main_pc_code.utils.config_loader.load_config",
        "common_utils.zmq_helper.create_socket",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        "config = load_config()",
        "config=None, **kwargs):",
        "config = config or {}",
        "config = c.fetchone()",
        "config = c.fetchone()",
        "config = ParameterConfig(**request[\"config\"])",
        "config = load_config()",
        "config=None, **kwargs):",
        "config = config or {}",
        "config = c.fetchone()"
      ],
      "health_checks": [
        "health",
        "def _update_health_status(self):",
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def health_check(self):",
        "def _update_health_status(self):",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "main_pc_code/FORMAINPC/LocalFineTunerAgent.py": {
      "classes": [
        {
          "name": "TuningStatus",
          "line": 80,
          "methods": []
        },
        {
          "name": "ArtifactType",
          "line": 90,
          "methods": []
        },
        {
          "name": "TuningJob",
          "line": 98,
          "methods": []
        },
        {
          "name": "LocalFineTunerAgent",
          "line": 108,
          "methods": [
            "__init__",
            "_init_db",
            "_init_artifact_dir",
            "create_tuning_job",
            "start_tuning_job",
            "_create_job_from_db",
            "_run_job_manager",
            "_execute_tuning_step",
            "_record_metrics",
            "_save_artifacts",
            "_fail_job",
            "_cleanup_job",
            "get_job_status",
            "handle_request",
            "run",
            "stop",
            "_load_model",
            "_prepare_lora_config",
            "_initialize_few_shot_model",
            "trigger_few_shot_learning",
            "_get_health_status",
            "cleanup",
            "health_check"
          ]
        },
        {
          "name": "ModelClientModel",
          "line": 654,
          "methods": [
            "__init__",
            "__getattr__"
          ]
        },
        {
          "name": "ModelClientTokenizer",
          "line": 660,
          "methods": [
            "__init__",
            "__getattr__"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 109,
          "args": [
            "self",
            "port",
            "name"
          ]
        },
        {
          "name": "_init_db",
          "line": 147,
          "args": [
            "self"
          ]
        },
        {
          "name": "_init_artifact_dir",
          "line": 200,
          "args": [
            "self"
          ]
        },
        {
          "name": "create_tuning_job",
          "line": 206,
          "args": [
            "self",
            "model_id",
            "config"
          ]
        },
        {
          "name": "start_tuning_job",
          "line": 255,
          "args": [
            "self",
            "job_id"
          ]
        },
        {
          "name": "_create_job_from_db",
          "line": 302,
          "args": [
            "self",
            "job_data"
          ]
        },
        {
          "name": "_run_job_manager",
          "line": 315,
          "args": [
            "self"
          ]
        },
        {
          "name": "_execute_tuning_step",
          "line": 343,
          "args": [
            "self",
            "job"
          ]
        },
        {
          "name": "_record_metrics",
          "line": 364,
          "args": [
            "self",
            "job_id",
            "metrics"
          ]
        },
        {
          "name": "_save_artifacts",
          "line": 383,
          "args": [
            "self",
            "job"
          ]
        },
        {
          "name": "_fail_job",
          "line": 426,
          "args": [
            "self",
            "job_id",
            "error"
          ]
        },
        {
          "name": "_cleanup_job",
          "line": 454,
          "args": [
            "self",
            "job_id"
          ]
        },
        {
          "name": "get_job_status",
          "line": 467,
          "args": [
            "self",
            "job_id"
          ]
        },
        {
          "name": "handle_request",
          "line": 528,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 574,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop",
          "line": 607,
          "args": [
            "self"
          ]
        },
        {
          "name": "_load_model",
          "line": 629,
          "args": [
            "self",
            "model_name"
          ]
        },
        {
          "name": "_prepare_lora_config",
          "line": 677,
          "args": [
            "self",
            "model_name"
          ]
        },
        {
          "name": "_initialize_few_shot_model",
          "line": 687,
          "args": [
            "self"
          ]
        },
        {
          "name": "trigger_few_shot_learning",
          "line": 699,
          "args": [
            "self",
            "examples"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 774,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 784,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 790,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 655,
          "args": [
            "self",
            "model_name"
          ]
        },
        {
          "name": "__getattr__",
          "line": 657,
          "args": [
            "self",
            "name"
          ]
        },
        {
          "name": "__init__",
          "line": 661,
          "args": [
            "self",
            "model_name"
          ]
        },
        {
          "name": "__getattr__",
          "line": 663,
          "args": [
            "self",
            "name"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "sys",
        "os",
        "pathlib.Path",
        "zmq",
        "json",
        "logging",
        "sqlite3",
        "threading",
        "time",
        "os",
        "shutil",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "dataclasses.dataclass",
        "enum.Enum",
        "queue.Queue",
        "transformers.Trainer",
        "transformers.TrainingArguments",
        "transformers.AutoModelForCausalLM",
        "transformers.AutoTokenizer",
        "peft.get_peft_model",
        "peft.LoraConfig",
        "peft.TaskType",
        "peft.prepare_model_for_kbit_training",
        "torch",
        "datasets.load_dataset",
        "datasets.Dataset",
        "numpy",
        "typing.Dict",
        "typing.Any",
        "common.core.base_agent.BaseAgent",
        "main_pc_code.utils.model_client",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.path_manager.PathManager",
        "sys",
        "pathlib.Path",
        "psutil",
        "datetime.datetime",
        "main_pc_code.utils.config_loader.load_config",
        "common_utils.zmq_helper.create_socket",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        "config = load_config()",
        "CONFIG = \"config\"",
        "config=config,",
        "config=json.loads(job_data[2]),",
        "config = LoraConfig(",
        "config = load_config()",
        "CONFIG = \"config\"",
        "config=config,",
        "config=json.loads(job_data[2]),",
        "config = LoraConfig("
      ],
      "health_checks": [
        "health",
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def health_check(self):",
        "def get_job_status(self, job_id: str) -> Dict:",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "start_pc2_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "load_config",
          "line": 34,
          "args": []
        },
        {
          "name": "check_port_available",
          "line": 44,
          "args": [
            "port"
          ]
        },
        {
          "name": "check_agent_health",
          "line": 52,
          "args": [
            "name",
            "port",
            "timeout"
          ]
        },
        {
          "name": "start_agent",
          "line": 71,
          "args": [
            "agent",
            "dry_run"
          ]
        },
        {
          "name": "start_agents_in_order",
          "line": 136,
          "args": [
            "config",
            "dry_run"
          ]
        },
        {
          "name": "cleanup",
          "line": 168,
          "args": [
            "signum",
            "frame"
          ]
        },
        {
          "name": "main",
          "line": 188,
          "args": []
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "os",
        "sys",
        "yaml",
        "time",
        "subprocess",
        "argparse",
        "pathlib.Path",
        "zmq",
        "signal",
        "threading",
        "socket"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = load_config()",
        "config = yaml.safe_load(f)",
        "config = load_config()",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [
        "def check_agent_health(name, port, timeout=5):"
      ],
      "errors": []
    },
    "extract_pc2_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "extract_agent_paths",
          "line": 5,
          "args": [
            "config_file"
          ]
        }
      ],
      "imports": [
        "yaml"
      ],
      "ports": [],
      "configurations": [
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "scripts/pc2_template_compliant_agent.py": {
      "classes": [
        {
          "name": "PC2TemplateAgent",
          "line": 45,
          "methods": [
            "__init__",
            "_get_health_status",
            "handle_request",
            "run",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 48,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 73,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_request",
          "line": 98,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 119,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 164,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "time",
        "logging",
        "threading",
        "zmq",
        "json",
        "os",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "main_pc_code.src.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        "config = Config().get_config()",
        "config = Config().get_config()",
        ".env",
        ".JSON"
      ],
      "health_checks": [
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "scripts/migrate_pc2_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "parse_args",
          "line": 68,
          "args": []
        },
        {
          "name": "find_all_agents",
          "line": 77,
          "args": []
        },
        {
          "name": "extract_class_name",
          "line": 86,
          "args": [
            "source_code"
          ]
        },
        {
          "name": "extract_original_init_content",
          "line": 100,
          "args": [
            "source_code"
          ]
        },
        {
          "name": "add_base_agent_inheritance",
          "line": 142,
          "args": [
            "source_code",
            "class_name"
          ]
        },
        {
          "name": "add_imports",
          "line": 153,
          "args": [
            "source_code"
          ]
        },
        {
          "name": "replace_init_method",
          "line": 221,
          "args": [
            "source_code",
            "class_name",
            "agent_name"
          ]
        },
        {
          "name": "add_health_status_method",
          "line": 266,
          "args": [
            "source_code",
            "class_name",
            "agent_name"
          ]
        },
        {
          "name": "replace_main_block",
          "line": 317,
          "args": [
            "source_code",
            "class_name"
          ]
        },
        {
          "name": "migrate_agent",
          "line": 340,
          "args": [
            "agent_path",
            "output_dir",
            "dry_run"
          ]
        },
        {
          "name": "main",
          "line": 383,
          "args": []
        }
      ],
      "imports": [
        "os",
        "re",
        "sys",
        "shutil",
        "argparse",
        "ast",
        "pathlib.Path",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple"
      ],
      "ports": [],
      "configurations": [
        "config = load_config()\"",
        "config = load_config()\""
      ],
      "health_checks": [
        "def _get_health_status(self):",
        "def add_health_status_method(source_code: str, class_name: str, agent_name: str) -> str:",
        "def\\s+_get_health_status\\s*\\(', source_code):",
        "def _get_health_status(self):",
        "def add_health_status_method(source_code: str, class_name: str, agent_name: str) -> str:",
        "def\\s+_get_health_status\\s*\\(', source_code):"
      ],
      "errors": []
    },
    "scripts/pc2_template_compliant_agent_improved.py": {
      "classes": [
        {
          "name": "PC2ImprovedTemplateAgent",
          "line": 30,
          "methods": [
            "__init__",
            "_get_health_status",
            "handle_request",
            "run",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 33,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 58,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_request",
          "line": 79,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 100,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 145,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "time",
        "json",
        "zmq",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "pc2_code.agents.utils.pc2_agent_helpers.BaseAgent",
        "pc2_code.agents.utils.pc2_agent_helpers.get_pc2_config",
        "pc2_code.agents.utils.pc2_agent_helpers.setup_pc2_logging",
        "pc2_code.agents.utils.pc2_agent_helpers.get_pc2_health_status",
        "pc2_code.agents.utils.pc2_agent_helpers.setup_zmq_socket",
        "pc2_code.agents.utils.pc2_agent_helpers.standard_cleanup",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        "config = get_pc2_config()",
        "config = get_pc2_config()",
        ".JSON"
      ],
      "health_checks": [
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "scripts/pc2_agents_compliance_fixer.py": {
      "classes": [],
      "functions": [
        {
          "name": "create_backup",
          "line": 40,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "gather_agents_from_config",
          "line": 48,
          "args": [
            "config_path"
          ]
        },
        {
          "name": "add_base_agent_import",
          "line": 67,
          "args": [
            "content"
          ]
        },
        {
          "name": "add_config_loader_import",
          "line": 90,
          "args": [
            "content"
          ]
        },
        {
          "name": "add_base_agent_inheritance",
          "line": 150,
          "args": [
            "content"
          ]
        },
        {
          "name": "add_super_init",
          "line": 164,
          "args": [
            "content"
          ]
        },
        {
          "name": "add_time_import",
          "line": 225,
          "args": [
            "content"
          ]
        },
        {
          "name": "add_health_status_method",
          "line": 245,
          "args": [
            "content"
          ]
        },
        {
          "name": "add_cleanup_method",
          "line": 309,
          "args": [
            "content"
          ]
        },
        {
          "name": "standardize_main_block",
          "line": 356,
          "args": [
            "content"
          ]
        },
        {
          "name": "add_run_method",
          "line": 405,
          "args": [
            "content"
          ]
        },
        {
          "name": "fix_agent_compliance",
          "line": 462,
          "args": [
            "agent"
          ]
        },
        {
          "name": "main",
          "line": 500,
          "args": []
        }
      ],
      "imports": [
        "os",
        "re",
        "sys",
        "shutil",
        "yaml",
        "ast",
        "pathlib.Path",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "typing.Optional"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = load_config()' not in content:",
        "config = load_config()' + content[last_import_pos:]",
        "config = yaml.safe_load(f)",
        "config = load_config()' not in content:",
        "config = load_config()' + content[last_import_pos:]",
        ".yaml",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [
        "def add_health_status_method(content: str) -> str:",
        "def _get_health_status(self) -> dict:",
        "def add_health_status_method(content: str) -> str:",
        "def _get_health_status(self) -> dict:"
      ],
      "errors": []
    },
    "pc2_code/fix_translator_agent.py": {
      "classes": [],
      "functions": [
        {
          "name": "fix_translator_agent",
          "line": 12,
          "args": []
        }
      ],
      "imports": [
        "os",
        "re",
        "sys"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "pc2_code/agent_health_check_validation.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 104)"
      ]
    },
    "pc2_code/agent_stabilization_sweep.py": {
      "classes": [],
      "functions": [
        {
          "name": "log",
          "line": 53,
          "args": [
            "msg"
          ]
        },
        {
          "name": "run_agent",
          "line": 57,
          "args": [
            "script_path"
          ]
        },
        {
          "name": "main",
          "line": 110,
          "args": []
        }
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "subprocess",
        "sys",
        "time",
        "pathlib.Path",
        "typing.List"
      ],
      "ports": [],
      "configurations": [
        ".env"
      ],
      "health_checks": [],
      "errors": []
    },
    "pc2_code/test_auth_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected an indented block after 'try' statement on line 11 (<unknown>, line 12)"
      ]
    },
    "pc2_code/test_unified_utils_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [
        "sys",
        "time",
        "pathlib.Path",
        "pc2_code.agents.ForPC2.unified_utils_agent.UnifiedUtilsAgent",
        "threading"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "pc2_code/test_self_healing_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 27)"
      ]
    },
    "pc2_code/test_unified_error_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected an indented block after 'try' statement on line 11 (<unknown>, line 12)"
      ]
    },
    "pc2_code/test_simple_agent.py": {
      "classes": [
        {
          "name": "SimpleTestAgent",
          "line": 6,
          "methods": [
            "__init__",
            "start",
            "stop"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 7,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "start",
          "line": 13,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop",
          "line": 45,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "zmq",
        "json",
        "time",
        "threading"
      ],
      "ports": [
        7101
      ],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "pc2_code/test_agent_health.py": {
      "classes": [],
      "functions": [
        {
          "name": "test_agent_health",
          "line": 15,
          "args": [
            "agent_name",
            "port",
            "timeout"
          ]
        },
        {
          "name": "main",
          "line": 59,
          "args": []
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "zmq",
        "json",
        "time",
        "sys",
        "pathlib.Path",
        "common.env_helpers.get_env"
      ],
      "ports": [],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "def test_agent_health(agent_name, port, timeout=5):"
      ],
      "errors": []
    },
    "pc2_code/test_agent_integration.py": {
      "classes": [
        {
          "name": "IntegrationTester",
          "line": 35,
          "methods": [
            "__init__",
            "test_simple_request",
            "test_complex_code_request",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "line": 131,
          "args": []
        },
        {
          "name": "__init__",
          "line": 36,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_simple_request",
          "line": 45,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_complex_code_request",
          "line": 84,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 124,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "zmq",
        "json",
        "time",
        "logging",
        "sys",
        "os",
        "pathlib.Path",
        "common.env_helpers.get_env"
      ],
      "ports": [
        7602
      ],
      "configurations": [
        ".env"
      ],
      "health_checks": [],
      "errors": []
    },
    "pc2_code/test_episodic_memory_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 18)"
      ]
    },
    "pc2_code/test_rca_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [
        "sys",
        "time",
        "pathlib.Path",
        "pc2_code.agents.ForPC2.rca_agent.RCA_Agent",
        "threading"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "pc2_code/check_memory_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "check_agent_health",
          "line": 12,
          "args": [
            "port",
            "name"
          ]
        },
        {
          "name": "check_memory_services",
          "line": 44,
          "args": []
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "sys",
        "time",
        "json",
        "zmq",
        "common.env_helpers.get_env"
      ],
      "ports": [],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "def check_agent_health(port, name):"
      ],
      "errors": []
    },
    "pc2_code/test_dreamworld_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 18)"
      ]
    },
    "pc2_code/remove_services_from_active_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "update_active_agents",
          "line": 4,
          "args": []
        }
      ],
      "imports": [
        "os",
        "pathlib.Path"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "pc2_code/test_dreaming_mode_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 27)"
      ]
    },
    "pc2_code/force_second_pc_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "get_config",
          "line": 13,
          "args": []
        },
        {
          "name": "start_agent",
          "line": 18,
          "args": [
            "agent_name",
            "port"
          ]
        },
        {
          "name": "main",
          "line": 41,
          "args": []
        }
      ],
      "imports": [
        "json",
        "os",
        "subprocess",
        "sys",
        "time",
        "sys",
        "os",
        "common.utils.path_manager.PathManager"
      ],
      "ports": [],
      "configurations": [
        "config = get_config()",
        "config = get_config()",
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "pc2_code/test_unified_web_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 27)"
      ]
    },
    "pc2_code/test_unified_memory_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 18)"
      ]
    },
    "pc2_code/scripts/start_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "start_agent",
          "line": 9,
          "args": [
            "script",
            "args",
            "port",
            "dry_run"
          ]
        },
        {
          "name": "main",
          "line": 75,
          "args": []
        }
      ],
      "imports": [
        "subprocess",
        "time",
        "json",
        "os",
        "zmq",
        "sys",
        "argparse"
      ],
      "ports": [
        7104,
        7105,
        7106,
        7107,
        5644,
        5615,
        7124,
        5563
      ],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "pc2_code/scripts/check_agents.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 14)"
      ]
    },
    "pc2_code/scripts/agent_health_checker.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 17)"
      ]
    },
    "pc2_code/scripts/standardize_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "find_agents",
          "line": 77,
          "args": [
            "base_dir"
          ]
        },
        {
          "name": "parse_agent_file",
          "line": 108,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "standardize_agent",
          "line": 169,
          "args": [
            "agent_info",
            "dry_run"
          ]
        },
        {
          "name": "check_agent_dependencies",
          "line": 257,
          "args": [
            "startup_config_path"
          ]
        },
        {
          "name": "find_circular_dependencies",
          "line": 295,
          "args": [
            "dependencies"
          ]
        },
        {
          "name": "find_redundant_agents",
          "line": 333,
          "args": [
            "startup_config_path"
          ]
        },
        {
          "name": "main",
          "line": 371,
          "args": []
        },
        {
          "name": "dfs",
          "line": 307,
          "args": [
            "node",
            "path",
            "visited"
          ]
        }
      ],
      "imports": [
        "os",
        "sys",
        "re",
        "glob",
        "argparse",
        "logging",
        "time",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Optional",
        "typing.Union",
        "typing.Any",
        "typing.Tuple",
        "sys",
        "os",
        "common.utils.path_manager.PathManager",
        "yaml",
        "yaml"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = yaml.safe_load(f)",
        "config = yaml.safe_load(f)",
        "config = yaml.safe_load(f)",
        ".yaml",
        ".yaml",
        ".yaml",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [
        "class_end] + HEALTH_CHECK_TEMPLATE + content[class_end:",
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "pc2_code/src/core/rca_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 54)"
      ]
    },
    "pc2_code/agents/unified_memory_reasoning_agent.py": {
      "classes": [
        {
          "name": "ContextManager",
          "line": 69,
          "methods": [
            "__init__",
            "add_to_context",
            "get_context",
            "get_context_text",
            "clear_context",
            "_calculate_importance",
            "_adjust_context_size",
            "prune_context"
          ]
        },
        {
          "name": "UnifiedMemoryReasoningAgent",
          "line": 250,
          "methods": [
            "_lazy_import_dependencies",
            "_lazy_import_dependencies",
            "__init__",
            "_perform_initialization",
            "load_context_store",
            "save_context_store",
            "load_error_patterns",
            "save_error_patterns",
            "load_twins",
            "save_twins",
            "update_twin",
            "get_twin",
            "delete_twin",
            "get_session_id",
            "add_interaction",
            "_update_session_summary",
            "_summarize_code",
            "_summarize_conversation",
            "_extract_key_errors",
            "add_error_pattern",
            "get_error_solution",
            "get_context_summary",
            "_compress_summary",
            "coordinate_memory",
            "resolve_conflict",
            "handle_request",
            "_get_health_status",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "line": 882,
          "args": []
        },
        {
          "name": "__init__",
          "line": 72,
          "args": [
            "self",
            "min_size",
            "max_size",
            "initial_size"
          ]
        },
        {
          "name": "add_to_context",
          "line": 94,
          "args": [
            "self",
            "text",
            "speaker",
            "metadata"
          ]
        },
        {
          "name": "get_context",
          "line": 129,
          "args": [
            "self",
            "speaker",
            "max_items"
          ]
        },
        {
          "name": "get_context_text",
          "line": 147,
          "args": [
            "self",
            "speaker",
            "max_items"
          ]
        },
        {
          "name": "clear_context",
          "line": 159,
          "args": [
            "self",
            "speaker"
          ]
        },
        {
          "name": "_calculate_importance",
          "line": 170,
          "args": [
            "self",
            "text"
          ]
        },
        {
          "name": "_adjust_context_size",
          "line": 205,
          "args": [
            "self"
          ]
        },
        {
          "name": "prune_context",
          "line": 229,
          "args": [
            "self"
          ]
        },
        {
          "name": "_lazy_import_dependencies",
          "line": 252,
          "args": [
            "self"
          ]
        },
        {
          "name": "_lazy_import_dependencies",
          "line": 267,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 283,
          "args": [
            "self",
            "zmq_port",
            "health_check_port"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 341,
          "args": [
            "self"
          ]
        },
        {
          "name": "load_context_store",
          "line": 375,
          "args": [
            "self"
          ]
        },
        {
          "name": "save_context_store",
          "line": 382,
          "args": [
            "self"
          ]
        },
        {
          "name": "load_error_patterns",
          "line": 387,
          "args": [
            "self"
          ]
        },
        {
          "name": "save_error_patterns",
          "line": 394,
          "args": [
            "self"
          ]
        },
        {
          "name": "load_twins",
          "line": 399,
          "args": [
            "self"
          ]
        },
        {
          "name": "save_twins",
          "line": 414,
          "args": [
            "self"
          ]
        },
        {
          "name": "update_twin",
          "line": 426,
          "args": [
            "self",
            "user_id",
            "twin_data"
          ]
        },
        {
          "name": "get_twin",
          "line": 437,
          "args": [
            "self",
            "user_id"
          ]
        },
        {
          "name": "delete_twin",
          "line": 442,
          "args": [
            "self",
            "user_id"
          ]
        },
        {
          "name": "get_session_id",
          "line": 452,
          "args": [
            "self",
            "user_id",
            "project_name"
          ]
        },
        {
          "name": "add_interaction",
          "line": 459,
          "args": [
            "self",
            "session_id",
            "interaction_type",
            "content",
            "metadata"
          ]
        },
        {
          "name": "_update_session_summary",
          "line": 486,
          "args": [
            "self",
            "session_id"
          ]
        },
        {
          "name": "_summarize_code",
          "line": 535,
          "args": [
            "self",
            "code_snippets"
          ]
        },
        {
          "name": "_summarize_conversation",
          "line": 562,
          "args": [
            "self",
            "user_queries",
            "system_responses"
          ]
        },
        {
          "name": "_extract_key_errors",
          "line": 582,
          "args": [
            "self",
            "errors"
          ]
        },
        {
          "name": "add_error_pattern",
          "line": 603,
          "args": [
            "self",
            "error_type",
            "pattern",
            "solution"
          ]
        },
        {
          "name": "get_error_solution",
          "line": 630,
          "args": [
            "self",
            "error_message"
          ]
        },
        {
          "name": "get_context_summary",
          "line": 645,
          "args": [
            "self",
            "session_id",
            "max_tokens"
          ]
        },
        {
          "name": "_compress_summary",
          "line": 662,
          "args": [
            "self",
            "summary",
            "ratio"
          ]
        },
        {
          "name": "coordinate_memory",
          "line": 692,
          "args": [
            "self",
            "agent_name",
            "operation",
            "data",
            "priority"
          ]
        },
        {
          "name": "resolve_conflict",
          "line": 711,
          "args": [
            "self",
            "op_id",
            "new_priority"
          ]
        },
        {
          "name": "handle_request",
          "line": 727,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 819,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 855,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "os",
        "threading",
        "time",
        "logging",
        "hashlib",
        "traceback",
        "re",
        "datetime.datetime",
        "collections.deque",
        "pathlib.Path",
        "sys",
        "sys",
        "os",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.config.system_config.config",
        "common.env_helpers.get_env",
        "numpy"
      ],
      "ports": [
        7105,
        7106
      ],
      "configurations": [
        ".env",
        ".json",
        ".json",
        ".json"
      ],
      "health_checks": [
        "def __init__(self, zmq_port=7105, health_check_port=7106):",
        "def _get_health_status(self):",
        "def _get_health_status(self):"
      ],
      "errors": []
    },
    "pc2_code/agents/test_compliant_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 38)"
      ]
    },
    "pc2_code/agents/tutoring_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: closing parenthesis ')' does not match opening parenthesis '{' on line 50 (<unknown>, line 51)"
      ]
    },
    "pc2_code/agents/auto_fixer_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "pc2_code/agents/tutoring_service_agent.py": {
      "classes": [
        {
          "name": "TutoringServiceAgent",
          "line": 35,
          "methods": [
            "__init__",
            "_get_health_status",
            "handle_request",
            "cleanup",
            "stop"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 39,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 57,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_request",
          "line": 70,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "cleanup",
          "line": 79,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop",
          "line": 89,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "os",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "logging",
        "time",
        "threading",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "sys",
        "pathlib.Path",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config"
      ],
      "ports": [],
      "configurations": [
        "config = Config().get_config()",
        "config = {}",
        "config = Config().get_config()",
        "config = {}"
      ],
      "health_checks": [
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "pc2_code/agents/agent_utils.py": {
      "classes": [
        {
          "name": "ZMQClient",
          "line": 41,
          "methods": [
            "__init__",
            "send_request",
            "close"
          ]
        },
        {
          "name": "ZMQServer",
          "line": 103,
          "methods": [
            "__init__",
            "recv_request",
            "send_response",
            "close"
          ]
        },
        {
          "name": "AgentBase",
          "line": 149,
          "methods": [
            "__init__",
            "register_with_framework",
            "unregister_from_framework",
            "handle_requests",
            "process_request",
            "run",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_agent_logger",
          "line": 339,
          "args": [
            "agent_name"
          ]
        },
        {
          "name": "create_baseagent_instance",
          "line": 347,
          "args": [
            "agent_class",
            "name",
            "port"
          ]
        },
        {
          "name": "generate_unique_id",
          "line": 369,
          "args": []
        },
        {
          "name": "format_exception",
          "line": 373,
          "args": [
            "e"
          ]
        },
        {
          "name": "safe_json_loads",
          "line": 377,
          "args": [
            "json_str"
          ]
        },
        {
          "name": "safe_json_dumps",
          "line": 388,
          "args": [
            "obj"
          ]
        },
        {
          "name": "get_agent_port",
          "line": 400,
          "args": [
            "agent_name"
          ]
        },
        {
          "name": "get_agent_endpoint",
          "line": 405,
          "args": [
            "agent_name",
            "host"
          ]
        },
        {
          "name": "is_port_in_use",
          "line": 410,
          "args": [
            "port",
            "host"
          ]
        },
        {
          "name": "find_available_port",
          "line": 416,
          "args": [
            "start_port",
            "max_attempts"
          ]
        },
        {
          "name": "get_system_info",
          "line": 430,
          "args": []
        },
        {
          "name": "migrate_legacy_agent_to_baseagent",
          "line": 477,
          "args": [
            "legacy_agent_file",
            "output_file"
          ]
        },
        {
          "name": "__init__",
          "line": 43,
          "args": [
            "self",
            "endpoint",
            "socket_type",
            "timeout"
          ]
        },
        {
          "name": "send_request",
          "line": 57,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "close",
          "line": 95,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 105,
          "args": [
            "self",
            "port",
            "socket_type"
          ]
        },
        {
          "name": "recv_request",
          "line": 118,
          "args": [
            "self"
          ]
        },
        {
          "name": "send_response",
          "line": 130,
          "args": [
            "self",
            "response"
          ]
        },
        {
          "name": "close",
          "line": 140,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 164,
          "args": [
            "self",
            "agent_id",
            "port",
            "capabilities"
          ]
        },
        {
          "name": "register_with_framework",
          "line": 215,
          "args": [
            "self"
          ]
        },
        {
          "name": "unregister_from_framework",
          "line": 241,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_requests",
          "line": 265,
          "args": [
            "self"
          ]
        },
        {
          "name": "process_request",
          "line": 304,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 308,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 325,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "zmq",
        "json",
        "time",
        "logging",
        "sys",
        "os",
        "traceback",
        "warnings",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Callable",
        "threading",
        "uuid",
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.logger_util.get_json_logger",
        "pc2_code.config.system_config.config",
        "socket",
        "platform",
        "psutil"
      ],
      "ports": [],
      "configurations": [
        "config = {'system': {'log_level': 'INFO', 'logs_dir': 'logs'}}",
        "config = {'system': {'log_level': 'INFO', 'logs_dir': 'logs'}}",
        ".JSON",
        ".JSON"
      ],
      "health_checks": [],
      "errors": []
    },
    "pc2_code/agents/unified_web_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 1895)"
      ]
    },
    "pc2_code/agents/tutor_agent.py": {
      "classes": [
        {
          "name": "StudentProfile",
          "line": 80,
          "methods": []
        },
        {
          "name": "Lesson",
          "line": 97,
          "methods": []
        },
        {
          "name": "PerformanceMetrics",
          "line": 110,
          "methods": []
        },
        {
          "name": "AdaptiveLearningEngine",
          "line": 120,
          "methods": [
            "__init__",
            "_init_difficulty_model",
            "_init_learning_style_model",
            "adjust_difficulty",
            "analyze_learning_style"
          ]
        },
        {
          "name": "ProgressTracker",
          "line": 195,
          "methods": [
            "__init__",
            "update_progress",
            "analyze_progress",
            "_identify_weak_areas",
            "_identify_strong_areas",
            "_generate_recommendations"
          ]
        },
        {
          "name": "FeedbackGenerator",
          "line": 282,
          "methods": [
            "__init__",
            "_load_feedback_templates",
            "generate_feedback"
          ]
        },
        {
          "name": "ParentDashboard",
          "line": 346,
          "methods": [
            "__init__",
            "update_dashboard",
            "get_dashboard_data",
            "set_goals",
            "add_notification"
          ]
        },
        {
          "name": "TutorAgent",
          "line": 408,
          "methods": [
            "_lazy_import_dependencies",
            "_lazy_import_dependencies",
            "__init__",
            "_load_lessons",
            "_get_health_status",
            "handle_request",
            "_handle_get_student",
            "_handle_update_student",
            "_handle_get_lesson",
            "_handle_submit_performance",
            "_handle_get_progress",
            "_handle_set_goal",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 122,
          "args": [
            "self",
            "config"
          ]
        },
        {
          "name": "_init_difficulty_model",
          "line": 129,
          "args": [
            "self"
          ]
        },
        {
          "name": "_init_learning_style_model",
          "line": 141,
          "args": [
            "self"
          ]
        },
        {
          "name": "adjust_difficulty",
          "line": 145,
          "args": [
            "self",
            "student_profile",
            "current_performance"
          ]
        },
        {
          "name": "analyze_learning_style",
          "line": 169,
          "args": [
            "self",
            "student_profile"
          ]
        },
        {
          "name": "__init__",
          "line": 197,
          "args": [
            "self",
            "config"
          ]
        },
        {
          "name": "update_progress",
          "line": 201,
          "args": [
            "self",
            "student_id",
            "lesson_id",
            "performance"
          ]
        },
        {
          "name": "analyze_progress",
          "line": 214,
          "args": [
            "self",
            "student_id"
          ]
        },
        {
          "name": "_identify_weak_areas",
          "line": 246,
          "args": [
            "self",
            "progress"
          ]
        },
        {
          "name": "_identify_strong_areas",
          "line": 254,
          "args": [
            "self",
            "progress"
          ]
        },
        {
          "name": "_generate_recommendations",
          "line": 262,
          "args": [
            "self",
            "progress"
          ]
        },
        {
          "name": "__init__",
          "line": 284,
          "args": [
            "self",
            "config"
          ]
        },
        {
          "name": "_load_feedback_templates",
          "line": 288,
          "args": [
            "self"
          ]
        },
        {
          "name": "generate_feedback",
          "line": 318,
          "args": [
            "self",
            "performance",
            "previous_performance"
          ]
        },
        {
          "name": "__init__",
          "line": 348,
          "args": [
            "self",
            "config"
          ]
        },
        {
          "name": "update_dashboard",
          "line": 352,
          "args": [
            "self",
            "student_id",
            "progress_data"
          ]
        },
        {
          "name": "get_dashboard_data",
          "line": 368,
          "args": [
            "self",
            "student_id"
          ]
        },
        {
          "name": "set_goals",
          "line": 375,
          "args": [
            "self",
            "student_id",
            "goals"
          ]
        },
        {
          "name": "add_notification",
          "line": 392,
          "args": [
            "self",
            "student_id",
            "notification"
          ]
        },
        {
          "name": "_lazy_import_dependencies",
          "line": 410,
          "args": [
            "self"
          ]
        },
        {
          "name": "_lazy_import_dependencies",
          "line": 431,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 458,
          "args": [
            "self"
          ]
        },
        {
          "name": "_load_lessons",
          "line": 480,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 497,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_request",
          "line": 517,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_handle_get_student",
          "line": 538,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_handle_update_student",
          "line": 552,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_handle_get_lesson",
          "line": 576,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_handle_submit_performance",
          "line": 590,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_handle_get_progress",
          "line": 637,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_handle_set_goal",
          "line": 653,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "cleanup",
          "line": 668,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "os",
        "json",
        "time",
        "logging",
        "threading",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.field",
        "zmq",
        "uuid",
        "sys",
        "pathlib.Path",
        "sys",
        "os",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config",
        "pc2_code.utils.config_loader.load_config",
        "pc2_code.utils.config_loader.parse_agent_args",
        "common_utils.zmq_helper.create_socket",
        "random",
        "numpy",
        "torch",
        "torch.nn",
        "torch.utils.data.DataLoader",
        "pandas",
        "sklearn.preprocessing.StandardScaler",
        "sklearn.cluster.KMeans"
      ],
      "ports": [],
      "configurations": [
        "config = Config().get_config()",
        "CONFIG = config.get('tutor', {})",
        "CONFIG = json.load(f).get(\"tutor\", {})",
        "CONFIG = {}",
        "config = config",
        "config = config",
        "config = config",
        "config = config",
        "config = Config().get_config()",
        "CONFIG = config.get('tutor', {})"
      ],
      "health_checks": [
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "pc2_code/agents/unified_memory_reasoning_agent_simplified.py": {
      "classes": [
        {
          "name": "UnifiedMemoryReasoningAgent",
          "line": 38,
          "methods": [
            "__init__",
            "_perform_initialization",
            "_load_store",
            "_save_store",
            "handle_request",
            "_get_health_status",
            "cleanup",
            "run"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "line": 232,
          "args": []
        },
        {
          "name": "__init__",
          "line": 41,
          "args": [
            "self",
            "port",
            "health_check_port"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 62,
          "args": [
            "self"
          ]
        },
        {
          "name": "_load_store",
          "line": 75,
          "args": [
            "self"
          ]
        },
        {
          "name": "_save_store",
          "line": 86,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_request",
          "line": 96,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 150,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 172,
          "args": [
            "self"
          ]
        },
        {
          "name": "run",
          "line": 187,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "os",
        "threading",
        "time",
        "logging",
        "sys",
        "datetime.datetime",
        "pathlib.Path",
        "sys",
        "os",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent"
      ],
      "ports": [
        7105,
        7106
      ],
      "configurations": [
        ".json"
      ],
      "health_checks": [
        "def __init__(self, port=7105, health_check_port=7106):",
        "def _get_health_status(self):",
        "def _get_health_status(self):"
      ],
      "errors": []
    },
    "pc2_code/agents/filesystem_assistant_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: closing parenthesis ')' does not match opening parenthesis '{' on line 63 (<unknown>, line 64)"
      ]
    },
    "pc2_code/agents/remote_connector_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 82)"
      ]
    },
    "pc2_code/agents/ForPC2/unified_utils_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: closing parenthesis ')' does not match opening parenthesis '{' on line 62 (<unknown>, line 63)"
      ]
    },
    "pc2_code/agents/utils/pc2_agent_helpers.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 21)"
      ]
    },
    "pc2_code/agents/archive/translation/translator_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected an indented block after 'try' statement on line 76 (<unknown>, line 77)"
      ]
    },
    "pc2_code/agents/archive/memory_reasoning/learning_mode_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 36)"
      ]
    },
    "pc2_code/agents/archive/memory_reasoning/unified_memory_reasoning_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 30)"
      ]
    },
    "pc2_code/agents/archive/memory_reasoning/memory_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 43)"
      ]
    },
    "pc2_code/agents/archive/memory_reasoning/context_summarizer_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 34)"
      ]
    },
    "pc2_code/agents/archive/memory_reasoning/contextual_memory_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 22)"
      ]
    },
    "pc2_code/agents/archive/memory_reasoning/chain_of_thought_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 48)"
      ]
    },
    "pc2_code/agents/archive/misc/proactive_agent_interface.py": {
      "classes": [],
      "functions": [
        {
          "name": "send_proactive_event",
          "line": 21,
          "args": [
            "event_type",
            "text",
            "user",
            "emotion"
          ]
        }
      ],
      "imports": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "zmq",
        "json",
        "logging",
        "time",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "common.env_helpers.get_env"
      ],
      "ports": [
        5595
      ],
      "configurations": [
        ".env"
      ],
      "health_checks": [],
      "errors": []
    },
    "pc2_code/agents/archive/misc/model_manager_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected an indented block after 'try' statement on line 35 (<unknown>, line 37)"
      ]
    },
    "pc2_code/agents/archive/misc/llm_task_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 27)"
      ]
    },
    "pc2_code/agents/archive/misc/auto_fixer_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 33)"
      ]
    },
    "pc2_code/agents/archive/misc/test_unified_web_agent.py": {
      "classes": [
        {
          "name": "TestClient",
          "line": 26,
          "methods": [
            "__init__",
            "send_request",
            "check_health",
            "close"
          ]
        }
      ],
      "functions": [
        {
          "name": "test_navigation",
          "line": 56,
          "args": [
            "client"
          ]
        },
        {
          "name": "test_scraping",
          "line": 75,
          "args": [
            "client"
          ]
        },
        {
          "name": "test_form_filling",
          "line": 95,
          "args": [
            "client"
          ]
        },
        {
          "name": "test_conversation_analysis",
          "line": 116,
          "args": [
            "client"
          ]
        },
        {
          "name": "test_proactive_gathering",
          "line": 136,
          "args": [
            "client"
          ]
        },
        {
          "name": "test_health_monitoring",
          "line": 153,
          "args": [
            "client"
          ]
        },
        {
          "name": "main",
          "line": 169,
          "args": []
        },
        {
          "name": "__init__",
          "line": 27,
          "args": [
            "self",
            "port",
            "health_port"
          ]
        },
        {
          "name": "send_request",
          "line": 38,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "check_health",
          "line": 44,
          "args": [
            "self"
          ]
        },
        {
          "name": "close",
          "line": 50,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "zmq",
        "json",
        "time",
        "logging",
        "sys",
        "pathlib.Path",
        "common.env_helpers.get_env"
      ],
      "ports": [
        5604,
        5605
      ],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "def __init__(self, port=5604, health_port=5605):",
        "def check_health(self):",
        "def test_health_monitoring(client):"
      ],
      "errors": []
    },
    "pc2_code/agents/archive/web/web_scraper_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 96)"
      ]
    },
    "pc2_code/agents/core_agents/tutoring_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 86)"
      ]
    },
    "pc2_code/agents/core_agents/tutoring_service_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 31)"
      ]
    },
    "pc2_code/agents/backups/unified_utils_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 18)"
      ]
    },
    "pc2_code/agents/backups/rca_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 37)"
      ]
    },
    "pc2_code/agents/backups/tutoring_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 21)"
      ]
    },
    "pc2_code/agents/backups/tutoring_service_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 42)"
      ]
    },
    "pc2_code/agents/backups/unified_web_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 99)"
      ]
    },
    "pc2_code/agents/backups/tutor_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 25)"
      ]
    },
    "pc2_code/agents/backups/self_healing_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 65)"
      ]
    },
    "pc2_code/agents/backups/filesystem_assistant_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 33)"
      ]
    },
    "pc2_code/agents/backups/remote_connector_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 38)"
      ]
    },
    "pc2_code/tests/test_unified_memory_reasoning_agent.py": {
      "classes": [
        {
          "name": "TestUnifiedMemoryReasoningAgent",
          "line": 31,
          "methods": [
            "setUp",
            "tearDown",
            "test_initialization",
            "test_health_check",
            "test_store_memory",
            "test_retrieve_memory",
            "test_reason_about_memory"
          ]
        }
      ],
      "functions": [
        {
          "name": "setUp",
          "line": 35,
          "args": [
            "self",
            "mock_discover_service"
          ]
        },
        {
          "name": "tearDown",
          "line": 64,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_initialization",
          "line": 69,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_health_check",
          "line": 76,
          "args": [
            "self",
            "mock_socket"
          ]
        },
        {
          "name": "test_store_memory",
          "line": 91,
          "args": [
            "self",
            "mock_handle_message"
          ]
        },
        {
          "name": "test_retrieve_memory",
          "line": 114,
          "args": [
            "self",
            "mock_handle_message"
          ]
        },
        {
          "name": "test_reason_about_memory",
          "line": 138,
          "args": [
            "self",
            "mock_handle_message"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "unittest",
        "json",
        "zmq",
        "logging",
        "sys",
        "os",
        "unittest.mock.MagicMock",
        "unittest.mock.patch",
        "common.utils.path_env.get_project_root",
        "common.utils.path_env.get_main_pc_code",
        "pc2_code.agents.UnifiedMemoryReasoningAgent.UnifiedMemoryReasoningAgent",
        "common.env_helpers.get_env"
      ],
      "ports": [
        9999
      ],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "def test_health_check(self, mock_socket):"
      ],
      "errors": []
    },
    "pc2_code/agents/VisionProcessingAgent.py": {
      "classes": [
        {
          "name": "VisionProcessingAgent",
          "line": 53,
          "methods": [
            "__init__",
            "handle_request",
            "_describe_image",
            "health_check",
            "_get_health_status"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 62,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_request",
          "line": 82,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_describe_image",
          "line": 93,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "health_check",
          "line": 135,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 164,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 197,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "sys",
        "os",
        "json",
        "time",
        "logging",
        "base64",
        "io",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "PIL.Image",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.utils.config_loader.parse_agent_args",
        "psutil",
        "traceback"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "health",
        "def health_check(self):",
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "pc2_code/agents/DreamingModeAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: closing parenthesis ')' does not match opening parenthesis '{' on line 62 (<unknown>, line 63)"
      ]
    },
    "pc2_code/agents/DreamWorldAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 959)"
      ]
    },
    "pc2_code/agents/LearningAdjusterAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 36)"
      ]
    },
    "pc2_code/agents/AgentTrustScorer.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: closing parenthesis ')' does not match opening parenthesis '{' on line 42 (<unknown>, line 43)"
      ]
    },
    "pc2_code/agents/PerformanceLoggerAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 385)"
      ]
    },
    "pc2_code/agents/ForPC2/AuthenticationAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: closing parenthesis ')' does not match opening parenthesis '{' on line 62 (<unknown>, line 63)"
      ]
    },
    "pc2_code/agents/core_agents/LearningAdjusterAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 50)"
      ]
    },
    "pc2_code/agents/backups/DreamingModeAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 35)"
      ]
    },
    "pc2_code/agents/backups/EpisodicMemoryAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 15)"
      ]
    },
    "pc2_code/agents/backups/DreamWorldAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 26)"
      ]
    },
    "pc2_code/agents/backups/UnifiedMemoryReasoningAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 34)"
      ]
    },
    "pc2_code/agents/backups/UnifiedErrorAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 17)"
      ]
    },
    "pc2_code/agents/backups/AuthenticationAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 24)"
      ]
    },
    "pc2_code/agents/backups/LearningAdjusterAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 22)"
      ]
    },
    "pc2_code/agents/backups/AgentTrustScorer.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 33)"
      ]
    },
    "pc2_code/agents/backups/PerformanceLoggerAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 21)"
      ]
    },
    "PC2_AGENT_STATUS_TEST.py": {
      "classes": [],
      "functions": [
        {
          "name": "test_pc2_agents",
          "line": 12,
          "args": []
        }
      ],
      "imports": [
        "sys",
        "os",
        "importlib.util",
        "pathlib.Path"
      ],
      "ports": [],
      "configurations": [
        ".yaml",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/translation/PC2TRANSLATOR_AGENT.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 308)"
      ]
    },
    "check_agent_health.py": {
      "classes": [],
      "functions": [
        {
          "name": "check_health",
          "line": 12,
          "args": [
            "port"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "zmq",
        "time",
        "sys",
        "json"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "def check_health(port):"
      ],
      "errors": []
    },
    "template_agent.py": {
      "classes": [
        {
          "name": "TemplateAgent",
          "line": 35,
          "methods": [
            "__init__",
            "_signal_handler",
            "setup_zmq",
            "_bind_socket_with_retry",
            "_health_check_loop",
            "run",
            "process_message",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 38,
          "args": [
            "self",
            "name",
            "port"
          ]
        },
        {
          "name": "_signal_handler",
          "line": 68,
          "args": [
            "self",
            "sig",
            "frame"
          ]
        },
        {
          "name": "setup_zmq",
          "line": 76,
          "args": [
            "self"
          ]
        },
        {
          "name": "_bind_socket_with_retry",
          "line": 101,
          "args": [
            "self",
            "socket",
            "port",
            "max_retries"
          ]
        },
        {
          "name": "_health_check_loop",
          "line": 118,
          "args": [
            "self"
          ]
        },
        {
          "name": "run",
          "line": 146,
          "args": [
            "self"
          ]
        },
        {
          "name": "process_message",
          "line": 192,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "cleanup",
          "line": 210,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "zmq",
        "json",
        "signal",
        "logging",
        "threading",
        "pathlib.Path",
        "argparse"
      ],
      "ports": [],
      "configurations": [
        ".env",
        ".env",
        ".env"
      ],
      "health_checks": [
        "def _health_check_loop(self):"
      ],
      "errors": []
    },
    "run_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [
        "os",
        "sys",
        "importlib.util",
        "argparse",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        ".env",
        ".env"
      ],
      "health_checks": [],
      "errors": []
    },
    "agent_scanner.py": {
      "classes": [
        {
          "name": "AgentInfo",
          "line": 34,
          "methods": [
            "__init__",
            "to_dict"
          ]
        },
        {
          "name": "AgentScanner",
          "line": 63,
          "methods": [
            "__init__",
            "scan_configs",
            "_load_config",
            "_extract_agents_from_mainpc_config",
            "_extract_agents_from_pc2_config",
            "_build_dependency_graph",
            "check_for_issues",
            "generate_dependency_graph",
            "generate_report"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "line": 353,
          "args": []
        },
        {
          "name": "__init__",
          "line": 36,
          "args": [
            "self",
            "name",
            "file_path",
            "host",
            "port",
            "health_port"
          ]
        },
        {
          "name": "to_dict",
          "line": 48,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 66,
          "args": [
            "self"
          ]
        },
        {
          "name": "scan_configs",
          "line": 72,
          "args": [
            "self"
          ]
        },
        {
          "name": "_load_config",
          "line": 93,
          "args": [
            "self",
            "config_path",
            "config_type"
          ]
        },
        {
          "name": "_extract_agents_from_mainpc_config",
          "line": 109,
          "args": [
            "self",
            "config"
          ]
        },
        {
          "name": "_extract_agents_from_pc2_config",
          "line": 150,
          "args": [
            "self",
            "config"
          ]
        },
        {
          "name": "_build_dependency_graph",
          "line": 187,
          "args": [
            "self"
          ]
        },
        {
          "name": "check_for_issues",
          "line": 203,
          "args": [
            "self"
          ]
        },
        {
          "name": "generate_dependency_graph",
          "line": 251,
          "args": [
            "self"
          ]
        },
        {
          "name": "generate_report",
          "line": 305,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "os",
        "sys",
        "yaml",
        "json",
        "networkx",
        "matplotlib.pyplot",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "typing.Any",
        "typing.Optional"
      ],
      "ports": [],
      "configurations": [
        "config = {}",
        "config = {}",
        "config = yaml.safe_load(f)",
        "config = config",
        "config = config",
        "config = 'mainpc'",
        "config = 'pc2'",
        "config == 'mainpc':",
        "config == 'mainpc']",
        "config == 'pc2']"
      ],
      "health_checks": [
        "def __init__(self, name: str, file_path: str, host: str, port: int, health_port: Optional[int] = None):"
      ],
      "errors": []
    },
    "real_agent_communication_test.py": {
      "classes": [
        {
          "name": "RealAgentCommunicationTest",
          "line": 14,
          "methods": [
            "__init__",
            "test_serviceregistry_real_communication",
            "test_modelmanager_real_status",
            "test_real_zmq_ports_communication",
            "test_real_http_endpoints",
            "test_real_agent_logs_activity",
            "run_comprehensive_real_test"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "line": 318,
          "args": []
        },
        {
          "name": "__init__",
          "line": 15,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_serviceregistry_real_communication",
          "line": 18,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_modelmanager_real_status",
          "line": 53,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_real_zmq_ports_communication",
          "line": 86,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_real_http_endpoints",
          "line": 142,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_real_agent_logs_activity",
          "line": 204,
          "args": [
            "self"
          ]
        },
        {
          "name": "run_comprehensive_real_test",
          "line": 244,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "zmq",
        "json",
        "time",
        "requests",
        "subprocess",
        "typing.Dict",
        "typing.Any",
        "typing.Optional"
      ],
      "ports": [
        9000,
        8220,
        7100,
        8101
      ],
      "configurations": [
        ".json"
      ],
      "health_checks": [
        "def test_modelmanager_real_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "register_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "connect_to_sdt",
          "line": 21,
          "args": []
        },
        {
          "name": "register_agent",
          "line": 30,
          "args": [
            "socket",
            "agent_name",
            "location",
            "status"
          ]
        },
        {
          "name": "register_all_agents",
          "line": 60,
          "args": []
        },
        {
          "name": "verify_registration",
          "line": 104,
          "args": []
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "zmq",
        "json",
        "time",
        "sys"
      ],
      "ports": [
        7120
      ],
      "configurations": [],
      "health_checks": [
        "def register_agent(socket, agent_name, location=\"MainPC\", status=\"HEALTHY\"):",
        "def register_agent(socket, agent_name, location=\"MainPC\", status=\"HEALTHY\"):"
      ],
      "errors": []
    },
    "check_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "check_agents",
          "line": 23,
          "args": []
        }
      ],
      "imports": [
        "yaml",
        "os",
        "sys",
        "pathlib.Path",
        "enhanced_system_audit.check_compliance"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = yaml.safe_load(f)",
        ".yaml",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "test_agent_connection.py": {
      "classes": [],
      "functions": [
        {
          "name": "test_agent_connection",
          "line": 10,
          "args": [
            "port"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "zmq",
        "json",
        "time"
      ],
      "ports": [
        7120
      ],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "fix_all_core_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "fix_model_manager_agent",
          "line": 15,
          "args": []
        },
        {
          "name": "fix_chain_of_thought_agent",
          "line": 43,
          "args": []
        },
        {
          "name": "fix_task_router",
          "line": 70,
          "args": []
        },
        {
          "name": "add_health_check_methods",
          "line": 102,
          "args": []
        },
        {
          "name": "main",
          "line": 187,
          "args": []
        }
      ],
      "imports": [
        "os",
        "re",
        "sys",
        "pathlib.Path"
      ],
      "ports": [],
      "configurations": [
        "config = ConfigManager().get_config()\"",
        "config = {}\\n        \",",
        "config = ConfigManager().get_config()\"",
        "config = {}\\n        \","
      ],
      "health_checks": [
        "health",
        "health",
        "def add_health_check_methods():",
        "def health_check(self):",
        "def health_check\" not in content and \"def _get_health_status\" not in content:",
        "def health_check\" not in content and \"def _get_health_status\" not in content:"
      ],
      "errors": []
    },
    "agent_validation_checklist.py": {
      "classes": [
        {
          "name": "ValidationResult",
          "line": 24,
          "methods": []
        },
        {
          "name": "AgentInfo",
          "line": 33,
          "methods": []
        },
        {
          "name": "AgentValidator",
          "line": 44,
          "methods": [
            "__init__",
            "_load_validation_checklists",
            "extract_agents_from_config",
            "validate_agent_imports",
            "validate_agent_dependencies",
            "validate_agent_communication",
            "validate_agent_configuration",
            "run_dynamic_checks",
            "validate_agent",
            "validate_critical_agents",
            "generate_report"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "line": 523,
          "args": []
        },
        {
          "name": "__init__",
          "line": 47,
          "args": [
            "self",
            "config_path"
          ]
        },
        {
          "name": "_load_validation_checklists",
          "line": 56,
          "args": [
            "self"
          ]
        },
        {
          "name": "extract_agents_from_config",
          "line": 72,
          "args": [
            "self"
          ]
        },
        {
          "name": "validate_agent_imports",
          "line": 117,
          "args": [
            "self",
            "agent_info"
          ]
        },
        {
          "name": "validate_agent_dependencies",
          "line": 194,
          "args": [
            "self",
            "agent_info"
          ]
        },
        {
          "name": "validate_agent_communication",
          "line": 247,
          "args": [
            "self",
            "agent_info"
          ]
        },
        {
          "name": "validate_agent_configuration",
          "line": 335,
          "args": [
            "self",
            "agent_info"
          ]
        },
        {
          "name": "run_dynamic_checks",
          "line": 405,
          "args": [
            "self",
            "agent_info"
          ]
        },
        {
          "name": "validate_agent",
          "line": 427,
          "args": [
            "self",
            "agent_name"
          ]
        },
        {
          "name": "validate_critical_agents",
          "line": 450,
          "args": [
            "self"
          ]
        },
        {
          "name": "generate_report",
          "line": 465,
          "args": [
            "self"
          ]
        },
        {
          "name": "has_circular_dependency",
          "line": 212,
          "args": [
            "agent_name"
          ]
        }
      ],
      "imports": [
        "os",
        "sys",
        "importlib",
        "inspect",
        "ast",
        "yaml",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "pathlib.Path",
        "logging",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config=agent_config.get('config', {}),",
        "config = yaml.safe_load(f)",
        "config=agent_config.get('config', {}),",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "cleanup_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "find_agent_processes",
          "line": 33,
          "args": []
        },
        {
          "name": "check_port_in_use",
          "line": 74,
          "args": [
            "port"
          ]
        },
        {
          "name": "find_blocked_ports",
          "line": 100,
          "args": []
        },
        {
          "name": "kill_process",
          "line": 128,
          "args": [
            "pid",
            "force"
          ]
        },
        {
          "name": "cleanup_zmq_sockets",
          "line": 157,
          "args": []
        },
        {
          "name": "main",
          "line": 176,
          "args": []
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "os",
        "sys",
        "time",
        "signal",
        "socket",
        "logging",
        "argparse",
        "subprocess",
        "typing.List",
        "typing.Dict",
        "typing.Set",
        "typing.Tuple"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "comprehensive_agent_scanner.py": {
      "classes": [
        {
          "name": "ComprehensiveAgentScanner",
          "line": 18,
          "methods": [
            "__init__",
            "_get_timestamp",
            "discover_directories",
            "scan_agent_files",
            "_categorize_agent_file",
            "_scan_specific_directories",
            "analyze_agent_files",
            "_analyze_single_agent",
            "_extract_ports",
            "_extract_configurations",
            "_extract_health_checks",
            "assess_system_health",
            "generate_recommendations",
            "generate_summary",
            "save_results",
            "_generate_markdown_report",
            "run_full_scan"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "line": 505,
          "args": []
        },
        {
          "name": "__init__",
          "line": 21,
          "args": [
            "self",
            "base_path"
          ]
        },
        {
          "name": "_get_timestamp",
          "line": 41,
          "args": [
            "self"
          ]
        },
        {
          "name": "discover_directories",
          "line": 48,
          "args": [
            "self"
          ]
        },
        {
          "name": "scan_agent_files",
          "line": 69,
          "args": [
            "self"
          ]
        },
        {
          "name": "_categorize_agent_file",
          "line": 88,
          "args": [
            "self",
            "agent_file"
          ]
        },
        {
          "name": "_scan_specific_directories",
          "line": 107,
          "args": [
            "self"
          ]
        },
        {
          "name": "analyze_agent_files",
          "line": 128,
          "args": [
            "self"
          ]
        },
        {
          "name": "_analyze_single_agent",
          "line": 143,
          "args": [
            "self",
            "agent_path"
          ]
        },
        {
          "name": "_extract_ports",
          "line": 193,
          "args": [
            "self",
            "content"
          ]
        },
        {
          "name": "_extract_configurations",
          "line": 213,
          "args": [
            "self",
            "content"
          ]
        },
        {
          "name": "_extract_health_checks",
          "line": 233,
          "args": [
            "self",
            "content"
          ]
        },
        {
          "name": "assess_system_health",
          "line": 249,
          "args": [
            "self"
          ]
        },
        {
          "name": "generate_recommendations",
          "line": 285,
          "args": [
            "self"
          ]
        },
        {
          "name": "generate_summary",
          "line": 350,
          "args": [
            "self"
          ]
        },
        {
          "name": "save_results",
          "line": 376,
          "args": [
            "self"
          ]
        },
        {
          "name": "_generate_markdown_report",
          "line": 391,
          "args": [
            "self"
          ]
        },
        {
          "name": "run_full_scan",
          "line": 480,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "os",
        "json",
        "ast",
        "re",
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timezone",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "subprocess"
      ],
      "ports": [],
      "configurations": [
        ".env",
        ".json",
        ".json",
        ".yaml",
        ".yml"
      ],
      "health_checks": [
        "class.*Health.*:",
        "def _extract_health_checks(self, content: str) -> List[str]:",
        "def\\s+(health|status|ping|alive|ready).*:",
        "def.*health.*:",
        "def assess_system_health(self) -> None:",
        "def\\s+(health|status|ping|alive|ready).*:",
        "def.*status.*:"
      ],
      "errors": []
    },
    "minimal_agent.py": {
      "classes": [
        {
          "name": "MinimalAgent",
          "line": 33,
          "methods": [
            "__init__",
            "_health_check_loop",
            "run",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 34,
          "args": [
            "self",
            "name",
            "port"
          ]
        },
        {
          "name": "_health_check_loop",
          "line": 62,
          "args": [
            "self"
          ]
        },
        {
          "name": "run",
          "line": 87,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 123,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "zmq",
        "json",
        "logging",
        "pathlib.Path",
        "threading"
      ],
      "ports": [
        7777
      ],
      "configurations": [],
      "health_checks": [
        "def _health_check_loop(self):"
      ],
      "errors": []
    },
    "validate_all_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "test_agent_import",
          "line": 16,
          "args": [
            "agent_path",
            "agent_name"
          ]
        },
        {
          "name": "get_mainpc_sot_agents",
          "line": 29,
          "args": []
        },
        {
          "name": "get_pc2_sot_agents",
          "line": 50,
          "args": []
        },
        {
          "name": "main",
          "line": 71,
          "args": []
        }
      ],
      "imports": [
        "sys",
        "os",
        "pathlib.Path",
        "importlib.util",
        "traceback",
        "re",
        "re"
      ],
      "ports": [],
      "configurations": [
        ".yaml",
        ".yaml",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "check_running_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "check_zmq_health",
          "line": 45,
          "args": [
            "agent_name",
            "port",
            "request"
          ]
        },
        {
          "name": "check_all_agents",
          "line": 80,
          "args": []
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "zmq",
        "json",
        "time",
        "logging",
        "argparse",
        "typing.Dict",
        "typing.Any"
      ],
      "ports": [],
      "configurations": [
        "config = AGENTS[args.agent]",
        "config = AGENTS[args.agent]"
      ],
      "health_checks": [
        "def check_zmq_health(agent_name: str, port: int, request: Dict[str, Any]) -> bool:"
      ],
      "errors": []
    },
    "audit_all_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "get_agent_paths",
          "line": 8,
          "args": []
        },
        {
          "name": "audit_agents",
          "line": 33,
          "args": [
            "agent_paths"
          ]
        }
      ],
      "imports": [
        "os",
        "subprocess",
        "yaml",
        "sys",
        "pathlib.Path"
      ],
      "ports": [],
      "configurations": [
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "check_all_agents_health.py": {
      "classes": [],
      "functions": [
        {
          "name": "check_agent_health",
          "line": 47,
          "args": [
            "agent",
            "timeout"
          ]
        },
        {
          "name": "check_all_agents",
          "line": 97,
          "args": [
            "agents",
            "timeout"
          ]
        },
        {
          "name": "print_summary",
          "line": 117,
          "args": [
            "layer0_results",
            "layer1_results"
          ]
        },
        {
          "name": "main",
          "line": 160,
          "args": []
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "sys",
        "json",
        "time",
        "logging",
        "argparse",
        "zmq",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Any",
        "typing.Optional"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "def check_agent_health(agent: Dict[str, Any], timeout: int = 5) -> Tuple[bool, Dict[str, Any]]:"
      ],
      "errors": []
    },
    "check_active_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "check_syntax",
          "line": 29,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "main",
          "line": 41,
          "args": []
        }
      ],
      "imports": [
        "os",
        "sys",
        "py_compile",
        "logging",
        "pathlib.Path"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "common/utils/agent_ready_signal.py": {
      "classes": [
        {
          "name": "AgentReadySignal",
          "line": 16,
          "methods": [
            "__init__",
            "_connect_redis",
            "set_ready",
            "set_not_ready",
            "is_ready",
            "heartbeat",
            "get_all_ready_agents"
          ]
        }
      ],
      "functions": [
        {
          "name": "mark_agent_ready",
          "line": 125,
          "args": [
            "agent_name",
            "details"
          ]
        },
        {
          "name": "mark_agent_not_ready",
          "line": 130,
          "args": [
            "agent_name",
            "reason"
          ]
        },
        {
          "name": "__init__",
          "line": 19,
          "args": [
            "self",
            "agent_name",
            "redis_host"
          ]
        },
        {
          "name": "_connect_redis",
          "line": 25,
          "args": [
            "self"
          ]
        },
        {
          "name": "set_ready",
          "line": 44,
          "args": [
            "self",
            "details"
          ]
        },
        {
          "name": "set_not_ready",
          "line": 66,
          "args": [
            "self",
            "reason"
          ]
        },
        {
          "name": "is_ready",
          "line": 85,
          "args": [
            "self"
          ]
        },
        {
          "name": "heartbeat",
          "line": 97,
          "args": [
            "self"
          ]
        },
        {
          "name": "get_all_ready_agents",
          "line": 112,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "os",
        "redis",
        "logging",
        "typing.Optional"
      ],
      "ports": [
        6379
      ],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "common/core/base_agent.py": {
      "classes": [
        {
          "name": "BaseAgent",
          "line": 50,
          "methods": [
            "__init__",
            "_setup_logging",
            "_setup_prometheus_metrics",
            "_setup_graceful_shutdown",
            "_atexit_cleanup",
            "_find_available_port",
            "_init_sockets",
            "_start_health_check",
            "_start_initialization",
            "_perform_initialization",
            "_health_check_loop",
            "_get_health_status",
            "_start_unified_error_handler_initialization",
            "handle_request",
            "run",
            "cleanup",
            "_safe_int",
            "_get_default_capabilities",
            "_register_with_digital_twin",
            "get_agent_endpoint",
            "send_request_to_agent",
            "send_event",
            "report_error",
            "_ensure_shutdown_event",
            "_create_managed_error_task",
            "_report_error_sync",
            "_start_http_health_server"
          ]
        },
        {
          "name": "HealthHandler",
          "line": 1187,
          "methods": [
            "do_GET",
            "log_message"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 53,
          "args": [
            "self"
          ]
        },
        {
          "name": "_setup_logging",
          "line": 148,
          "args": [
            "self"
          ]
        },
        {
          "name": "_setup_prometheus_metrics",
          "line": 179,
          "args": [
            "self",
            "kwargs"
          ]
        },
        {
          "name": "_setup_graceful_shutdown",
          "line": 229,
          "args": [
            "self"
          ]
        },
        {
          "name": "_atexit_cleanup",
          "line": 233,
          "args": [
            "self"
          ]
        },
        {
          "name": "_find_available_port",
          "line": 239,
          "args": [
            "self",
            "start_port",
            "max_attempts"
          ]
        },
        {
          "name": "_init_sockets",
          "line": 267,
          "args": [
            "self"
          ]
        },
        {
          "name": "_start_health_check",
          "line": 338,
          "args": [
            "self"
          ]
        },
        {
          "name": "_start_initialization",
          "line": 344,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 350,
          "args": [
            "self"
          ]
        },
        {
          "name": "_health_check_loop",
          "line": 380,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 436,
          "args": [
            "self"
          ]
        },
        {
          "name": "_start_unified_error_handler_initialization",
          "line": 477,
          "args": [
            "self",
            "enable_legacy",
            "enable_nats",
            "nats_servers"
          ]
        },
        {
          "name": "handle_request",
          "line": 563,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 572,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 642,
          "args": [
            "self"
          ]
        },
        {
          "name": "_safe_int",
          "line": 745,
          "args": [
            "self",
            "value",
            "default"
          ]
        },
        {
          "name": "_get_default_capabilities",
          "line": 759,
          "args": [
            "self"
          ]
        },
        {
          "name": "_register_with_digital_twin",
          "line": 773,
          "args": [
            "self"
          ]
        },
        {
          "name": "get_agent_endpoint",
          "line": 822,
          "args": [
            "self",
            "agent_name"
          ]
        },
        {
          "name": "send_request_to_agent",
          "line": 856,
          "args": [
            "self",
            "agent_name",
            "request",
            "host",
            "port",
            "timeout",
            "retries",
            "retry_delay"
          ]
        },
        {
          "name": "send_event",
          "line": 956,
          "args": [
            "self",
            "event_type",
            "data",
            "propagate"
          ]
        },
        {
          "name": "report_error",
          "line": 984,
          "args": [
            "self",
            "error_type",
            "message",
            "severity",
            "context",
            "details",
            "category",
            "stack_trace",
            "related_task_id",
            "wait_for_completion"
          ]
        },
        {
          "name": "_ensure_shutdown_event",
          "line": 1066,
          "args": [
            "self"
          ]
        },
        {
          "name": "_create_managed_error_task",
          "line": 1072,
          "args": [
            "self"
          ]
        },
        {
          "name": "_report_error_sync",
          "line": 1108,
          "args": [
            "self"
          ]
        },
        {
          "name": "_start_http_health_server",
          "line": 1185,
          "args": [
            "self"
          ]
        },
        {
          "name": "init_unified_handler",
          "line": 479,
          "args": []
        },
        {
          "name": "do_GET",
          "line": 1188,
          "args": [
            "s"
          ]
        },
        {
          "name": "log_message",
          "line": 1284,
          "args": [
            "self",
            "format"
          ]
        }
      ],
      "imports": [
        "sys",
        "os",
        "zmq",
        "json",
        "time",
        "logging",
        "threading",
        "uuid",
        "socket",
        "typing.Dict",
        "typing.Any",
        "typing.cast",
        "typing.Optional",
        "typing.Union",
        "typing.List",
        "typing.Tuple",
        "typing.TypeVar",
        "typing.cast",
        "datetime.datetime",
        "abc.ABC",
        "abc.abstractmethod",
        "os",
        "http.server.BaseHTTPRequestHandler",
        "http.server.HTTPServer",
        "threading",
        "common.utils.path_manager.PathManager",
        "main_pc_code.utils.config_loader.parse_agent_args",
        "common.utils.data_models.SystemEvent",
        "common.utils.data_models.ErrorReport",
        "common.utils.data_models.ErrorSeverity",
        "common.utils.data_models.AgentRegistration",
        "common.utils.logger_util.get_json_logger",
        "common.env_helpers.get_env",
        "common.health.standardized_health.StandardizedHealthChecker",
        "common.health.standardized_health.HealthStatus",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.error_bus.unified_error_handler.UnifiedErrorHandler",
        "common.error_bus.unified_error_handler.create_unified_error_handler",
        "common.utils.prometheus_exporter.create_agent_exporter",
        "common.utils.prometheus_exporter.PrometheusExporter",
        "pathlib.Path",
        "common.utils.logger_util.get_rotating_json_logger",
        "socket",
        "common.utils.data_models.ErrorSeverity",
        "asyncio",
        "asyncio",
        "asyncio",
        "asyncio",
        "asyncio",
        "asyncio"
      ],
      "ports": [
        7120
      ],
      "configurations": [
        "config = getattr(self, 'config', {}) or {}",
        "config = getattr(self, 'config', {}) or {}",
        "config = getattr(self, 'config', {}) or {}",
        "config = getattr(self, 'config', {}) or {}",
        ".env",
        ".JSON",
        ".JSON"
      ],
      "health_checks": [
        "class HealthHandler(BaseHTTPRequestHandler):",
        "def _start_health_check(self):",
        "def _health_check_loop(self):",
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def _start_http_health_server(self):",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "common/core/enhanced_base_agent.py": {
      "classes": [
        {
          "name": "PerformanceMetrics",
          "line": 43,
          "methods": [
            "add_response_time",
            "get_avg_response_time",
            "update_system_metrics"
          ]
        },
        {
          "name": "EnhancedErrorHandler",
          "line": 77,
          "methods": [
            "__init__",
            "report_error",
            "get_statistics"
          ]
        },
        {
          "name": "ServiceDiscoveryClient",
          "line": 134,
          "methods": [
            "__init__",
            "register_service",
            "is_registered",
            "discover_services"
          ]
        },
        {
          "name": "EnhancedBaseAgent",
          "line": 167,
          "methods": [
            "__init__",
            "_setup_enhanced_features",
            "_setup_zmq_sockets_optimized",
            "_register_service_capabilities",
            "_start_performance_monitoring",
            "report_error_enhanced",
            "process_request_with_timing",
            "get_health_status_enhanced",
            "get_performance_report",
            "graceful_shutdown_enhanced"
          ]
        },
        {
          "name": "EnhancedAgent",
          "line": 438,
          "methods": [
            "__init__"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_enhanced_agent",
          "line": 426,
          "args": [
            "agent_class"
          ]
        },
        {
          "name": "add_response_time",
          "line": 56,
          "args": [
            "self",
            "response_time"
          ]
        },
        {
          "name": "get_avg_response_time",
          "line": 63,
          "args": [
            "self"
          ]
        },
        {
          "name": "update_system_metrics",
          "line": 67,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 80,
          "args": [
            "self",
            "agent_name"
          ]
        },
        {
          "name": "report_error",
          "line": 92,
          "args": [
            "self",
            "error",
            "context",
            "category",
            "severity"
          ]
        },
        {
          "name": "get_statistics",
          "line": 122,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 137,
          "args": [
            "self",
            "agent_name"
          ]
        },
        {
          "name": "register_service",
          "line": 145,
          "args": [
            "self",
            "capabilities",
            "dependencies"
          ]
        },
        {
          "name": "is_registered",
          "line": 157,
          "args": [
            "self",
            "service_name"
          ]
        },
        {
          "name": "discover_services",
          "line": 161,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 173,
          "args": [
            "self"
          ]
        },
        {
          "name": "_setup_enhanced_features",
          "line": 214,
          "args": [
            "self"
          ]
        },
        {
          "name": "_setup_zmq_sockets_optimized",
          "line": 235,
          "args": [
            "self"
          ]
        },
        {
          "name": "_register_service_capabilities",
          "line": 242,
          "args": [
            "self"
          ]
        },
        {
          "name": "_start_performance_monitoring",
          "line": 265,
          "args": [
            "self"
          ]
        },
        {
          "name": "report_error_enhanced",
          "line": 283,
          "args": [
            "self",
            "error",
            "context",
            "category",
            "severity"
          ]
        },
        {
          "name": "process_request_with_timing",
          "line": 290,
          "args": [
            "self",
            "request_func"
          ]
        },
        {
          "name": "get_health_status_enhanced",
          "line": 321,
          "args": [
            "self"
          ]
        },
        {
          "name": "get_performance_report",
          "line": 369,
          "args": [
            "self"
          ]
        },
        {
          "name": "graceful_shutdown_enhanced",
          "line": 394,
          "args": [
            "self"
          ]
        },
        {
          "name": "monitor_performance",
          "line": 267,
          "args": []
        },
        {
          "name": "__init__",
          "line": 439,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "sys",
        "os",
        "zmq",
        "json",
        "time",
        "logging",
        "threading",
        "uuid",
        "socket",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "typing.List",
        "typing.Tuple",
        "datetime.datetime",
        "dataclasses.dataclass",
        "dataclasses.field",
        "psutil",
        "common.utils.path_manager.PathManager",
        "common.core.unified_config_manager.UnifiedConfigManager",
        "common.core.unified_config_manager.BaseAgentConfigMixin",
        "common.core.base_agent.BaseAgent",
        "common.utils.data_models.SystemEvent",
        "common.utils.data_models.ErrorReport",
        "common.utils.data_models.ErrorSeverity",
        "common.utils.data_models.AgentRegistration",
        "common.utils.logger_util.get_json_logger",
        "common.env_helpers.get_env",
        "common.health.standardized_health.StandardizedHealthChecker",
        "common.health.standardized_health.HealthStatus",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.error_bus.unified_error_handler.UnifiedErrorHandler",
        "common.error_bus.unified_error_handler.create_unified_error_handler",
        "common.utils.prometheus_exporter.create_agent_exporter",
        "common.utils.prometheus_exporter.PrometheusExporter"
      ],
      "ports": [],
      "configurations": [
        "config = self._load_unified_config(config_path)",
        "config = self._load_unified_config(config_path)",
        ".env"
      ],
      "health_checks": [
        "def get_health_status_enhanced(self) -> Dict[str, Any]:",
        "def get_health_status_enhanced(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "scripts/phase2_task2d_pilot_agent_migration.py": {
      "classes": [
        {
          "name": "PilotAgentMigrator",
          "line": 29,
          "methods": [
            "__init__",
            "run_command",
            "check_infrastructure_prerequisites",
            "create_agent_backups",
            "create_dual_hub_config_template",
            "update_observability_hub_config",
            "update_resource_manager_config",
            "update_unified_utils_agent_config",
            "create_dual_hub_integration_code",
            "deploy_pilot_agents",
            "validate_pilot_agent_integration",
            "test_failover_scenarios",
            "generate_migration_report",
            "save_migration_report",
            "execute_complete_migration"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "line": 630,
          "args": []
        },
        {
          "name": "__init__",
          "line": 32,
          "args": [
            "self"
          ]
        },
        {
          "name": "run_command",
          "line": 84,
          "args": [
            "self",
            "command",
            "check_return"
          ]
        },
        {
          "name": "check_infrastructure_prerequisites",
          "line": 108,
          "args": [
            "self"
          ]
        },
        {
          "name": "create_agent_backups",
          "line": 136,
          "args": [
            "self"
          ]
        },
        {
          "name": "create_dual_hub_config_template",
          "line": 168,
          "args": [
            "self"
          ]
        },
        {
          "name": "update_observability_hub_config",
          "line": 209,
          "args": [
            "self"
          ]
        },
        {
          "name": "update_resource_manager_config",
          "line": 248,
          "args": [
            "self"
          ]
        },
        {
          "name": "update_unified_utils_agent_config",
          "line": 291,
          "args": [
            "self"
          ]
        },
        {
          "name": "create_dual_hub_integration_code",
          "line": 329,
          "args": [
            "self"
          ]
        },
        {
          "name": "deploy_pilot_agents",
          "line": 414,
          "args": [
            "self"
          ]
        },
        {
          "name": "validate_pilot_agent_integration",
          "line": 440,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_failover_scenarios",
          "line": 473,
          "args": [
            "self"
          ]
        },
        {
          "name": "generate_migration_report",
          "line": 500,
          "args": [
            "self"
          ]
        },
        {
          "name": "save_migration_report",
          "line": 563,
          "args": [
            "self",
            "report"
          ]
        },
        {
          "name": "execute_complete_migration",
          "line": 573,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "time",
        "subprocess",
        "logging",
        "shutil",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "yaml",
        "yaml",
        "yaml"
      ],
      "ports": [
        9091,
        9092,
        9000,
        9100,
        8222,
        4222,
        4223
      ],
      "configurations": [
        "config = backup_dir / f\"{agent_name.lower()}_config_original.yaml\"",
        "config = self.create_dual_hub_config_template()",
        "config = {",
        "config = self.create_dual_hub_config_template()",
        "config = {",
        "config = self.create_dual_hub_config_template()",
        "config = {",
        "config = config",
        "config = backup_dir / f\"{agent_name.lower()}_config_original.yaml\"",
        "config = self.create_dual_hub_config_template()"
      ],
      "health_checks": [],
      "errors": []
    },
    "scripts/test_memory_agent_health.py": {
      "classes": [],
      "functions": [
        {
          "name": "test_memory_agent_health",
          "line": 38,
          "args": [
            "host",
            "port",
            "timeout"
          ]
        },
        {
          "name": "main",
          "line": 88,
          "args": []
        }
      ],
      "imports": [
        "os",
        "sys",
        "zmq",
        "json",
        "time",
        "logging",
        "pathlib.Path",
        "common.env_helpers.get_env",
        "common_utils.env_loader.get_ip",
        "common_utils.env_loader.addr",
        "argparse"
      ],
      "ports": [
        5597
      ],
      "configurations": [
        ".env",
        ".env"
      ],
      "health_checks": [
        "def test_memory_agent_health(host: str = get_env(\"BIND_ADDRESS\", \"0.0.0.0\"), port: int = 5597, timeout: int = 5000) -> bool:"
      ],
      "errors": []
    },
    "scripts/baseagent_performance_analyzer.py": {
      "classes": [],
      "functions": [
        {
          "name": "analyze_baseagent_init_patterns",
          "line": 17,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "test_agent_startup_time",
          "line": 107,
          "args": [
            "agent_path",
            "iterations"
          ]
        },
        {
          "name": "main",
          "line": 193,
          "args": []
        }
      ],
      "imports": [
        "os",
        "re",
        "time",
        "json",
        "subprocess",
        "sys",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "scripts/baseagent_migration_template.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 167)"
      ]
    },
    "scripts/add_error_bus_to_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "load_startup_config",
          "line": 43,
          "args": [
            "config_path"
          ]
        },
        {
          "name": "get_active_agents",
          "line": 52,
          "args": []
        },
        {
          "name": "check_and_update_agent",
          "line": 97,
          "args": [
            "agent"
          ]
        },
        {
          "name": "main",
          "line": 189,
          "args": []
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "os",
        "re",
        "yaml",
        "pathlib.Path"
      ],
      "ports": [
        7150
      ],
      "configurations": [
        "config = load_startup_config(main_config_path)",
        "config = load_startup_config(pc2_config_path)",
        "config = load_startup_config(main_config_path)",
        "config = load_startup_config(pc2_config_path)",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "scripts/fix_agent_compliance.py": {
      "classes": [],
      "functions": [
        {
          "name": "load_config",
          "line": 118,
          "args": [
            "config_path"
          ]
        },
        {
          "name": "get_all_agents",
          "line": 131,
          "args": []
        },
        {
          "name": "get_agents_by_phase",
          "line": 149,
          "args": [
            "phase",
            "system"
          ]
        },
        {
          "name": "fix_syntax_errors",
          "line": 198,
          "args": [
            "content"
          ]
        },
        {
          "name": "add_base_agent_inheritance",
          "line": 233,
          "args": [
            "content",
            "class_name"
          ]
        },
        {
          "name": "add_imports_for_base_agent",
          "line": 260,
          "args": [
            "content"
          ]
        },
        {
          "name": "add_health_check_method",
          "line": 280,
          "args": [
            "content"
          ]
        },
        {
          "name": "add_cleanup_method",
          "line": 309,
          "args": [
            "content"
          ]
        },
        {
          "name": "fix_config_loading",
          "line": 338,
          "args": [
            "content",
            "agent_path"
          ]
        },
        {
          "name": "add_main_block",
          "line": 368,
          "args": [
            "content",
            "class_name"
          ]
        },
        {
          "name": "extract_class_name",
          "line": 376,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "fix_agent",
          "line": 398,
          "args": [
            "agent_path"
          ]
        },
        {
          "name": "fix_agents_by_group",
          "line": 483,
          "args": [
            "group_name",
            "system"
          ]
        },
        {
          "name": "fix_agents_by_system",
          "line": 517,
          "args": [
            "system"
          ]
        },
        {
          "name": "fix_agents_by_phase",
          "line": 545,
          "args": [
            "phase",
            "system"
          ]
        },
        {
          "name": "fix_agents_from_batch_file",
          "line": 557,
          "args": [
            "batch_file"
          ]
        },
        {
          "name": "print_results",
          "line": 575,
          "args": [
            "results"
          ]
        },
        {
          "name": "main",
          "line": 583,
          "args": []
        }
      ],
      "imports": [
        "os",
        "sys",
        "re",
        "ast",
        "argparse",
        "logging",
        "yaml",
        "time",
        "traceback",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "typing.Set"
      ],
      "ports": [],
      "configurations": [
        "config = load_config()",
        "config = Config().get_config()",
        "config = load_config(MAIN_CONFIG_PATH)",
        "config = load_config(PC2_CONFIG_PATH)",
        "config = load_config()",
        "config = Config().get_config()",
        "config = load_config(MAIN_CONFIG_PATH)",
        "config = load_config(PC2_CONFIG_PATH)",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [
        "def _get_health_status(self) -> dict:",
        "def add_health_check_method(content: str) -> Tuple[str, bool]:",
        "def _get_health_status(self) -> dict:"
      ],
      "errors": []
    },
    "scripts/restore_all_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "create_backup",
          "line": 43,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "extract_methods",
          "line": 63,
          "args": [
            "source_code"
          ]
        },
        {
          "name": "extract_class_name",
          "line": 79,
          "args": [
            "source_code"
          ]
        },
        {
          "name": "replace_config_parser_with_loader",
          "line": 98,
          "args": [
            "content"
          ]
        },
        {
          "name": "extract_init_content",
          "line": 129,
          "args": [
            "init_method"
          ]
        },
        {
          "name": "restore_agent_functionality",
          "line": 160,
          "args": [
            "agent_path"
          ]
        },
        {
          "name": "load_agents_from_config",
          "line": 344,
          "args": []
        },
        {
          "name": "main",
          "line": 368,
          "args": []
        }
      ],
      "imports": [
        "os",
        "re",
        "sys",
        "shutil",
        "ast",
        "yaml",
        "pathlib.Path",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "typing.Optional"
      ],
      "ports": [],
      "configurations": [
        "config = load_config()',",
        "config = yaml.safe_load(f)",
        "config = load_config()',",
        "config = yaml.safe_load(f)",
        ".yaml",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "scripts/analyze_model_manager_agent_architecture.py": {
      "classes": [
        {
          "name": "SocketPattern",
          "line": 21,
          "methods": []
        },
        {
          "name": "ThreadPattern",
          "line": 28,
          "methods": []
        },
        {
          "name": "DependencyPattern",
          "line": 35,
          "methods": []
        },
        {
          "name": "ModelManagerAgentAnalyzer",
          "line": 41,
          "methods": [
            "__init__",
            "analyze_file_structure",
            "analyze_socket_management",
            "analyze_threading_patterns",
            "analyze_baseagent_integration",
            "analyze_critical_functions",
            "assess_migration_risk",
            "generate_migration_strategy",
            "save_analysis_report",
            "run_complete_analysis"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "line": 392,
          "args": []
        },
        {
          "name": "__init__",
          "line": 44,
          "args": [
            "self"
          ]
        },
        {
          "name": "analyze_file_structure",
          "line": 58,
          "args": [
            "self"
          ]
        },
        {
          "name": "analyze_socket_management",
          "line": 85,
          "args": [
            "self",
            "content"
          ]
        },
        {
          "name": "analyze_threading_patterns",
          "line": 138,
          "args": [
            "self",
            "content"
          ]
        },
        {
          "name": "analyze_baseagent_integration",
          "line": 181,
          "args": [
            "self",
            "content"
          ]
        },
        {
          "name": "analyze_critical_functions",
          "line": 204,
          "args": [
            "self",
            "content"
          ]
        },
        {
          "name": "assess_migration_risk",
          "line": 247,
          "args": [
            "self"
          ]
        },
        {
          "name": "generate_migration_strategy",
          "line": 282,
          "args": [
            "self"
          ]
        },
        {
          "name": "save_analysis_report",
          "line": 358,
          "args": [
            "self"
          ]
        },
        {
          "name": "run_complete_analysis",
          "line": 368,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "sys",
        "os",
        "re",
        "ast",
        "json",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "dataclasses.dataclass"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "scripts/refactor_duplicate_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "main",
          "line": 12,
          "args": []
        }
      ],
      "imports": [
        "pathlib.Path",
        "collections.defaultdict"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "scripts/discover_active_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "should_exclude_file",
          "line": 61,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "find_python_files",
          "line": 68,
          "args": [
            "directories"
          ]
        },
        {
          "name": "is_real_agent",
          "line": 84,
          "args": [
            "class_name",
            "file_content"
          ]
        },
        {
          "name": "extract_agent_info_from_file",
          "line": 108,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "find_running_agents",
          "line": 169,
          "args": []
        },
        {
          "name": "analyze_import_relationships",
          "line": 213,
          "args": [
            "python_files"
          ]
        },
        {
          "name": "find_config_references",
          "line": 234,
          "args": [
            "python_files"
          ]
        },
        {
          "name": "find_startup_config_files",
          "line": 255,
          "args": []
        },
        {
          "name": "extract_agents_from_config",
          "line": 265,
          "args": [
            "config_file"
          ]
        },
        {
          "name": "normalize_agent_name",
          "line": 314,
          "args": [
            "name"
          ]
        },
        {
          "name": "deduplicate_agents",
          "line": 321,
          "args": [
            "agents"
          ]
        },
        {
          "name": "main",
          "line": 380,
          "args": []
        }
      ],
      "imports": [
        "os",
        "sys",
        "re",
        "json",
        "argparse",
        "subprocess",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "importlib.util",
        "yaml"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = yaml.safe_load(f)",
        ".json",
        ".yaml",
        ".yaml",
        ".yml",
        ".yml"
      ],
      "health_checks": [],
      "errors": []
    },
    "scripts/check_active_agents_syntax.py": {
      "classes": [],
      "functions": [],
      "imports": [
        "os",
        "sys",
        "yaml",
        "json",
        "py_compile",
        "pathlib.Path"
      ],
      "ports": [],
      "configurations": [
        "config = PROJECT_ROOT / 'main_pc_code' / 'config' / 'startup_config.yaml'",
        "config = PROJECT_ROOT / 'pc2_code' / 'config' / 'startup_config.yaml'",
        "config = yaml.safe_load(f)",
        "config = PROJECT_ROOT / 'main_pc_code' / 'config' / 'startup_config.yaml'",
        "config = PROJECT_ROOT / 'pc2_code' / 'config' / 'startup_config.yaml'",
        "config = yaml.safe_load(f)",
        ".json",
        ".json",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "scripts/identify_high_risk_legacy_agents.py": {
      "classes": [
        {
          "name": "AgentRiskAnalysis",
          "line": 21,
          "methods": []
        },
        {
          "name": "HighRiskAgentIdentifier",
          "line": 32,
          "methods": [
            "__init__",
            "should_exclude_path",
            "analyze_agent_file",
            "find_agent_files",
            "analyze_all_agents",
            "identify_top_risks",
            "generate_report"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "line": 242,
          "args": []
        },
        {
          "name": "__init__",
          "line": 35,
          "args": [
            "self"
          ]
        },
        {
          "name": "should_exclude_path",
          "line": 43,
          "args": [
            "self",
            "path"
          ]
        },
        {
          "name": "analyze_agent_file",
          "line": 47,
          "args": [
            "self",
            "file_path"
          ]
        },
        {
          "name": "find_agent_files",
          "line": 135,
          "args": [
            "self"
          ]
        },
        {
          "name": "analyze_all_agents",
          "line": 153,
          "args": [
            "self"
          ]
        },
        {
          "name": "identify_top_risks",
          "line": 166,
          "args": [
            "self",
            "analyses",
            "top_n"
          ]
        },
        {
          "name": "generate_report",
          "line": 177,
          "args": [
            "self",
            "analyses",
            "top_risks"
          ]
        }
      ],
      "imports": [
        "sys",
        "os",
        "re",
        "ast",
        "json",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "dataclasses.dataclass"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "scripts/template_compliant_agent.py": {
      "classes": [
        {
          "name": "TemplateAgent",
          "line": 36,
          "methods": [
            "__init__",
            "_get_health_status",
            "process_request",
            "run",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 39,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 63,
          "args": [
            "self"
          ]
        },
        {
          "name": "process_request",
          "line": 81,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 102,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 148,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "time",
        "logging",
        "threading",
        "zmq",
        "json",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "main_pc_code.src.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        "config = Config().get_config()",
        "config = Config().get_config()",
        ".JSON"
      ],
      "health_checks": [
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "scripts/check_memory_agent_registration.py": {
      "classes": [],
      "functions": [
        {
          "name": "main",
          "line": 30,
          "args": []
        }
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "zmq",
        "pathlib.Path",
        "main_pc_code.utils.service_discovery_client.discover_service"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "scripts/scan_agents_by_group.py": {
      "classes": [],
      "functions": [
        {
          "name": "load_config",
          "line": 77,
          "args": [
            "config_path"
          ]
        },
        {
          "name": "get_mainpc_groups",
          "line": 90,
          "args": []
        },
        {
          "name": "get_pc2_agents",
          "line": 99,
          "args": []
        },
        {
          "name": "filter_agents_by_phase",
          "line": 112,
          "args": [
            "system",
            "phase"
          ]
        },
        {
          "name": "check_syntax_errors",
          "line": 144,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "scan_mainpc_agents",
          "line": 154,
          "args": [
            "agents_by_group"
          ]
        },
        {
          "name": "scan_pc2_agents",
          "line": 226,
          "args": [
            "agents"
          ]
        },
        {
          "name": "generate_report",
          "line": 294,
          "args": [
            "results",
            "system",
            "phase",
            "output_path"
          ]
        },
        {
          "name": "main",
          "line": 526,
          "args": []
        }
      ],
      "imports": [
        "os",
        "sys",
        "yaml",
        "argparse",
        "logging",
        "datetime",
        "ast",
        "py_compile",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "enhanced_system_audit.check_compliance"
      ],
      "ports": [],
      "configurations": [
        "config = load_config(MAIN_CONFIG_PATH)",
        "config = load_config(PC2_CONFIG_PATH)",
        "config = load_config(MAIN_CONFIG_PATH)",
        "config = load_config(PC2_CONFIG_PATH)",
        ".yaml",
        ".yaml",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "scripts/expand_agent_table.py": {
      "classes": [],
      "functions": [
        {
          "name": "create_expanded_table_format",
          "line": 11,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "create_comprehensive_agent_table",
          "line": 31,
          "args": []
        },
        {
          "name": "main",
          "line": 147,
          "args": []
        }
      ],
      "imports": [
        "re",
        "sys",
        "pathlib.Path"
      ],
      "ports": [
        6660,
        8200,
        8202,
        9100,
        8211,
        8212,
        8220,
        8225,
        6572,
        6574,
        27002,
        6580,
        6581,
        6584,
        6713,
        6715,
        6606,
        6610,
        6612,
        6613,
        6615,
        6641,
        6642,
        6646,
        6650
      ],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "scripts/analyze_remaining_agents.py": {
      "classes": [
        {
          "name": "AgentDiscoveryResult",
          "line": 24,
          "methods": []
        },
        {
          "name": "EnhancedAgentAnalyzer",
          "line": 35,
          "methods": [
            "__init__",
            "analyze_remaining_agents",
            "_discover_all_agents",
            "_load_startup_config",
            "_extract_mainpc_agents",
            "_extract_pc2_agents",
            "_filter_remaining_agents",
            "_resolve_agent_paths",
            "_resolve_single_path",
            "_try_alternative_paths",
            "_validate_script_content",
            "_analyze_optimization_readiness",
            "_generate_analysis_report",
            "_save_detailed_report"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "line": 421,
          "args": []
        },
        {
          "name": "__init__",
          "line": 38,
          "args": [
            "self"
          ]
        },
        {
          "name": "analyze_remaining_agents",
          "line": 78,
          "args": [
            "self"
          ]
        },
        {
          "name": "_discover_all_agents",
          "line": 108,
          "args": [
            "self"
          ]
        },
        {
          "name": "_load_startup_config",
          "line": 124,
          "args": [
            "self",
            "environment"
          ]
        },
        {
          "name": "_extract_mainpc_agents",
          "line": 143,
          "args": [
            "self",
            "config"
          ]
        },
        {
          "name": "_extract_pc2_agents",
          "line": 162,
          "args": [
            "self",
            "config"
          ]
        },
        {
          "name": "_filter_remaining_agents",
          "line": 179,
          "args": [
            "self",
            "all_agents"
          ]
        },
        {
          "name": "_resolve_agent_paths",
          "line": 202,
          "args": [
            "self",
            "agents"
          ]
        },
        {
          "name": "_resolve_single_path",
          "line": 246,
          "args": [
            "self",
            "script_path"
          ]
        },
        {
          "name": "_try_alternative_paths",
          "line": 263,
          "args": [
            "self",
            "agent_name"
          ]
        },
        {
          "name": "_validate_script_content",
          "line": 290,
          "args": [
            "self",
            "script_path"
          ]
        },
        {
          "name": "_analyze_optimization_readiness",
          "line": 324,
          "args": [
            "self",
            "agents"
          ]
        },
        {
          "name": "_generate_analysis_report",
          "line": 340,
          "args": [
            "self",
            "ready_agents"
          ]
        },
        {
          "name": "_save_detailed_report",
          "line": 364,
          "args": [
            "self",
            "ready",
            "path_issues",
            "manual"
          ]
        }
      ],
      "imports": [
        "sys",
        "os",
        "time",
        "yaml",
        "json",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "dataclasses.dataclass",
        "subprocess",
        "common.utils.path_manager.PathManager",
        "argparse"
      ],
      "ports": [],
      "configurations": [
        "config = self._load_startup_config(\"mainpc\")",
        "config = self._load_startup_config(\"pc2\")",
        "config = self._load_startup_config(\"mainpc\")",
        "config = self._load_startup_config(\"pc2\")",
        ".env",
        ".env",
        ".json",
        ".json",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "scripts/baseagent_adoption_analysis.py": {
      "classes": [],
      "functions": [
        {
          "name": "check_baseagent_usage",
          "line": 12,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "main",
          "line": 54,
          "args": []
        }
      ],
      "imports": [
        "os",
        "re",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "scripts/enforce_base_agent.py": {
      "classes": [
        {
          "name": "BaseAgentEnforcer",
          "line": 82,
          "methods": [
            "__init__",
            "visit_Import",
            "visit_ImportFrom",
            "visit_ClassDef"
          ]
        }
      ],
      "functions": [
        {
          "name": "find_main_agent_class",
          "line": 125,
          "args": [
            "tree"
          ]
        },
        {
          "name": "enforce_base_agent",
          "line": 147,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "main",
          "line": 218,
          "args": []
        },
        {
          "name": "__init__",
          "line": 85,
          "args": [
            "self"
          ]
        },
        {
          "name": "visit_Import",
          "line": 92,
          "args": [
            "self",
            "node"
          ]
        },
        {
          "name": "visit_ImportFrom",
          "line": 98,
          "args": [
            "self",
            "node"
          ]
        },
        {
          "name": "visit_ClassDef",
          "line": 110,
          "args": [
            "self",
            "node"
          ]
        }
      ],
      "imports": [
        "ast",
        "os",
        "sys",
        "logging",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "typing.Set"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "scripts/verify_agent_health_checks.py": {
      "classes": [],
      "functions": [
        {
          "name": "is_agent_file",
          "line": 62,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "has_health_check",
          "line": 88,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "extract_class_names",
          "line": 106,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "scan_directory",
          "line": 120,
          "args": [
            "directory"
          ]
        },
        {
          "name": "main",
          "line": 141,
          "args": []
        }
      ],
      "imports": [
        "os",
        "re",
        "sys",
        "ast",
        "pathlib.Path",
        "typing.List",
        "typing.Dict",
        "typing.Set",
        "typing.Tuple",
        "typing.Optional"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "health",
        "Classes':<30} {'Health Check':",
        "Classes':<30} {'Health Check':",
        "def has_health_check(file_path: str) -> Tuple[bool, str]:",
        "def _start_health_check(self):",
        "def health_check_loop():"
      ],
      "errors": []
    },
    "scripts/generate_agent_inventory.py": {
      "classes": [],
      "functions": [
        {
          "name": "extract_ports",
          "line": 18,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "extract_agent_classes",
          "line": 30,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "build_inventory",
          "line": 44,
          "args": []
        },
        {
          "name": "main",
          "line": 68,
          "args": []
        }
      ],
      "imports": [
        "csv",
        "os",
        "re",
        "ast",
        "pathlib.Path"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "scripts/enhanced_baseagent_validator.py": {
      "classes": [
        {
          "name": "BaseAgentPerformanceTest",
          "line": 29,
          "methods": [
            "setUp",
            "tearDown",
            "test_initialization_performance",
            "test_configuration_performance",
            "test_error_handling_performance",
            "test_metrics_collection_performance"
          ]
        },
        {
          "name": "BaseAgentFunctionalityTest",
          "line": 131,
          "methods": [
            "test_unified_config_compatibility",
            "test_service_discovery_integration",
            "test_enhanced_health_status"
          ]
        },
        {
          "name": "BaseAgentStressTest",
          "line": 206,
          "methods": [
            "test_concurrent_agent_creation",
            "test_memory_usage_under_load"
          ]
        },
        {
          "name": "CustomTestRunner",
          "line": 294,
          "methods": [
            "run"
          ]
        }
      ],
      "functions": [
        {
          "name": "run_performance_validation",
          "line": 278,
          "args": []
        },
        {
          "name": "setUp",
          "line": 32,
          "args": [
            "self"
          ]
        },
        {
          "name": "tearDown",
          "line": 36,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_initialization_performance",
          "line": 40,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_configuration_performance",
          "line": 61,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_error_handling_performance",
          "line": 86,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_metrics_collection_performance",
          "line": 110,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_unified_config_compatibility",
          "line": 134,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_service_discovery_integration",
          "line": 155,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_enhanced_health_status",
          "line": 175,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_concurrent_agent_creation",
          "line": 209,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_memory_usage_under_load",
          "line": 247,
          "args": [
            "self"
          ]
        },
        {
          "name": "create_test_agent",
          "line": 213,
          "args": [
            "agent_id"
          ]
        },
        {
          "name": "run",
          "line": 295,
          "args": [
            "self",
            "suite"
          ]
        }
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "subprocess",
        "threading",
        "tempfile",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "datetime.datetime",
        "unittest",
        "unittest.mock.Mock",
        "unittest.mock.patch",
        "common.core.enhanced_base_agent.EnhancedBaseAgent",
        "common.core.enhanced_base_agent.PerformanceMetrics",
        "common.core.enhanced_base_agent.EnhancedErrorHandler",
        "common.core.unified_config_manager.UnifiedConfigManager",
        "common.core.unified_config_manager.Config",
        "common.core.unified_config_manager.load_unified_config"
      ],
      "ports": [
        15200,
        15000,
        15001,
        15002,
        15100
      ],
      "configurations": [
        "config = load_unified_config(agent_name=\"TestMainPC\")",
        "config = pc2_config_loader.get_config(\"TestPC2\")",
        "config = manager.get_agent_config(\"TestDirect\")",
        "config = load_unified_config(agent_name=\"TestMainPC\")",
        "config = pc2_config_loader.get_config(\"TestPC2\")",
        "config = manager.get_agent_config(\"TestDirect\")",
        ".json"
      ],
      "health_checks": [
        "def test_enhanced_health_status(self):",
        "def test_enhanced_health_status(self):"
      ],
      "errors": []
    },
    "scripts/test_unified_memory_agent.py": {
      "classes": [],
      "functions": [
        {
          "name": "format_status",
          "line": 51,
          "args": [
            "status"
          ]
        },
        {
          "name": "start_system_digital_twin",
          "line": 61,
          "args": [
            "secure"
          ]
        },
        {
          "name": "start_unified_memory_agent",
          "line": 92,
          "args": [
            "secure"
          ]
        },
        {
          "name": "check_system_health",
          "line": 127,
          "args": [
            "host",
            "port",
            "secure"
          ]
        },
        {
          "name": "check_service_registry",
          "line": 240,
          "args": []
        },
        {
          "name": "main",
          "line": 288,
          "args": []
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "os",
        "sys",
        "subprocess",
        "time",
        "logging",
        "signal",
        "argparse",
        "pathlib.Path",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "json",
        "zmq",
        "main_pc_code.utils.service_discovery_client.discover_service",
        "common.env_helpers.get_env",
        "main_pc_code.src.network.secure_zmq.secure_client_socket"
      ],
      "ports": [
        7120
      ],
      "configurations": [
        ".env",
        ".env",
        ".env",
        ".env"
      ],
      "health_checks": [
        "def check_system_health(host: str = get_env(\"BIND_ADDRESS\", \"0.0.0.0\"), port: int = 7120, secure: bool = False) -> Dict[str, Any]:",
        "def format_status(status: str) -> str:"
      ],
      "errors": []
    },
    "scripts/verify_agent_cleanup.py": {
      "classes": [],
      "functions": [
        {
          "name": "find_agent_files",
          "line": 47,
          "args": [
            "directory",
            "pattern"
          ]
        },
        {
          "name": "import_agent_class",
          "line": 68,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "test_agent_cleanup",
          "line": 104,
          "args": [
            "agent_class"
          ]
        },
        {
          "name": "verify_agents",
          "line": 192,
          "args": [
            "directory",
            "pattern"
          ]
        },
        {
          "name": "print_verification_results",
          "line": 243,
          "args": [
            "results"
          ]
        },
        {
          "name": "main",
          "line": 272,
          "args": []
        }
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "argparse",
        "logging",
        "subprocess",
        "psutil",
        "signal",
        "importlib.util",
        "inspect",
        "pathlib.Path",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "typing.Tuple",
        "main_pc_code.utils.zmq_cleanup_utils.cleanup_agent_zmq_resources",
        "json"
      ],
      "ports": [
        9999
      ],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "scripts/generate_agents_report.py": {
      "classes": [],
      "functions": [
        {
          "name": "generate_markdown_report",
          "line": 20,
          "args": [
            "agent_data",
            "output_file"
          ]
        },
        {
          "name": "main",
          "line": 166,
          "args": []
        }
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "argparse",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "NEWPLAN/PHASE1/coordinator_agent.py": {
      "classes": [
        {
          "name": "CoordinatorAgent",
          "line": 88,
          "methods": [
            "__init__",
            "_get_health_status",
            "_register_service",
            "_init_memory_connection",
            "_get_memory_connection",
            "store_memory",
            "retrieve_memory",
            "_discover_services",
            "_service_discovery_refresh_loop",
            "_get_service_connection",
            "start",
            "stop",
            "_handle_requests",
            "_handle_proactive_suggestions",
            "_check_inactivity",
            "_add_pending_suggestion",
            "_present_suggestion",
            "_process_request",
            "_process_audio",
            "_process_text",
            "_process_vision",
            "_health_check",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "find_available_port",
          "line": 63,
          "args": [
            "start_port",
            "max_attempts"
          ]
        },
        {
          "name": "__init__",
          "line": 89,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 299,
          "args": [
            "self"
          ]
        },
        {
          "name": "_register_service",
          "line": 303,
          "args": [
            "self"
          ]
        },
        {
          "name": "_init_memory_connection",
          "line": 322,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_memory_connection",
          "line": 343,
          "args": [
            "self"
          ]
        },
        {
          "name": "store_memory",
          "line": 378,
          "args": [
            "self",
            "memory_type",
            "content",
            "tags",
            "priority"
          ]
        },
        {
          "name": "retrieve_memory",
          "line": 412,
          "args": [
            "self",
            "memory_id"
          ]
        },
        {
          "name": "_discover_services",
          "line": 442,
          "args": [
            "self"
          ]
        },
        {
          "name": "_service_discovery_refresh_loop",
          "line": 480,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_service_connection",
          "line": 486,
          "args": [
            "self",
            "service_name"
          ]
        },
        {
          "name": "start",
          "line": 528,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop",
          "line": 540,
          "args": [
            "self"
          ]
        },
        {
          "name": "_handle_requests",
          "line": 548,
          "args": [
            "self"
          ]
        },
        {
          "name": "_handle_proactive_suggestions",
          "line": 584,
          "args": [
            "self"
          ]
        },
        {
          "name": "_check_inactivity",
          "line": 617,
          "args": [
            "self"
          ]
        },
        {
          "name": "_add_pending_suggestion",
          "line": 642,
          "args": [
            "self",
            "suggestion"
          ]
        },
        {
          "name": "_present_suggestion",
          "line": 654,
          "args": [
            "self",
            "suggestion"
          ]
        },
        {
          "name": "_process_request",
          "line": 676,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_process_audio",
          "line": 694,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_process_text",
          "line": 729,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_process_vision",
          "line": 897,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_health_check",
          "line": 994,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 1174,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "sys",
        "os",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "src.core.base_agent.BaseAgent",
        "zmq",
        "json",
        "time",
        "logging",
        "threading",
        "base64",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "main_pc_code.utils.config_loader.load_config",
        "utils.service_discovery_client.discover_service",
        "utils.service_discovery_client.register_service",
        "utils.service_discovery_client.get_service_address",
        "utils.env_loader.get_env",
        "src.network.secure_zmq.is_secure_zmq_enabled",
        "src.network.secure_zmq.setup_curve_client",
        "src.network.secure_zmq.configure_secure_client",
        "src.network.secure_zmq.configure_secure_server",
        "socket",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        "config = load_config()",
        "config = load_config()",
        ".env"
      ],
      "health_checks": [
        "health",
        "def _get_health_status(self):",
        "def _health_check(self) -> Dict[str, Any]:",
        "def health_check(self):",
        "def _get_health_status(self):"
      ],
      "errors": []
    },
    "common_utils/agent_helpers.py": {
      "classes": [
        {
          "name": "_LazyModule",
          "line": 95,
          "methods": [
            "__init__",
            "_load",
            "__getattr__"
          ]
        }
      ],
      "functions": [
        {
          "name": "retry",
          "line": 30,
          "args": [
            "exceptions",
            "tries",
            "delay",
            "backoff",
            "logger"
          ]
        },
        {
          "name": "std_health_response",
          "line": 63,
          "args": [
            "additional"
          ]
        },
        {
          "name": "register_cleanup",
          "line": 79,
          "args": [
            "func"
          ]
        },
        {
          "name": "_run_cleanups",
          "line": 84,
          "args": []
        },
        {
          "name": "lazy_import",
          "line": 124,
          "args": [
            "module_name"
          ]
        },
        {
          "name": "decorator",
          "line": 38,
          "args": [
            "func"
          ]
        },
        {
          "name": "__init__",
          "line": 98,
          "args": [
            "self",
            "name"
          ]
        },
        {
          "name": "_load",
          "line": 103,
          "args": [
            "self"
          ]
        },
        {
          "name": "__getattr__",
          "line": 116,
          "args": [
            "self",
            "item"
          ]
        },
        {
          "name": "wrapper",
          "line": 40,
          "args": []
        }
      ],
      "imports": [
        "__future__.annotations",
        "atexit",
        "functools",
        "importlib",
        "logging",
        "sys",
        "time",
        "types.ModuleType",
        "typing.Any",
        "typing.Callable",
        "typing.List",
        "typing.Optional"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "def std_health_response(additional: Optional[dict[str, Any]] = None) -> dict[str, Any]:"
      ],
      "errors": []
    },
    "unified-system-v1/venv/lib/python3.10/site-packages/werkzeug/user_agent.py": {
      "classes": [
        {
          "name": "UserAgent",
          "line": 4,
          "methods": [
            "__init__",
            "__repr__",
            "__str__",
            "__bool__",
            "to_header"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 32,
          "args": [
            "self",
            "string"
          ]
        },
        {
          "name": "__repr__",
          "line": 36,
          "args": [
            "self"
          ]
        },
        {
          "name": "__str__",
          "line": 39,
          "args": [
            "self"
          ]
        },
        {
          "name": "__bool__",
          "line": 42,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_header",
          "line": 45,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "__future__.annotations"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "analysis_results/claude_4_sonnet_max/fix_baseagent_port_conflicts.py": {
      "classes": [],
      "functions": [
        {
          "name": "fix_baseagent_port_conflicts",
          "line": 13,
          "args": []
        },
        {
          "name": "validate_startup_config",
          "line": 134,
          "args": []
        },
        {
          "name": "fix_http_server_method",
          "line": 49,
          "args": [
            "match"
          ]
        }
      ],
      "imports": [
        "re",
        "pathlib.Path",
        "yaml"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = yaml.safe_load(f)",
        ".yaml"
      ],
      "health_checks": [
        "class HealthRequestHandler(BaseHTTPRequestHandler):",
        "def _start_http_health_server\\(self\\):",
        "def _start_http_health_server(self):"
      ],
      "errors": []
    },
    "analysis_results/claude_4_opus_max/fix_baseagent_ports.py": {
      "classes": [],
      "functions": [
        {
          "name": "fix_baseagent_ports",
          "line": 12,
          "args": []
        },
        {
          "name": "verify_startup_config",
          "line": 90,
          "args": []
        }
      ],
      "imports": [
        "shutil",
        "pathlib.Path",
        "pathlib.Path",
        "yaml"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = yaml.safe_load(f)",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "analysis_results/claude_4_opus_max/fix_critical_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "get_critical_agents",
          "line": 12,
          "args": []
        },
        {
          "name": "fix_chitchat_agent",
          "line": 29,
          "args": []
        },
        {
          "name": "fix_unified_system_agent",
          "line": 56,
          "args": []
        },
        {
          "name": "fix_request_coordinator",
          "line": 87,
          "args": []
        },
        {
          "name": "fix_predictive_health_monitor",
          "line": 115,
          "args": []
        },
        {
          "name": "fix_model_manager_agent",
          "line": 147,
          "args": []
        },
        {
          "name": "fix_port_conflict",
          "line": 176,
          "args": []
        },
        {
          "name": "main",
          "line": 201,
          "args": []
        }
      ],
      "imports": [
        "yaml",
        "pathlib.Path",
        "shutil",
        "re"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = yaml.safe_load(f)",
        "config = yaml.safe_load(f)",
        "config = yaml.safe_load(f)",
        ".yaml",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [
        "def fix_predictive_health_monitor():"
      ],
      "errors": []
    },
    "tests/mocks/model_manager_agent.py": {
      "classes": [
        {
          "name": "ModelManagerAgent",
          "line": 3,
          "methods": [
            "__init__",
            "handle_request",
            "select_model",
            "load_model",
            "unload_model",
            "health_check",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 6,
          "args": [
            "self",
            "config_path"
          ]
        },
        {
          "name": "handle_request",
          "line": 13,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "select_model",
          "line": 17,
          "args": [
            "self",
            "task_type",
            "context_size"
          ]
        },
        {
          "name": "load_model",
          "line": 21,
          "args": [
            "self",
            "model_id"
          ]
        },
        {
          "name": "unload_model",
          "line": 26,
          "args": [
            "self",
            "model_id"
          ]
        },
        {
          "name": "health_check",
          "line": 32,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 36,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [],
      "ports": [],
      "configurations": [
        "config = {}",
        "config = {}"
      ],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "docs/error_bus_examples/unified_system_agent_error_bus_integration.py": {
      "classes": [
        {
          "name": "UnifiedSystemAgentWithErrorBus",
          "line": 10,
          "methods": [
            "__init__",
            "_setup_error_bus_logging"
          ]
        },
        {
          "name": "ErrorBusHandler",
          "line": 40,
          "methods": [
            "__init__",
            "emit"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 15,
          "args": [
            "self"
          ]
        },
        {
          "name": "_setup_error_bus_logging",
          "line": 38,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 41,
          "args": [
            "self",
            "agent_name"
          ]
        },
        {
          "name": "emit",
          "line": 45,
          "args": [
            "self",
            "record"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "asyncio",
        "logging",
        "common.error_bus.init_error_bus",
        "common.error_bus.report_error",
        "common.error_bus.report_critical",
        "common.error_bus.error_bus_handler",
        "common.error_bus.ErrorContext",
        "psutil"
      ],
      "ports": [
        4222
      ],
      "configurations": [],
      "health_checks": [
        "def monitor_system_health(self):"
      ],
      "errors": []
    },
    "docs/error_bus_examples/unified_web_agent_error_bus_integration.py": {
      "classes": [
        {
          "name": "UnifiedWebAgentWithErrorBus",
          "line": 10,
          "methods": [
            "__init__",
            "_setup_error_bus_logging"
          ]
        },
        {
          "name": "ErrorBusHandler",
          "line": 40,
          "methods": [
            "__init__",
            "emit"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 15,
          "args": [
            "self"
          ]
        },
        {
          "name": "_setup_error_bus_logging",
          "line": 38,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 41,
          "args": [
            "self",
            "agent_name"
          ]
        },
        {
          "name": "emit",
          "line": 45,
          "args": [
            "self",
            "record"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "asyncio",
        "logging",
        "common.error_bus.init_error_bus",
        "common.error_bus.report_error",
        "common.error_bus.report_critical",
        "common.error_bus.error_bus_handler",
        "common.error_bus.ErrorContext",
        "psutil"
      ],
      "ports": [
        4222
      ],
      "configurations": [],
      "health_checks": [
        "def monitor_system_health(self):"
      ],
      "errors": []
    },
    "docs/api_integration_examples/remote_connector_agent_api_integration.py": {
      "classes": [
        {
          "name": "RemoteConnectorAgentAPIIntegration",
          "line": 11,
          "methods": [
            "__init__",
            "create_standard_response",
            "send_standard_request",
            "broadcast_event"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 14,
          "args": [
            "self"
          ]
        },
        {
          "name": "create_standard_response",
          "line": 18,
          "args": [
            "self",
            "data",
            "error"
          ]
        },
        {
          "name": "send_standard_request",
          "line": 24,
          "args": [
            "self",
            "target_agent",
            "endpoint",
            "data"
          ]
        },
        {
          "name": "broadcast_event",
          "line": 35,
          "args": [
            "self",
            "event_type",
            "data"
          ]
        }
      ],
      "imports": [
        "common.api.contract.get_api_processor",
        "common.api.contract.create_request",
        "common.api.contract.create_event",
        "common.api.contract.APIMessage",
        "common.api.contract.APIResponse",
        "common.api.contract.APIHeader",
        "common.api.contract.Status",
        "common.api.contract.Priority",
        "common.api.standard_contracts.register_all_standard_contracts"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "docs/api_integration_examples/session_memory_agent_api_integration.py": {
      "classes": [
        {
          "name": "SessionMemoryAgentAPIIntegration",
          "line": 11,
          "methods": [
            "__init__",
            "create_standard_response",
            "send_standard_request",
            "broadcast_event"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 14,
          "args": [
            "self"
          ]
        },
        {
          "name": "create_standard_response",
          "line": 18,
          "args": [
            "self",
            "data",
            "error"
          ]
        },
        {
          "name": "send_standard_request",
          "line": 24,
          "args": [
            "self",
            "target_agent",
            "endpoint",
            "data"
          ]
        },
        {
          "name": "broadcast_event",
          "line": 35,
          "args": [
            "self",
            "event_type",
            "data"
          ]
        }
      ],
      "imports": [
        "common.api.contract.get_api_processor",
        "common.api.contract.create_request",
        "common.api.contract.create_event",
        "common.api.contract.APIMessage",
        "common.api.contract.APIResponse",
        "common.api.contract.APIHeader",
        "common.api.contract.Status",
        "common.api.contract.Priority",
        "common.api.standard_contracts.register_all_standard_contracts"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "docs/api_integration_examples/unified_web_agent_api_integration.py": {
      "classes": [
        {
          "name": "UnifiedWebAgentAPIIntegration",
          "line": 11,
          "methods": [
            "__init__",
            "create_standard_response",
            "send_standard_request",
            "broadcast_event"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 14,
          "args": [
            "self"
          ]
        },
        {
          "name": "create_standard_response",
          "line": 18,
          "args": [
            "self",
            "data",
            "error"
          ]
        },
        {
          "name": "send_standard_request",
          "line": 24,
          "args": [
            "self",
            "target_agent",
            "endpoint",
            "data"
          ]
        },
        {
          "name": "broadcast_event",
          "line": 35,
          "args": [
            "self",
            "event_type",
            "data"
          ]
        }
      ],
      "imports": [
        "common.api.contract.get_api_processor",
        "common.api.contract.create_request",
        "common.api.contract.create_event",
        "common.api.contract.APIMessage",
        "common.api.contract.APIResponse",
        "common.api.contract.APIHeader",
        "common.api.contract.Status",
        "common.api.contract.Priority",
        "common.api.standard_contracts.register_all_standard_contracts"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "docs/security_examples/unified_web_agent_encryption.py": {
      "classes": [
        {
          "name": "UnifiedWebAgentEncryptionIntegration",
          "line": 12,
          "methods": [
            "__init__",
            "_setup_secrets",
            "get_database_credentials",
            "get_api_configuration",
            "rotate_encryption_keys"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 15,
          "args": [
            "self"
          ]
        },
        {
          "name": "_setup_secrets",
          "line": 33,
          "args": [
            "self"
          ]
        },
        {
          "name": "get_database_credentials",
          "line": 128,
          "args": [
            "self"
          ]
        },
        {
          "name": "get_api_configuration",
          "line": 132,
          "args": [
            "self"
          ]
        },
        {
          "name": "rotate_encryption_keys",
          "line": 169,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.security.encryption.get_encryption_service",
        "common.security.encryption.get_secrets_manager",
        "common.security.encryption.EncryptionAlgorithm",
        "common.security.encryption.encrypt_data",
        "common.security.encryption.decrypt_data",
        "common.security.encryption.set_secret",
        "common.security.encryption.get_secret",
        "common.security.encryption.EncryptedData",
        "common.security.encryption.EncryptedData"
      ],
      "ports": [],
      "configurations": [
        "config = encryption.get_database_credentials()",
        "config = encryption.get_api_configuration()",
        "config = encryption.get_database_credentials()",
        "config = encryption.get_api_configuration()"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/security_examples/face_recognition_agent_access_control.py": {
      "classes": [
        {
          "name": "FaceRecognitionAgentAccessControlIntegration",
          "line": 11,
          "methods": [
            "__init__",
            "_setup_access_rules",
            "_setup_rate_limits",
            "_setup_ip_controls",
            "monitor_security_events",
            "add_temporary_block",
            "get_rate_limit_status"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 14,
          "args": [
            "self"
          ]
        },
        {
          "name": "_setup_access_rules",
          "line": 23,
          "args": [
            "self"
          ]
        },
        {
          "name": "_setup_rate_limits",
          "line": 74,
          "args": [
            "self"
          ]
        },
        {
          "name": "_setup_ip_controls",
          "line": 105,
          "args": [
            "self"
          ]
        },
        {
          "name": "monitor_security_events",
          "line": 158,
          "args": [
            "self"
          ]
        },
        {
          "name": "add_temporary_block",
          "line": 180,
          "args": [
            "self",
            "ip_address",
            "duration_minutes"
          ]
        },
        {
          "name": "get_rate_limit_status",
          "line": 197,
          "args": [
            "self",
            "user_id"
          ]
        }
      ],
      "imports": [
        "common.security.access_control.get_access_control_engine",
        "common.security.access_control.get_security_middleware",
        "common.security.access_control.protect_endpoint",
        "common.security.access_control.AccessDecision",
        "common.security.access_control.ThreatLevel",
        "common.security.access_control.add_ip_to_blacklist",
        "common.security.access_control.add_ip_to_whitelist",
        "common.security.access_control.check_rate_limit",
        "common.security.access_control.AccessRule",
        "common.security.access_control.RateLimitRule",
        "common.security.access_control.RateLimitType",
        "common.security.access_control.AccessRule",
        "time"
      ],
      "ports": [],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "def get_rate_limit_status(self, user_id: str) -> dict:"
      ],
      "errors": []
    },
    "docs/security_examples/unified_web_agent_access_control.py": {
      "classes": [
        {
          "name": "UnifiedWebAgentAccessControlIntegration",
          "line": 11,
          "methods": [
            "__init__",
            "_setup_access_rules",
            "_setup_rate_limits",
            "_setup_ip_controls",
            "monitor_security_events",
            "add_temporary_block",
            "get_rate_limit_status"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 14,
          "args": [
            "self"
          ]
        },
        {
          "name": "_setup_access_rules",
          "line": 23,
          "args": [
            "self"
          ]
        },
        {
          "name": "_setup_rate_limits",
          "line": 74,
          "args": [
            "self"
          ]
        },
        {
          "name": "_setup_ip_controls",
          "line": 105,
          "args": [
            "self"
          ]
        },
        {
          "name": "monitor_security_events",
          "line": 158,
          "args": [
            "self"
          ]
        },
        {
          "name": "add_temporary_block",
          "line": 180,
          "args": [
            "self",
            "ip_address",
            "duration_minutes"
          ]
        },
        {
          "name": "get_rate_limit_status",
          "line": 197,
          "args": [
            "self",
            "user_id"
          ]
        }
      ],
      "imports": [
        "common.security.access_control.get_access_control_engine",
        "common.security.access_control.get_security_middleware",
        "common.security.access_control.protect_endpoint",
        "common.security.access_control.AccessDecision",
        "common.security.access_control.ThreatLevel",
        "common.security.access_control.add_ip_to_blacklist",
        "common.security.access_control.add_ip_to_whitelist",
        "common.security.access_control.check_rate_limit",
        "common.security.access_control.AccessRule",
        "common.security.access_control.RateLimitRule",
        "common.security.access_control.RateLimitType",
        "common.security.access_control.AccessRule",
        "time"
      ],
      "ports": [],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "def get_rate_limit_status(self, user_id: str) -> dict:"
      ],
      "errors": []
    },
    "docs/security_examples/unified_web_agent_authentication.py": {
      "classes": [
        {
          "name": "UnifiedWebAgentAuthenticationIntegration",
          "line": 10,
          "methods": [
            "__init__",
            "generate_user_token",
            "create_service_account"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 13,
          "args": [
            "self"
          ]
        },
        {
          "name": "generate_user_token",
          "line": 131,
          "args": [
            "self",
            "user_id",
            "roles"
          ]
        },
        {
          "name": "create_service_account",
          "line": 147,
          "args": [
            "self",
            "service_name",
            "permissions"
          ]
        }
      ],
      "imports": [
        "common.security.authentication.get_security_manager",
        "common.security.authentication.SecurityContext",
        "common.security.authentication.AuthenticationMethod",
        "common.security.authentication.require_auth",
        "common.security.authentication.ResourceType",
        "common.security.authentication.PermissionLevel"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "def get_agent_status(self, security_context: SecurityContext):"
      ],
      "errors": []
    },
    "docs/security_examples/face_recognition_agent_authentication.py": {
      "classes": [
        {
          "name": "FaceRecognitionAgentAuthenticationIntegration",
          "line": 10,
          "methods": [
            "__init__",
            "generate_user_token",
            "create_service_account"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 13,
          "args": [
            "self"
          ]
        },
        {
          "name": "generate_user_token",
          "line": 131,
          "args": [
            "self",
            "user_id",
            "roles"
          ]
        },
        {
          "name": "create_service_account",
          "line": 147,
          "args": [
            "self",
            "service_name",
            "permissions"
          ]
        }
      ],
      "imports": [
        "common.security.authentication.get_security_manager",
        "common.security.authentication.SecurityContext",
        "common.security.authentication.AuthenticationMethod",
        "common.security.authentication.require_auth",
        "common.security.authentication.ResourceType",
        "common.security.authentication.PermissionLevel"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "def get_agent_status(self, security_context: SecurityContext):"
      ],
      "errors": []
    },
    "docs/security_examples/face_recognition_agent_encryption.py": {
      "classes": [
        {
          "name": "FaceRecognitionAgentEncryptionIntegration",
          "line": 12,
          "methods": [
            "__init__",
            "_setup_secrets",
            "get_database_credentials",
            "get_api_configuration",
            "rotate_encryption_keys"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 15,
          "args": [
            "self"
          ]
        },
        {
          "name": "_setup_secrets",
          "line": 33,
          "args": [
            "self"
          ]
        },
        {
          "name": "get_database_credentials",
          "line": 128,
          "args": [
            "self"
          ]
        },
        {
          "name": "get_api_configuration",
          "line": 132,
          "args": [
            "self"
          ]
        },
        {
          "name": "rotate_encryption_keys",
          "line": 169,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.security.encryption.get_encryption_service",
        "common.security.encryption.get_secrets_manager",
        "common.security.encryption.EncryptionAlgorithm",
        "common.security.encryption.encrypt_data",
        "common.security.encryption.decrypt_data",
        "common.security.encryption.set_secret",
        "common.security.encryption.get_secret",
        "common.security.encryption.EncryptedData",
        "common.security.encryption.EncryptedData"
      ],
      "ports": [],
      "configurations": [
        "config = encryption.get_database_credentials()",
        "config = encryption.get_api_configuration()",
        "config = encryption.get_database_credentials()",
        "config = encryption.get_api_configuration()"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/api_contract_templates/unified_web_agent_contract.py": {
      "classes": [
        {
          "name": "UnifiedWebAgentContract",
          "line": 6,
          "methods": [
            "name",
            "version",
            "validate_request",
            "validate_response"
          ]
        }
      ],
      "functions": [
        {
          "name": "register_unified_web_agent_contract",
          "line": 49,
          "args": [
            "processor"
          ]
        },
        {
          "name": "name",
          "line": 10,
          "args": [
            "self"
          ]
        },
        {
          "name": "version",
          "line": 14,
          "args": [
            "self"
          ]
        },
        {
          "name": "validate_request",
          "line": 17,
          "args": [
            "self",
            "payload"
          ]
        },
        {
          "name": "validate_response",
          "line": 23,
          "args": [
            "self",
            "payload"
          ]
        }
      ],
      "imports": [
        "common.api.contract.APIContract",
        "common.api.contract.APIMessage",
        "common.api.contract.APIResponse",
        "common.api.contract.APIVersion",
        "common.api.contract.Status",
        "typing.Dict",
        "typing.Any"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "docs/api_contract_templates/session_memory_agent_contract.py": {
      "classes": [
        {
          "name": "SessionMemoryAgentContract",
          "line": 6,
          "methods": [
            "name",
            "version",
            "validate_request",
            "validate_response"
          ]
        }
      ],
      "functions": [
        {
          "name": "register_session_memory_agent_contract",
          "line": 49,
          "args": [
            "processor"
          ]
        },
        {
          "name": "name",
          "line": 10,
          "args": [
            "self"
          ]
        },
        {
          "name": "version",
          "line": 14,
          "args": [
            "self"
          ]
        },
        {
          "name": "validate_request",
          "line": 17,
          "args": [
            "self",
            "payload"
          ]
        },
        {
          "name": "validate_response",
          "line": 23,
          "args": [
            "self",
            "payload"
          ]
        }
      ],
      "imports": [
        "common.api.contract.APIContract",
        "common.api.contract.APIMessage",
        "common.api.contract.APIResponse",
        "common.api.contract.APIVersion",
        "common.api.contract.Status",
        "typing.Dict",
        "typing.Any"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "docs/api_contract_templates/remote_connector_agent_contract.py": {
      "classes": [
        {
          "name": "RemoteConnectorAgentContract",
          "line": 6,
          "methods": [
            "name",
            "version",
            "validate_request",
            "validate_response"
          ]
        }
      ],
      "functions": [
        {
          "name": "register_remote_connector_agent_contract",
          "line": 49,
          "args": [
            "processor"
          ]
        },
        {
          "name": "name",
          "line": 10,
          "args": [
            "self"
          ]
        },
        {
          "name": "version",
          "line": 14,
          "args": [
            "self"
          ]
        },
        {
          "name": "validate_request",
          "line": 17,
          "args": [
            "self",
            "payload"
          ]
        },
        {
          "name": "validate_response",
          "line": 23,
          "args": [
            "self",
            "payload"
          ]
        }
      ],
      "imports": [
        "common.api.contract.APIContract",
        "common.api.contract.APIMessage",
        "common.api.contract.APIResponse",
        "common.api.contract.APIVersion",
        "common.api.contract.Status",
        "typing.Dict",
        "typing.Any"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "docs/resiliency_examples/unified_web_agent_health.py": {
      "classes": [
        {
          "name": "UnifiedWebAgentHealthMonitor",
          "line": 9,
          "methods": [
            "__init__",
            "_register_health_checks"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "_register_health_checks",
          "line": 16,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.resiliency.health_monitor.get_health_monitor",
        "common.resiliency.health_monitor.HealthCheck",
        "common.resiliency.health_monitor.HealthStatus"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "class UnifiedWebAgentHealthMonitor:",
        "def _register_health_checks(self):",
        "def get_health_status(self):",
        "def get_health_status(self):"
      ],
      "errors": []
    },
    "docs/resiliency_examples/base_agent_health.py": {
      "classes": [
        {
          "name": "BaseAgentHealthMonitor",
          "line": 9,
          "methods": [
            "__init__",
            "_register_health_checks"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "_register_health_checks",
          "line": 16,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.resiliency.health_monitor.get_health_monitor",
        "common.resiliency.health_monitor.HealthCheck",
        "common.resiliency.health_monitor.HealthStatus"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "class BaseAgentHealthMonitor:",
        "def _register_health_checks(self):",
        "def get_health_status(self):",
        "def get_health_status(self):"
      ],
      "errors": []
    },
    "docs/resiliency_examples/unified_system_agent_circuit_breaker.py": {
      "classes": [
        {
          "name": "UnifiedSystemAgentCircuitBreakers",
          "line": 9,
          "methods": [
            "__init__"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "db_query",
          "line": 43,
          "args": []
        }
      ],
      "imports": [
        "common.resiliency.circuit_breaker.get_circuit_breaker",
        "common.resiliency.circuit_breaker.CircuitBreakerConfig",
        "common.resiliency.circuit_breaker.circuit_breaker"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/resiliency_examples/base_agent_circuit_breaker.py": {
      "classes": [
        {
          "name": "BaseAgentCircuitBreakers",
          "line": 9,
          "methods": [
            "__init__"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "db_query",
          "line": 43,
          "args": []
        }
      ],
      "imports": [
        "common.resiliency.circuit_breaker.get_circuit_breaker",
        "common.resiliency.circuit_breaker.CircuitBreakerConfig",
        "common.resiliency.circuit_breaker.circuit_breaker"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/resiliency_examples/unified_web_agent_bulkhead.py": {
      "classes": [
        {
          "name": "UnifiedWebAgentBulkheads",
          "line": 9,
          "methods": [
            "__init__"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "task",
          "line": 49,
          "args": []
        }
      ],
      "imports": [
        "common.resiliency.bulkhead.get_bulkhead",
        "common.resiliency.bulkhead.BulkheadConfig",
        "common.resiliency.bulkhead.IsolationStrategy",
        "common.resiliency.bulkhead.bulkhead"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/resiliency_examples/unified_system_agent_health.py": {
      "classes": [
        {
          "name": "UnifiedSystemAgentHealthMonitor",
          "line": 9,
          "methods": [
            "__init__",
            "_register_health_checks"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "_register_health_checks",
          "line": 16,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.resiliency.health_monitor.get_health_monitor",
        "common.resiliency.health_monitor.HealthCheck",
        "common.resiliency.health_monitor.HealthStatus"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "class UnifiedSystemAgentHealthMonitor:",
        "def _register_health_checks(self):",
        "def get_health_status(self):",
        "def get_health_status(self):"
      ],
      "errors": []
    },
    "docs/resiliency_examples/unified_system_agent_bulkhead.py": {
      "classes": [
        {
          "name": "UnifiedSystemAgentBulkheads",
          "line": 9,
          "methods": [
            "__init__"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "task",
          "line": 49,
          "args": []
        }
      ],
      "imports": [
        "common.resiliency.bulkhead.get_bulkhead",
        "common.resiliency.bulkhead.BulkheadConfig",
        "common.resiliency.bulkhead.IsolationStrategy",
        "common.resiliency.bulkhead.bulkhead"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/resiliency_examples/base_agent_bulkhead.py": {
      "classes": [
        {
          "name": "BaseAgentBulkheads",
          "line": 9,
          "methods": [
            "__init__"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "task",
          "line": 49,
          "args": []
        }
      ],
      "imports": [
        "common.resiliency.bulkhead.get_bulkhead",
        "common.resiliency.bulkhead.BulkheadConfig",
        "common.resiliency.bulkhead.IsolationStrategy",
        "common.resiliency.bulkhead.bulkhead"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/resiliency_examples/unified_web_agent_circuit_breaker.py": {
      "classes": [
        {
          "name": "UnifiedWebAgentCircuitBreakers",
          "line": 9,
          "methods": [
            "__init__"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "db_query",
          "line": 43,
          "args": []
        }
      ],
      "imports": [
        "common.resiliency.circuit_breaker.get_circuit_breaker",
        "common.resiliency.circuit_breaker.CircuitBreakerConfig",
        "common.resiliency.circuit_breaker.circuit_breaker"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/performance_examples/session_memory_agent_optimization.py": {
      "classes": [
        {
          "name": "SessionMemoryAgentOptimizationIntegration",
          "line": 10,
          "methods": [
            "__init__",
            "apply_caching_optimization",
            "optimize_memory_usage",
            "optimize_cpu_intensive"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 13,
          "args": [
            "self"
          ]
        },
        {
          "name": "apply_caching_optimization",
          "line": 37,
          "args": [
            "self",
            "func_name"
          ]
        },
        {
          "name": "optimize_memory_usage",
          "line": 70,
          "args": [
            "self",
            "large_list"
          ]
        },
        {
          "name": "optimize_cpu_intensive",
          "line": 82,
          "args": [
            "self",
            "data"
          ]
        },
        {
          "name": "optimized_function",
          "line": 44,
          "args": []
        },
        {
          "name": "optimized_generator",
          "line": 76,
          "args": []
        }
      ],
      "imports": [
        "common.performance.optimizer.get_optimizer",
        "common.performance.optimizer.optimize_function",
        "common.performance.optimizer.run_system_optimization",
        "common.performance.profiler.get_profiler",
        "common.performance.caching.cached",
        "aiohttp",
        "aiofiles",
        "asyncio",
        "concurrent.futures.ProcessPoolExecutor"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/performance_examples/voice_profiling_agent_caching.py": {
      "classes": [
        {
          "name": "VoiceProfilingAgentCacheIntegration",
          "line": 9,
          "methods": [
            "__init__"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.performance.caching.get_cache",
        "common.performance.caching.cached",
        "common.performance.caching.CacheConfig",
        "common.performance.caching.CacheBackend",
        "common.performance.caching.cache_invalidate"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/performance_examples/voice_profiling_agent_optimization.py": {
      "classes": [
        {
          "name": "VoiceProfilingAgentOptimizationIntegration",
          "line": 10,
          "methods": [
            "__init__",
            "apply_caching_optimization",
            "optimize_memory_usage",
            "optimize_cpu_intensive"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 13,
          "args": [
            "self"
          ]
        },
        {
          "name": "apply_caching_optimization",
          "line": 37,
          "args": [
            "self",
            "func_name"
          ]
        },
        {
          "name": "optimize_memory_usage",
          "line": 70,
          "args": [
            "self",
            "large_list"
          ]
        },
        {
          "name": "optimize_cpu_intensive",
          "line": 82,
          "args": [
            "self",
            "data"
          ]
        },
        {
          "name": "optimized_function",
          "line": 44,
          "args": []
        },
        {
          "name": "optimized_generator",
          "line": 76,
          "args": []
        }
      ],
      "imports": [
        "common.performance.optimizer.get_optimizer",
        "common.performance.optimizer.optimize_function",
        "common.performance.optimizer.run_system_optimization",
        "common.performance.profiler.get_profiler",
        "common.performance.caching.cached",
        "aiohttp",
        "aiofiles",
        "asyncio",
        "concurrent.futures.ProcessPoolExecutor"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/performance_examples/session_memory_agent_caching.py": {
      "classes": [
        {
          "name": "SessionMemoryAgentCacheIntegration",
          "line": 9,
          "methods": [
            "__init__"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.performance.caching.get_cache",
        "common.performance.caching.cached",
        "common.performance.caching.CacheConfig",
        "common.performance.caching.CacheBackend",
        "common.performance.caching.cache_invalidate"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/performance_examples/session_memory_agent_profiling.py": {
      "classes": [
        {
          "name": "SessionMemoryAgentProfilingIntegration",
          "line": 9,
          "methods": [
            "__init__",
            "cpu_intensive_operation",
            "get_performance_report"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "cpu_intensive_operation",
          "line": 30,
          "args": [
            "self",
            "data"
          ]
        },
        {
          "name": "get_performance_report",
          "line": 53,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.performance.profiler.get_profiler",
        "common.performance.profiler.profile_time",
        "common.performance.profiler.profile_memory",
        "common.performance.profiler.profile_cpu",
        "common.performance.profiler.profile_all"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "docs/performance_examples/unified_web_agent_optimization.py": {
      "classes": [
        {
          "name": "UnifiedWebAgentOptimizationIntegration",
          "line": 10,
          "methods": [
            "__init__",
            "apply_caching_optimization",
            "optimize_memory_usage",
            "optimize_cpu_intensive"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 13,
          "args": [
            "self"
          ]
        },
        {
          "name": "apply_caching_optimization",
          "line": 37,
          "args": [
            "self",
            "func_name"
          ]
        },
        {
          "name": "optimize_memory_usage",
          "line": 70,
          "args": [
            "self",
            "large_list"
          ]
        },
        {
          "name": "optimize_cpu_intensive",
          "line": 82,
          "args": [
            "self",
            "data"
          ]
        },
        {
          "name": "optimized_function",
          "line": 44,
          "args": []
        },
        {
          "name": "optimized_generator",
          "line": 76,
          "args": []
        }
      ],
      "imports": [
        "common.performance.optimizer.get_optimizer",
        "common.performance.optimizer.optimize_function",
        "common.performance.optimizer.run_system_optimization",
        "common.performance.profiler.get_profiler",
        "common.performance.caching.cached",
        "aiohttp",
        "aiofiles",
        "asyncio",
        "concurrent.futures.ProcessPoolExecutor"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/performance_examples/unified_web_agent_profiling.py": {
      "classes": [
        {
          "name": "UnifiedWebAgentProfilingIntegration",
          "line": 9,
          "methods": [
            "__init__",
            "cpu_intensive_operation",
            "get_performance_report"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "cpu_intensive_operation",
          "line": 30,
          "args": [
            "self",
            "data"
          ]
        },
        {
          "name": "get_performance_report",
          "line": 53,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.performance.profiler.get_profiler",
        "common.performance.profiler.profile_time",
        "common.performance.profiler.profile_memory",
        "common.performance.profiler.profile_cpu",
        "common.performance.profiler.profile_all"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "docs/performance_examples/voice_profiling_agent_profiling.py": {
      "classes": [
        {
          "name": "VoiceProfilingAgentProfilingIntegration",
          "line": 9,
          "methods": [
            "__init__",
            "cpu_intensive_operation",
            "get_performance_report"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "cpu_intensive_operation",
          "line": 30,
          "args": [
            "self",
            "data"
          ]
        },
        {
          "name": "get_performance_report",
          "line": 53,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.performance.profiler.get_profiler",
        "common.performance.profiler.profile_time",
        "common.performance.profiler.profile_memory",
        "common.performance.profiler.profile_cpu",
        "common.performance.profiler.profile_all"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "docs/performance_examples/unified_web_agent_caching.py": {
      "classes": [
        {
          "name": "UnifiedWebAgentCacheIntegration",
          "line": 9,
          "methods": [
            "__init__"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.performance.caching.get_cache",
        "common.performance.caching.cached",
        "common.performance.caching.CacheConfig",
        "common.performance.caching.CacheBackend",
        "common.performance.caching.cache_invalidate"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/health_integration_examples/human_awareness_agent_health_integration.py": {
      "classes": [
        {
          "name": "HumanAwarenessAgent",
          "line": 8,
          "methods": [
            "__init__",
            "_check_database_connection",
            "_check_external_api",
            "health_check",
            "detailed_health"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 13,
          "args": [
            "self"
          ]
        },
        {
          "name": "_check_database_connection",
          "line": 28,
          "args": [
            "self"
          ]
        },
        {
          "name": "_check_external_api",
          "line": 36,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 45,
          "args": [
            "self"
          ]
        },
        {
          "name": "detailed_health",
          "line": 49,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.health.unified_health.UnifiedHealthMixin"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "health",
        "class HumanAwarenessAgent(UnifiedHealthMixin):",
        "def health_check(self):",
        "def detailed_health(self):"
      ],
      "errors": []
    },
    "docs/health_integration_examples/proactive_agent_interface_health_integration.py": {
      "classes": [
        {
          "name": "ProactiveAgentInterface",
          "line": 8,
          "methods": [
            "__init__",
            "_check_database_connection",
            "_check_external_api",
            "health_check",
            "detailed_health"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 13,
          "args": [
            "self"
          ]
        },
        {
          "name": "_check_database_connection",
          "line": 28,
          "args": [
            "self"
          ]
        },
        {
          "name": "_check_external_api",
          "line": 36,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 45,
          "args": [
            "self"
          ]
        },
        {
          "name": "detailed_health",
          "line": 49,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.health.unified_health.UnifiedHealthMixin"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "health",
        "class ProactiveAgentInterface(UnifiedHealthMixin):",
        "def health_check(self):",
        "def detailed_health(self):"
      ],
      "errors": []
    },
    "docs/health_integration_examples/model_manager_agent_health_integration.py": {
      "classes": [
        {
          "name": "ModelManagerAgent",
          "line": 8,
          "methods": [
            "__init__",
            "_check_database_connection",
            "_check_external_api",
            "health_check",
            "detailed_health"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 13,
          "args": [
            "self"
          ]
        },
        {
          "name": "_check_database_connection",
          "line": 28,
          "args": [
            "self"
          ]
        },
        {
          "name": "_check_external_api",
          "line": 36,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 45,
          "args": [
            "self"
          ]
        },
        {
          "name": "detailed_health",
          "line": 49,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.health.unified_health.UnifiedHealthMixin"
      ],
      "ports": [
        8000
      ],
      "configurations": [],
      "health_checks": [
        "health",
        "class ModelManagerAgent(UnifiedHealthMixin):",
        "def health_check(self):",
        "def detailed_health(self):"
      ],
      "errors": []
    },
    "main_pc_code/simple_agent_health_test.py": {
      "classes": [],
      "functions": [
        {
          "name": "test_port_availability",
          "line": 19,
          "args": [
            "host",
            "port",
            "timeout"
          ]
        },
        {
          "name": "launch_agent",
          "line": 48,
          "args": [
            "script_path",
            "agent_name"
          ]
        },
        {
          "name": "test_health_endpoint",
          "line": 66,
          "args": [
            "host",
            "port",
            "action",
            "agent_name",
            "mode"
          ]
        },
        {
          "name": "validate_health_response",
          "line": 102,
          "args": [
            "response"
          ]
        },
        {
          "name": "terminate_process",
          "line": 125,
          "args": [
            "process",
            "agent_name"
          ]
        },
        {
          "name": "main",
          "line": 140,
          "args": []
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "subprocess",
        "zmq",
        "json",
        "time",
        "sys",
        "os",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "datetime.datetime",
        "argparse",
        "common.env_helpers.get_env"
      ],
      "ports": [],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "def test_health_endpoint(host: str, port: int, action: str, agent_name: str, mode: str) -> Tuple[bool, Dict[str, Any]]:",
        "def validate_health_response(response: Dict[str, Any]) -> bool:"
      ],
      "errors": []
    },
    "main_pc_code/refactor_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "find_agent_files",
          "line": 17,
          "args": []
        },
        {
          "name": "refactor_agent_file",
          "line": 26,
          "args": [
            "file_path"
          ]
        },
        {
          "name": "main",
          "line": 78,
          "args": []
        }
      ],
      "imports": [
        "os",
        "re",
        "logging",
        "typing.List",
        "typing.Dict",
        "typing.Any"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/test_base_agent_health.py": {
      "classes": [],
      "functions": [
        {
          "name": "test_base_agent_health",
          "line": 18,
          "args": []
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "sys",
        "os",
        "main_pc_code.src.core.base_agent.BaseAgent",
        "zmq",
        "json",
        "time",
        "threading",
        "common.env_helpers.get_env"
      ],
      "ports": [
        5580
      ],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "def test_base_agent_health():"
      ],
      "errors": []
    },
    "main_pc_code/validate_agent_paths.py": {
      "classes": [],
      "functions": [
        {
          "name": "validate_agent_paths",
          "line": 11,
          "args": []
        }
      ],
      "imports": [
        "yaml",
        "os",
        "pathlib.Path",
        "sys",
        "os",
        "common.utils.path_manager.PathManager"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = yaml.safe_load(f)",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/working_agent_health_test.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected an indented block after 'try' statement on line 109 (<unknown>, line 110)"
      ]
    },
    "main_pc_code/test_single_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [
        "os",
        "sys",
        "subprocess",
        "pathlib.Path"
      ],
      "ports": [
        9570,
        8570
      ],
      "configurations": [
        ".env",
        ".env",
        ".env",
        ".env"
      ],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/agent_health_check_validator.py": {
      "classes": [
        {
          "name": "AgentHealthValidator",
          "line": 19,
          "methods": [
            "__init__",
            "launch_agent",
            "perform_health_check",
            "_validate_health_response",
            "terminate_agent",
            "run_validation",
            "_generate_report"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "line": 247,
          "args": []
        },
        {
          "name": "__init__",
          "line": 20,
          "args": [
            "self"
          ]
        },
        {
          "name": "launch_agent",
          "line": 42,
          "args": [
            "self",
            "agent_config"
          ]
        },
        {
          "name": "perform_health_check",
          "line": 64,
          "args": [
            "self",
            "agent_config"
          ]
        },
        {
          "name": "_validate_health_response",
          "line": 113,
          "args": [
            "self",
            "response"
          ]
        },
        {
          "name": "terminate_agent",
          "line": 143,
          "args": [
            "self",
            "agent_name"
          ]
        },
        {
          "name": "run_validation",
          "line": 160,
          "args": [
            "self"
          ]
        },
        {
          "name": "_generate_report",
          "line": 206,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "subprocess",
        "zmq",
        "json",
        "time",
        "signal",
        "sys",
        "os",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "datetime.datetime",
        "common.env_helpers.get_env"
      ],
      "ports": [],
      "configurations": [
        ".env",
        ".JSON"
      ],
      "health_checks": [
        "class AgentHealthValidator:",
        "def perform_health_check(self, agent_config: Dict[str, Any]) -> Tuple[bool, Dict[str, Any]]:",
        "def _validate_health_response(self, response: Dict[str, Any]) -> bool:"
      ],
      "errors": []
    },
    "main_pc_code/config/agent_ports.py": {
      "classes": [
        {
          "name": "AgentPorts",
          "line": 10,
          "methods": [
            "health_check_ports",
            "to_dict"
          ]
        }
      ],
      "functions": [
        {
          "name": "health_check_ports",
          "line": 30,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_dict",
          "line": 45,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "dataclasses.dataclass",
        "typing.Dict",
        "typing.Any"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "health",
        "def health_check_ports(self) -> Dict[str, int]:"
      ],
      "errors": []
    },
    "main_pc_code/scripts/start_agents_new.py": {
      "classes": [],
      "functions": [
        {
          "name": "check_agent_health",
          "line": 117,
          "args": [
            "host",
            "port",
            "timeout"
          ]
        },
        {
          "name": "start_agent",
          "line": 156,
          "args": [
            "agent_name",
            "script_path"
          ]
        },
        {
          "name": "wait_for_agent",
          "line": 179,
          "args": [
            "host",
            "port",
            "overall_timeout",
            "check_interval"
          ]
        },
        {
          "name": "main",
          "line": 192,
          "args": []
        }
      ],
      "imports": [
        "subprocess",
        "sys",
        "time",
        "socket",
        "os",
        "logging",
        "typing.List",
        "typing.Dict",
        "typing.Tuple",
        "typing.Optional",
        "urllib.request",
        "urllib.error",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.env_helpers.get_env"
      ],
      "ports": [],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "def check_agent_health(host: str, port: int, timeout: int = 5) -> bool:"
      ],
      "errors": []
    },
    "main_pc_code/scripts/smoke_test_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "load_config",
          "line": 12,
          "args": []
        },
        {
          "name": "smoke_test_agents",
          "line": 16,
          "args": []
        },
        {
          "name": "main",
          "line": 56,
          "args": []
        }
      ],
      "imports": [
        "yaml",
        "subprocess",
        "os",
        "pathlib.Path",
        "sys",
        "os",
        "common.utils.path_manager.PathManager"
      ],
      "ports": [],
      "configurations": [
        "config = load_config()",
        "config = load_config()",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/scripts/agent_audit.py": {
      "classes": [],
      "functions": [
        {
          "name": "check_parse_agent_args_usage",
          "line": 12,
          "args": [
            "tree"
          ]
        },
        {
          "name": "check_canonical_import",
          "line": 30,
          "args": [
            "tree"
          ]
        },
        {
          "name": "check_config_from_agent_args",
          "line": 39,
          "args": [
            "tree"
          ]
        },
        {
          "name": "check_no_hardcoded_values",
          "line": 48,
          "args": [
            "code"
          ]
        },
        {
          "name": "check_super_init_args",
          "line": 56,
          "args": [
            "tree"
          ]
        },
        {
          "name": "audit_agent",
          "line": 68,
          "args": [
            "filepath"
          ]
        },
        {
          "name": "main",
          "line": 86,
          "args": []
        },
        {
          "name": "fmt_row",
          "line": 106,
          "args": [
            "row"
          ]
        }
      ],
      "imports": [
        "os",
        "ast",
        "re",
        "argparse",
        "pathlib.Path",
        "traceback"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/scripts/fix_agent_health_issues.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 79)"
      ]
    },
    "main_pc_code/scripts/validate_agents.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 104)"
      ]
    },
    "main_pc_code/scripts/check_all_agents_health.py": {
      "classes": [],
      "functions": [
        {
          "name": "format_status",
          "line": 44,
          "args": [
            "status"
          ]
        },
        {
          "name": "connect_to_sdt",
          "line": 54,
          "args": []
        },
        {
          "name": "check_system_health",
          "line": 79,
          "args": []
        },
        {
          "name": "print_health_report",
          "line": 109,
          "args": [
            "agents"
          ]
        },
        {
          "name": "_print_agent_list",
          "line": 162,
          "args": [
            "agents"
          ]
        },
        {
          "name": "register_example_agents",
          "line": 177,
          "args": [
            "count"
          ]
        }
      ],
      "imports": [
        "os",
        "sys",
        "zmq",
        "json",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "common.env_helpers.get_env",
        "argparse",
        "main_pc_code.src.network.secure_zmq.configure_secure_client"
      ],
      "ports": [
        7120
      ],
      "configurations": [
        ".env",
        ".env"
      ],
      "health_checks": [
        "def check_system_health() -> bool:",
        "def print_health_report(agents: Dict[str, Any]) -> None:",
        "def format_status(status: str) -> str:"
      ],
      "errors": []
    },
    "main_pc_code/scripts/start_all_agents.py": {
      "classes": [],
      "functions": [
        {
          "name": "start_agent",
          "line": 62,
          "args": [
            "name",
            "config"
          ]
        },
        {
          "name": "start_all_agents",
          "line": 98,
          "args": []
        },
        {
          "name": "monitor_processes",
          "line": 144,
          "args": [
            "processes"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "subprocess",
        "time",
        "sys",
        "os",
        "signal",
        "logging",
        "pathlib.Path",
        "typing.List",
        "typing.Dict",
        "typing.Optional",
        "common.env_helpers.get_env"
      ],
      "ports": [],
      "configurations": [
        ".env"
      ],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/scripts/start_agents_win.py": {
      "classes": [],
      "functions": [
        {
          "name": "main",
          "line": 21,
          "args": []
        },
        {
          "name": "start_agent",
          "line": 35,
          "args": [
            "agent_name",
            "script_path"
          ]
        }
      ],
      "imports": [
        "os",
        "sys",
        "subprocess",
        "time",
        "pathlib.Path",
        "logging"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/utils/agent_supervisor.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 570)"
      ]
    },
    "main_pc_code/utils/agent_health.py": {
      "classes": [],
      "functions": [
        {
          "name": "set_ready",
          "line": 29,
          "args": [
            "value"
          ]
        },
        {
          "name": "_probe_server",
          "line": 34,
          "args": [
            "port"
          ]
        },
        {
          "name": "start_health_probe",
          "line": 53,
          "args": [
            "port"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "socket",
        "threading",
        "logging",
        "contextlib.closing"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "def start_health_probe(port: int) -> int:"
      ],
      "errors": []
    },
    "main_pc_code/utils/analyze_agent_blocking.py": {
      "classes": [],
      "functions": [
        {
          "name": "main",
          "line": 39,
          "args": []
        }
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "re",
        "sys",
        "pathlib.Path",
        "yaml"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = yaml.safe_load(f)",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/agents/human_awareness_agent.py": {
      "classes": [
        {
          "name": "HumanAwarenessAgent",
          "line": 49,
          "methods": [
            "__init__",
            "_load_config",
            "_perform_initialization",
            "_init_components",
            "_get_health_status",
            "handle_request",
            "run",
            "_update_presence",
            "_update_emotion",
            "health_check",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 50,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_load_config",
          "line": 87,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 98,
          "args": [
            "self"
          ]
        },
        {
          "name": "_init_components",
          "line": 110,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 115,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_request",
          "line": 130,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 151,
          "args": [
            "self"
          ]
        },
        {
          "name": "_update_presence",
          "line": 186,
          "args": [
            "self"
          ]
        },
        {
          "name": "_update_emotion",
          "line": 191,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 196,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 229,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.utils.path_manager.PathManager",
        "sys",
        "os",
        "pathlib.Path",
        "time",
        "logging",
        "threading",
        "json",
        "os",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "sys",
        "sys",
        "os",
        "os",
        "sys",
        "pathlib.Path",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "psutil",
        "common.env_helpers.get_env",
        "zmq",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = self._load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = json.load(f)",
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = self._load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = json.load(f)",
        ".env",
        ".json",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [
        "health",
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def health_check(self):",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "main_pc_code/agents/nlu_agent_enhanced.py": {
      "classes": [
        {
          "name": "NLUAgent",
          "line": 63,
          "methods": [
            "__init__",
            "_perform_initialization",
            "start",
            "stop",
            "_handle_requests",
            "_process_request",
            "_analyze_text",
            "_extract_intent",
            "_extract_entities",
            "_get_health_status",
            "health_check",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 66,
          "args": [
            "self",
            "port",
            "name"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 131,
          "args": [
            "self"
          ]
        },
        {
          "name": "start",
          "line": 157,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop",
          "line": 168,
          "args": [
            "self"
          ]
        },
        {
          "name": "_handle_requests",
          "line": 176,
          "args": [
            "self"
          ]
        },
        {
          "name": "_process_request",
          "line": 205,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_analyze_text",
          "line": 220,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_extract_intent",
          "line": 255,
          "args": [
            "self",
            "text"
          ]
        },
        {
          "name": "_extract_entities",
          "line": 268,
          "args": [
            "self",
            "text",
            "intent"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 338,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 347,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 372,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.core.base_agent.BaseAgent",
        "common.core.enhanced_base_agent.EnhancedBaseAgent",
        "common.core.enhanced_base_agent.PerformanceMetrics",
        "common.core.unified_config_manager.UnifiedConfigManager",
        "os",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "time",
        "logging",
        "main_pc_code.agents.error_publisher.ErrorPublisher",
        "re",
        "threading",
        "traceback",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Tuple",
        "common.config_manager.load_unified_config",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.path_manager.PathManager"
      ],
      "ports": [],
      "configurations": [
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        ".yaml"
      ],
      "health_checks": [
        "health",
        "def _get_health_status(self):",
        "def health_check(self):",
        "def _get_health_status(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/proactive_agent_interface.py": {
      "classes": [
        {
          "name": "ProactiveAgentInterface",
          "line": 33,
          "methods": [
            "__init__",
            "_setup_proactive_sockets",
            "_start_event_processor",
            "_process_proactive_event",
            "_validate_event_data",
            "_process_event_queue",
            "_broadcast_event",
            "send_proactive_event",
            "get_statistics",
            "run",
            "_start_statistics_reporting",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "send_proactive_event",
          "line": 378,
          "args": [
            "event_type",
            "text",
            "user",
            "emotion",
            "extra",
            "host",
            "port"
          ]
        },
        {
          "name": "__init__",
          "line": 42,
          "args": [
            "self",
            "port",
            "health_check_port"
          ]
        },
        {
          "name": "_setup_proactive_sockets",
          "line": 90,
          "args": [
            "self"
          ]
        },
        {
          "name": "_start_event_processor",
          "line": 107,
          "args": [
            "self"
          ]
        },
        {
          "name": "_process_proactive_event",
          "line": 135,
          "args": [
            "self",
            "event_data"
          ]
        },
        {
          "name": "_validate_event_data",
          "line": 188,
          "args": [
            "self",
            "event_data"
          ]
        },
        {
          "name": "_process_event_queue",
          "line": 216,
          "args": [
            "self"
          ]
        },
        {
          "name": "_broadcast_event",
          "line": 229,
          "args": [
            "self",
            "event"
          ]
        },
        {
          "name": "send_proactive_event",
          "line": 262,
          "args": [
            "self",
            "event_type",
            "text",
            "user",
            "emotion",
            "extra"
          ]
        },
        {
          "name": "get_statistics",
          "line": 297,
          "args": [
            "self"
          ]
        },
        {
          "name": "run",
          "line": 309,
          "args": [
            "self"
          ]
        },
        {
          "name": "_start_statistics_reporting",
          "line": 330,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 348,
          "args": [
            "self"
          ]
        },
        {
          "name": "event_processor",
          "line": 109,
          "args": []
        },
        {
          "name": "stats_reporter",
          "line": 332,
          "args": []
        },
        {
          "name": "demo_events",
          "line": 457,
          "args": []
        }
      ],
      "imports": [
        "zmq",
        "json",
        "os",
        "time",
        "logging",
        "threading",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "datetime.datetime",
        "queue.Queue",
        "queue.Empty",
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.logger_util.get_json_logger",
        "main_pc_code.utils.network.get_host",
        "argparse",
        "threading",
        "time"
      ],
      "ports": [
        5558,
        5559
      ],
      "configurations": [],
      "health_checks": [
        "def __init__(self, port: int = None, health_check_port: int = None, **kwargs):"
      ],
      "errors": []
    },
    "main_pc_code/agents/vram_optimizer_agent_day4_optimized.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 1239)"
      ]
    },
    "main_pc_code/agents/model_manager_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 4822)"
      ]
    },
    "main_pc_code/agents/model_manager_agent_migrated.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected an indented block after 'try' statement on line 3990 (<unknown>, line 3992)"
      ]
    },
    "main_pc_code/agents/session_memory_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 60)"
      ]
    },
    "main_pc_code/agents/chitchat_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 58)"
      ]
    },
    "main_pc_code/agents/nlu_agent.py": {
      "classes": [
        {
          "name": "NLUAgent",
          "line": 57,
          "methods": [
            "__init__",
            "_perform_initialization",
            "start",
            "stop",
            "_handle_requests",
            "_process_request",
            "_analyze_text",
            "_extract_intent",
            "_extract_entities",
            "_get_health_status",
            "health_check",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 60,
          "args": [
            "self",
            "port",
            "name"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 127,
          "args": [
            "self"
          ]
        },
        {
          "name": "start",
          "line": 153,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop",
          "line": 164,
          "args": [
            "self"
          ]
        },
        {
          "name": "_handle_requests",
          "line": 172,
          "args": [
            "self"
          ]
        },
        {
          "name": "_process_request",
          "line": 201,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_analyze_text",
          "line": 216,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_extract_intent",
          "line": 251,
          "args": [
            "self",
            "text"
          ]
        },
        {
          "name": "_extract_entities",
          "line": 264,
          "args": [
            "self",
            "text",
            "intent"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 334,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 343,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 368,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.core.base_agent.BaseAgent",
        "os",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "time",
        "logging",
        "main_pc_code.agents.error_publisher.ErrorPublisher",
        "re",
        "threading",
        "traceback",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Tuple",
        "common.config_manager.load_unified_config",
        "remote_api_adapter.adapter.RemoteApiAdapter",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.path_manager.PathManager"
      ],
      "ports": [],
      "configurations": [
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        ".yaml"
      ],
      "health_checks": [
        "health",
        "def _get_health_status(self):",
        "def health_check(self):",
        "def _get_health_status(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/noise_reduction_agent_day4_optimized.py": {
      "classes": [
        {
          "name": "NoiseReductionAgent",
          "line": 68,
          "methods": [
            "__init__",
            "_init_sockets",
            "apply_noise_reduction",
            "process_audio_loop",
            "health_broadcast_loop",
            "start",
            "stop",
            "run",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 69,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_init_sockets",
          "line": 91,
          "args": [
            "self"
          ]
        },
        {
          "name": "apply_noise_reduction",
          "line": 112,
          "args": [
            "self",
            "audio_data",
            "sample_rate"
          ]
        },
        {
          "name": "process_audio_loop",
          "line": 197,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_broadcast_loop",
          "line": 279,
          "args": [
            "self"
          ]
        },
        {
          "name": "start",
          "line": 306,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop",
          "line": 326,
          "args": [
            "self"
          ]
        },
        {
          "name": "run",
          "line": 342,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 375,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 411,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "main_pc_code.src.core.base_agent.BaseAgent",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "pickle",
        "numpy",
        "time",
        "threading",
        "logging",
        "os",
        "sys",
        "json",
        "pathlib.Path",
        "datetime.datetime",
        "noisereduce",
        "scipy.signal",
        "psutil",
        "datetime.datetime",
        "common.env_helpers.get_env",
        "common.utils.path_manager.PathManager"
      ],
      "ports": [
        6576,
        6578,
        6575
      ],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "health",
        "health",
        "def health_broadcast_loop(self):",
        "def health_check(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/vram_optimizer_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 1235)"
      ]
    },
    "main_pc_code/agents/vision_capture_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 31)"
      ]
    },
    "main_pc_code/agents/face_recognition_agent_optimized.py": {
      "classes": [
        {
          "name": "PersonTracker",
          "line": 125,
          "methods": []
        },
        {
          "name": "OptimizedFaceRecognitionAgent",
          "line": 133,
          "methods": [
            "__init__",
            "_ensure_cv2_loaded",
            "_ensure_insightface_loaded",
            "_ensure_face_model_loaded",
            "detect_faces",
            "recognize_face",
            "analyze_emotion",
            "add_known_face",
            "get_status",
            "handle_request",
            "run",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "_lazy_import_cv2",
          "line": 36,
          "args": []
        },
        {
          "name": "_lazy_import_insightface",
          "line": 46,
          "args": []
        },
        {
          "name": "_lazy_import_torch",
          "line": 54,
          "args": []
        },
        {
          "name": "_lazy_import_onnx",
          "line": 66,
          "args": []
        },
        {
          "name": "_lazy_import_audio",
          "line": 74,
          "args": []
        },
        {
          "name": "_lazy_import_misc",
          "line": 86,
          "args": []
        },
        {
          "name": "__init__",
          "line": 139,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_ensure_cv2_loaded",
          "line": 188,
          "args": [
            "self"
          ]
        },
        {
          "name": "_ensure_insightface_loaded",
          "line": 198,
          "args": [
            "self"
          ]
        },
        {
          "name": "_ensure_face_model_loaded",
          "line": 208,
          "args": [
            "self"
          ]
        },
        {
          "name": "detect_faces",
          "line": 232,
          "args": [
            "self",
            "image_data"
          ]
        },
        {
          "name": "recognize_face",
          "line": 270,
          "args": [
            "self",
            "embedding"
          ]
        },
        {
          "name": "analyze_emotion",
          "line": 295,
          "args": [
            "self",
            "face_image"
          ]
        },
        {
          "name": "add_known_face",
          "line": 329,
          "args": [
            "self",
            "person_id",
            "embedding"
          ]
        },
        {
          "name": "get_status",
          "line": 334,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_request",
          "line": 350,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 388,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 405,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "common.utils.path_manager.PathManager",
        "sys",
        "os",
        "time",
        "json",
        "logging",
        "threading",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "typing.Any",
        "dataclasses.dataclass",
        "zmq",
        "common.env_helpers.get_env",
        "main_pc_code.agents.error_publisher.ErrorPublisher",
        "cv2",
        "numpy",
        "insightface",
        "torch",
        "torch.nn",
        "torch.nn.functional",
        "onnxruntime",
        "sounddevice",
        "librosa",
        "soundfile",
        "scipy.spatial.distance.cosine",
        "psutil"
      ],
      "ports": [],
      "configurations": [
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "CONFIG = json.load(f)[\"face_recognition\"]",
        "CONFIG = {",
        "CONFIG = {}",
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "CONFIG = json.load(f)[\"face_recognition\"]",
        "CONFIG = {",
        "CONFIG = {}",
        ".env",
        ".json"
      ],
      "health_checks": [
        "def get_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "main_pc_code/agents/code_generator_agent.py": {
      "classes": [
        {
          "name": "CodeGeneratorAgent",
          "line": 68,
          "methods": [
            "__init__",
            "run",
            "handle_requests",
            "load_gguf_model",
            "unload_gguf_model",
            "generate_with_gguf",
            "forward_to_model_manager",
            "_get_health_status",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 70,
          "args": [
            "self"
          ]
        },
        {
          "name": "run",
          "line": 100,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_requests",
          "line": 108,
          "args": [
            "self"
          ]
        },
        {
          "name": "load_gguf_model",
          "line": 260,
          "args": [
            "self",
            "model_id"
          ]
        },
        {
          "name": "unload_gguf_model",
          "line": 270,
          "args": [
            "self",
            "model_id"
          ]
        },
        {
          "name": "generate_with_gguf",
          "line": 280,
          "args": [
            "self",
            "model_id",
            "prompt",
            "system_prompt",
            "max_tokens",
            "temperature"
          ]
        },
        {
          "name": "forward_to_model_manager",
          "line": 307,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 333,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 348,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "sys",
        "os",
        "pathlib.Path",
        "os",
        "uuid",
        "time",
        "zmq",
        "json",
        "logging",
        "traceback",
        "sys",
        "gc",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Tuple",
        "pathlib.Path",
        "tempfile",
        "re",
        "threading",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "main_pc_code.utils.env_loader.get_env",
        "common.env_helpers.get_env",
        "zmq",
        "psutil",
        "datetime.datetime",
        "traceback",
        "requests"
      ],
      "ports": [
        11434
      ],
      "configurations": [
        "config = load_unified_config(str(Path(PathManager.get_project_root()) / \"main_pc_code\" / \"config\" / \"startup_config.yaml\"))",
        "config = load_unified_config(str(Path(PathManager.get_project_root()) / \"main_pc_code\" / \"config\" / \"startup_config.yaml\"))",
        "config = load_unified_config(str(Path(PathManager.get_project_root()) / \"main_pc_code\" / \"config\" / \"startup_config.yaml\"))",
        "config = load_unified_config(str(Path(PathManager.get_project_root()) / \"main_pc_code\" / \"config\" / \"startup_config.yaml\"))",
        ".env",
        ".env",
        ".json",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "main_pc_code/agents/noise_reduction_agent.py": {
      "classes": [
        {
          "name": "NoiseReductionAgent",
          "line": 63,
          "methods": [
            "__init__",
            "_init_sockets",
            "apply_noise_reduction",
            "process_audio_loop",
            "health_broadcast_loop",
            "start",
            "stop",
            "run",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 64,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_init_sockets",
          "line": 86,
          "args": [
            "self"
          ]
        },
        {
          "name": "apply_noise_reduction",
          "line": 107,
          "args": [
            "self",
            "audio_data",
            "sample_rate"
          ]
        },
        {
          "name": "process_audio_loop",
          "line": 192,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_broadcast_loop",
          "line": 274,
          "args": [
            "self"
          ]
        },
        {
          "name": "start",
          "line": 301,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop",
          "line": 321,
          "args": [
            "self"
          ]
        },
        {
          "name": "run",
          "line": 337,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 370,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 406,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "main_pc_code.src.core.base_agent.BaseAgent",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "pickle",
        "numpy",
        "time",
        "threading",
        "logging",
        "os",
        "sys",
        "json",
        "pathlib.Path",
        "datetime.datetime",
        "noisereduce",
        "scipy.signal",
        "psutil",
        "datetime.datetime",
        "common.env_helpers.get_env",
        "common.utils.path_manager.PathManager"
      ],
      "ports": [
        6576,
        6578,
        6575
      ],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "health",
        "health",
        "def health_broadcast_loop(self):",
        "def health_check(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/unified_system_agent.py": {
      "classes": [
        {
          "name": "UnifiedSystemAgent",
          "line": 62,
          "methods": [
            "__init__",
            "_create_readiness_file",
            "_send_ready_signal",
            "_initialize_background",
            "_load_config",
            "_monitor_services",
            "_discover_services",
            "_restart_service",
            "handle_request",
            "_get_service_status",
            "_start_service",
            "_stop_service",
            "_cleanup_system",
            "_get_system_info",
            "run",
            "_connect_to_agents",
            "cleanup",
            "stop",
            "_get_health_status"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 70,
          "args": [
            "self"
          ]
        },
        {
          "name": "_create_readiness_file",
          "line": 125,
          "args": [
            "self"
          ]
        },
        {
          "name": "_send_ready_signal",
          "line": 134,
          "args": [
            "self"
          ]
        },
        {
          "name": "_initialize_background",
          "line": 163,
          "args": [
            "self"
          ]
        },
        {
          "name": "_load_config",
          "line": 184,
          "args": [
            "self"
          ]
        },
        {
          "name": "_monitor_services",
          "line": 198,
          "args": [
            "self"
          ]
        },
        {
          "name": "_discover_services",
          "line": 221,
          "args": [
            "self"
          ]
        },
        {
          "name": "_restart_service",
          "line": 233,
          "args": [
            "self",
            "service_name"
          ]
        },
        {
          "name": "handle_request",
          "line": 239,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_get_service_status",
          "line": 293,
          "args": [
            "self",
            "service_name"
          ]
        },
        {
          "name": "_start_service",
          "line": 297,
          "args": [
            "self",
            "service_name"
          ]
        },
        {
          "name": "_stop_service",
          "line": 301,
          "args": [
            "self",
            "service_name"
          ]
        },
        {
          "name": "_cleanup_system",
          "line": 305,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_system_info",
          "line": 309,
          "args": [
            "self"
          ]
        },
        {
          "name": "run",
          "line": 321,
          "args": [
            "self"
          ]
        },
        {
          "name": "_connect_to_agents",
          "line": 388,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 406,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop",
          "line": 432,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 438,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.core.base_agent.BaseAgent",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.path_manager.PathManager",
        "main_pc_code.utils.config_loader.load_config",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "logging",
        "os",
        "sys",
        "yaml",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "datetime.datetime",
        "threading",
        "time",
        "psutil",
        "subprocess",
        "signal",
        "socket",
        "platform",
        "traceback",
        "main_pc_code.agents.error_publisher.ErrorPublisher",
        "traceback"
      ],
      "ports": [
        5568,
        5569
      ],
      "configurations": [
        "config = load_config()",
        "config = self._load_config()",
        "config = load_config()",
        "config = self._load_config()"
      ],
      "health_checks": [
        "def _get_health_status(self):",
        "def _get_service_status(self, service_name):",
        "def _get_health_status(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/mood_tracker_agent.py": {
      "classes": [
        {
          "name": "MoodTrackerAgent",
          "line": 44,
          "methods": [
            "__init__",
            "_monitor_emotions",
            "_update_mood",
            "_handle_queries",
            "_process_request",
            "get_current_mood",
            "get_mood_history",
            "get_long_term_mood",
            "_get_health_status",
            "health_check",
            "run",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 45,
          "args": [
            "self"
          ]
        },
        {
          "name": "_monitor_emotions",
          "line": 108,
          "args": [
            "self"
          ]
        },
        {
          "name": "_update_mood",
          "line": 131,
          "args": [
            "self",
            "emotional_state"
          ]
        },
        {
          "name": "_handle_queries",
          "line": 166,
          "args": [
            "self"
          ]
        },
        {
          "name": "_process_request",
          "line": 198,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "get_current_mood",
          "line": 241,
          "args": [
            "self"
          ]
        },
        {
          "name": "get_mood_history",
          "line": 249,
          "args": [
            "self",
            "limit"
          ]
        },
        {
          "name": "get_long_term_mood",
          "line": 263,
          "args": [
            "self",
            "time_window"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 346,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 361,
          "args": [
            "self"
          ]
        },
        {
          "name": "run",
          "line": 398,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 408,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "sys",
        "os",
        "pathlib.Path",
        "sys",
        "os",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "logging",
        "threading",
        "time",
        "psutil",
        "datetime.datetime",
        "collections.deque",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "common.config_manager.load_unified_config",
        "common.core.base_agent.BaseAgent",
        "common.env_helpers.get_env",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = config",
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = config",
        ".env",
        ".env",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [
        "health",
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def health_check(self):",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "main_pc_code/agents/model_manager_agent_test.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected an indented block after 'try' statement on line 3986 (<unknown>, line 3988)"
      ]
    },
    "main_pc_code/agents/emotion_synthesis_agent.py": {
      "classes": [
        {
          "name": "EmotionSynthesisAgent",
          "line": 43,
          "methods": [
            "__init__",
            "_add_emotional_markers",
            "synthesize_emotion",
            "handle_request",
            "cleanup",
            "_get_health_status",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 44,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_add_emotional_markers",
          "line": 96,
          "args": [
            "self",
            "text",
            "emotion",
            "intensity"
          ]
        },
        {
          "name": "synthesize_emotion",
          "line": 137,
          "args": [
            "self",
            "text",
            "emotion",
            "intensity"
          ]
        },
        {
          "name": "handle_request",
          "line": 161,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "cleanup",
          "line": 176,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 191,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 202,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "sys",
        "os",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "logging",
        "random",
        "datetime.datetime",
        "typing.Dict",
        "common.config_manager.load_unified_config",
        "time",
        "psutil",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        ".yaml"
      ],
      "health_checks": [
        "health",
        "def _get_health_status(self):",
        "def health_check(self):",
        "def _get_health_status(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/voice_profiling_agent.py": {
      "classes": [
        {
          "name": "VoiceProfilingAgent",
          "line": 39,
          "methods": [
            "__init__",
            "load_config",
            "load_voice_profiles",
            "save_voice_profile",
            "enroll_new_speaker",
            "identify_speaker",
            "update_voice_profile",
            "handle_request",
            "run",
            "cleanup",
            "_get_health_status",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 40,
          "args": [
            "self"
          ]
        },
        {
          "name": "load_config",
          "line": 78,
          "args": [
            "self"
          ]
        },
        {
          "name": "load_voice_profiles",
          "line": 126,
          "args": [
            "self"
          ]
        },
        {
          "name": "save_voice_profile",
          "line": 138,
          "args": [
            "self",
            "user_id",
            "profile_data"
          ]
        },
        {
          "name": "enroll_new_speaker",
          "line": 149,
          "args": [
            "self",
            "user_id",
            "audio_samples_list"
          ]
        },
        {
          "name": "identify_speaker",
          "line": 194,
          "args": [
            "self",
            "audio_data"
          ]
        },
        {
          "name": "update_voice_profile",
          "line": 245,
          "args": [
            "self",
            "user_id",
            "new_audio_sample"
          ]
        },
        {
          "name": "handle_request",
          "line": 265,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 310,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 326,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 365,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 381,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "sys",
        "os",
        "json",
        "uuid",
        "numpy",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "logging",
        "time",
        "psutil",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Tuple",
        "typing.Union",
        "typing.cast",
        "pathlib.Path",
        "common.config_manager.load_unified_config",
        "common.core.base_agent.BaseAgent",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.path_manager.PathManager",
        "common.env_helpers.get_env",
        "importlib.util",
        "sys",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = config_dict",
        "config = module.voice_personalization_config",
        "config = {",
        "config = {",
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = config_dict",
        "config = module.voice_personalization_config",
        "config = {",
        "config = {"
      ],
      "health_checks": [
        "health",
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def health_check(self):",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "main_pc_code/agents/face_recognition_agent.py": {
      "classes": [
        {
          "name": "EmotionState",
          "line": 101,
          "methods": []
        },
        {
          "name": "PrivacyZone",
          "line": 111,
          "methods": []
        },
        {
          "name": "KalmanTracker",
          "line": 120,
          "methods": [
            "__init__",
            "update",
            "get_bbox"
          ]
        },
        {
          "name": "EmotionAnalyzer",
          "line": 151,
          "methods": [
            "__init__",
            "_load_emotion_model",
            "_load_voice_model",
            "_start_voice_processing",
            "analyze_emotion",
            "get_emotion_trend"
          ]
        },
        {
          "name": "LivenessDetector",
          "line": 297,
          "methods": [
            "__init__",
            "detect_blink",
            "detect_motion",
            "detect_anti_spoofing",
            "is_live"
          ]
        },
        {
          "name": "PrivacyManager",
          "line": 369,
          "methods": [
            "__init__",
            "load_privacy_zones",
            "apply_privacy",
            "_is_in_zone",
            "apply_blur",
            "cleanup_old_data"
          ]
        },
        {
          "name": "FaceRecognitionAgent",
          "line": 427,
          "methods": [
            "__init__",
            "_perform_initialization",
            "_init_zmq",
            "_init_model",
            "_init_face_recognizer",
            "_init_emotion_analyzer",
            "_init_liveness_detector",
            "_apply_gpu_optimizations",
            "_apply_quantization",
            "run",
            "_handle_request",
            "_process_frame",
            "stop",
            "health_check",
            "_get_health_status"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 122,
          "args": [
            "self",
            "measurement_noise",
            "process_noise"
          ]
        },
        {
          "name": "update",
          "line": 136,
          "args": [
            "self",
            "bbox"
          ]
        },
        {
          "name": "get_bbox",
          "line": 145,
          "args": [
            "self",
            "width",
            "height"
          ]
        },
        {
          "name": "__init__",
          "line": 153,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_load_emotion_model",
          "line": 206,
          "args": [
            "self"
          ]
        },
        {
          "name": "_load_voice_model",
          "line": 214,
          "args": [
            "self"
          ]
        },
        {
          "name": "_start_voice_processing",
          "line": 219,
          "args": [
            "self"
          ]
        },
        {
          "name": "analyze_emotion",
          "line": 230,
          "args": [
            "self",
            "face_img",
            "track_id"
          ]
        },
        {
          "name": "get_emotion_trend",
          "line": 273,
          "args": [
            "self",
            "track_id"
          ]
        },
        {
          "name": "__init__",
          "line": 299,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "detect_blink",
          "line": 306,
          "args": [
            "self",
            "face_img",
            "track_id"
          ]
        },
        {
          "name": "detect_motion",
          "line": 314,
          "args": [
            "self",
            "face_img",
            "track_id"
          ]
        },
        {
          "name": "detect_anti_spoofing",
          "line": 346,
          "args": [
            "self",
            "face_img"
          ]
        },
        {
          "name": "is_live",
          "line": 354,
          "args": [
            "self",
            "face_img",
            "track_id"
          ]
        },
        {
          "name": "__init__",
          "line": 371,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "load_privacy_zones",
          "line": 378,
          "args": [
            "self"
          ]
        },
        {
          "name": "apply_privacy",
          "line": 383,
          "args": [
            "self",
            "frame",
            "bbox",
            "is_known"
          ]
        },
        {
          "name": "_is_in_zone",
          "line": 396,
          "args": [
            "self",
            "bbox",
            "zone"
          ]
        },
        {
          "name": "apply_blur",
          "line": 401,
          "args": [
            "self",
            "frame",
            "bbox",
            "blur_level"
          ]
        },
        {
          "name": "cleanup_old_data",
          "line": 413,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 428,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 473,
          "args": [
            "self"
          ]
        },
        {
          "name": "_init_zmq",
          "line": 501,
          "args": [
            "self"
          ]
        },
        {
          "name": "_init_model",
          "line": 524,
          "args": [
            "self"
          ]
        },
        {
          "name": "_init_face_recognizer",
          "line": 549,
          "args": [
            "self"
          ]
        },
        {
          "name": "_init_emotion_analyzer",
          "line": 564,
          "args": [
            "self"
          ]
        },
        {
          "name": "_init_liveness_detector",
          "line": 575,
          "args": [
            "self"
          ]
        },
        {
          "name": "_apply_gpu_optimizations",
          "line": 586,
          "args": [
            "self"
          ]
        },
        {
          "name": "_apply_quantization",
          "line": 597,
          "args": [
            "self"
          ]
        },
        {
          "name": "run",
          "line": 607,
          "args": [
            "self"
          ]
        },
        {
          "name": "_handle_request",
          "line": 647,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_process_frame",
          "line": 668,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "stop",
          "line": 697,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 707,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 737,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 765,
          "args": [
            "self"
          ]
        },
        {
          "name": "process_voice",
          "line": 221,
          "args": []
        }
      ],
      "imports": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "common.utils.path_manager.PathManager",
        "sys",
        "os",
        "time",
        "json",
        "logging",
        "traceback",
        "threading",
        "pathlib.Path",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.path_manager.PathManager",
        "common.env_helpers.get_env",
        "cv2",
        "numpy",
        "insightface",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "collections.defaultdict",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "typing.Any",
        "dataclasses.dataclass",
        "filterpy.kalman.KalmanFilter",
        "torch",
        "torch.nn",
        "torch.nn.functional",
        "torch.utils.data.DataLoader",
        "onnxruntime",
        "scipy.spatial.distance.cosine",
        "sounddevice",
        "librosa",
        "soundfile",
        "main_pc_code.utils.env_loader.get_env",
        "psutil",
        "main_pc_code.agents.error_publisher.ErrorPublisher",
        "sys",
        "os",
        "pathlib.Path",
        "traceback",
        "common_utils.error_handling.SafeExecutor"
      ],
      "ports": [
        5560
      ],
      "configurations": [
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "CONFIG = json.load(f)[\"face_recognition\"]",
        "CONFIG = {",
        "config = config",
        "config = config",
        "config = config",
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "CONFIG = json.load(f)[\"face_recognition\"]",
        "CONFIG = {",
        "config = config"
      ],
      "health_checks": [
        "health",
        "def health_check(self):",
        "def _get_health_status(self):",
        "def _get_health_status(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/streaming_tts_agent.py": {
      "classes": [
        {
          "name": "UltimateTTSAgent",
          "line": 78,
          "methods": [
            "__init__",
            "_register_service",
            "_connect_to_tts_service",
            "_async_initialize_tts_engines",
            "_add_to_cache",
            "split_into_sentences",
            "speak",
            "_speak_with_tts_service",
            "_speak_with_sapi",
            "_speak_with_pyttsx3",
            "_speak_with_console",
            "audio_playback_loop",
            "_send_health_updates",
            "_interrupt_listener",
            "_start_interrupt_thread",
            "_get_health_status",
            "run",
            "_update_service_status",
            "_shutdown",
            "health_check",
            "report_error"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 79,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_register_service",
          "line": 226,
          "args": [
            "self"
          ]
        },
        {
          "name": "_connect_to_tts_service",
          "line": 244,
          "args": [
            "self"
          ]
        },
        {
          "name": "_async_initialize_tts_engines",
          "line": 276,
          "args": [
            "self"
          ]
        },
        {
          "name": "_add_to_cache",
          "line": 314,
          "args": [
            "self",
            "key",
            "audio"
          ]
        },
        {
          "name": "split_into_sentences",
          "line": 320,
          "args": [
            "self",
            "text"
          ]
        },
        {
          "name": "speak",
          "line": 324,
          "args": [
            "self",
            "text"
          ]
        },
        {
          "name": "_speak_with_tts_service",
          "line": 340,
          "args": [
            "self",
            "text"
          ]
        },
        {
          "name": "_speak_with_sapi",
          "line": 373,
          "args": [
            "self",
            "text"
          ]
        },
        {
          "name": "_speak_with_pyttsx3",
          "line": 379,
          "args": [
            "self",
            "text"
          ]
        },
        {
          "name": "_speak_with_console",
          "line": 387,
          "args": [
            "self",
            "text"
          ]
        },
        {
          "name": "audio_playback_loop",
          "line": 393,
          "args": [
            "self"
          ]
        },
        {
          "name": "_send_health_updates",
          "line": 429,
          "args": [
            "self"
          ]
        },
        {
          "name": "_interrupt_listener",
          "line": 440,
          "args": [
            "self"
          ]
        },
        {
          "name": "_start_interrupt_thread",
          "line": 480,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 485,
          "args": [
            "self"
          ]
        },
        {
          "name": "run",
          "line": 496,
          "args": [
            "self"
          ]
        },
        {
          "name": "_update_service_status",
          "line": 620,
          "args": [
            "self",
            "status"
          ]
        },
        {
          "name": "_shutdown",
          "line": 635,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 673,
          "args": [
            "self"
          ]
        },
        {
          "name": "report_error",
          "line": 706,
          "args": [
            "self",
            "error_type",
            "message",
            "severity",
            "context"
          ]
        },
        {
          "name": "cleanup",
          "line": 731,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.path_manager.PathManager",
        "zmq",
        "json",
        "time",
        "logging",
        "sys",
        "logging",
        "os",
        "threading",
        "queue",
        "numpy",
        "sounddevice",
        "pathlib.Path",
        "hashlib",
        "tempfile",
        "re",
        "main_pc_code.utils.service_discovery_client.register_service",
        "main_pc_code.utils.service_discovery_client.get_service_address",
        "main_pc_code.utils.service_discovery_client.discover_service",
        "main_pc_code.utils.env_loader.get_env",
        "pickle",
        "collections.OrderedDict",
        "traceback",
        "pyttsx3",
        "win32com.client"
      ],
      "ports": [],
      "configurations": [
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        ".env",
        ".env",
        ".env",
        ".JSON",
        ".yaml"
      ],
      "health_checks": [
        "health",
        "def _send_health_updates(self):",
        "def _get_health_status(self):",
        "def health_check(self):",
        "def _get_health_status(self):",
        "def _update_service_status(self, status):"
      ],
      "errors": []
    },
    "main_pc_code/agents/model_manager_agent_day4_optimized.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected an indented block after 'try' statement on line 3991 (<unknown>, line 3993)"
      ]
    },
    "main_pc_code/agents/service_registry_agent.py": {
      "classes": [
        {
          "name": "RegistryBackend",
          "line": 102,
          "methods": [
            "get",
            "set",
            "list_agents",
            "close"
          ]
        },
        {
          "name": "MemoryBackend",
          "line": 122,
          "methods": [
            "__init__",
            "get",
            "set",
            "list_agents",
            "close"
          ]
        },
        {
          "name": "RedisBackend",
          "line": 145,
          "methods": [
            "__init__",
            "_key",
            "get",
            "set",
            "list_agents",
            "close"
          ]
        },
        {
          "name": "ServiceRegistryAgent",
          "line": 194,
          "methods": [
            "__init__",
            "handle_request",
            "_register_agent",
            "_get_agent_endpoint",
            "cleanup"
          ]
        },
        {
          "name": "_H",
          "line": 80,
          "methods": [
            "do_GET",
            "log_message"
          ]
        }
      ],
      "functions": [
        {
          "name": "_start_http_health_server",
          "line": 76,
          "args": [
            "port"
          ]
        },
        {
          "name": "get",
          "line": 105,
          "args": [
            "self",
            "agent_id"
          ]
        },
        {
          "name": "set",
          "line": 109,
          "args": [
            "self",
            "agent_id",
            "data"
          ]
        },
        {
          "name": "list_agents",
          "line": 113,
          "args": [
            "self"
          ]
        },
        {
          "name": "close",
          "line": 117,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 125,
          "args": [
            "self"
          ]
        },
        {
          "name": "get",
          "line": 128,
          "args": [
            "self",
            "agent_id"
          ]
        },
        {
          "name": "set",
          "line": 132,
          "args": [
            "self",
            "agent_id",
            "data"
          ]
        },
        {
          "name": "list_agents",
          "line": 136,
          "args": [
            "self"
          ]
        },
        {
          "name": "close",
          "line": 140,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 151,
          "args": [
            "self",
            "redis_url",
            "prefix"
          ]
        },
        {
          "name": "_key",
          "line": 163,
          "args": [
            "self",
            "agent_id"
          ]
        },
        {
          "name": "get",
          "line": 167,
          "args": [
            "self",
            "agent_id"
          ]
        },
        {
          "name": "set",
          "line": 177,
          "args": [
            "self",
            "agent_id",
            "data"
          ]
        },
        {
          "name": "list_agents",
          "line": 183,
          "args": [
            "self"
          ]
        },
        {
          "name": "close",
          "line": 188,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 197,
          "args": [
            "self",
            "backend",
            "redis_url"
          ]
        },
        {
          "name": "handle_request",
          "line": 225,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_register_agent",
          "line": 256,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "_get_agent_endpoint",
          "line": 286,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "cleanup",
          "line": 300,
          "args": [
            "self"
          ]
        },
        {
          "name": "_dumps",
          "line": 32,
          "args": [
            "obj"
          ]
        },
        {
          "name": "_loads",
          "line": 37,
          "args": [
            "data"
          ]
        },
        {
          "name": "do_GET",
          "line": 81,
          "args": [
            "self"
          ]
        },
        {
          "name": "log_message",
          "line": 93,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "argparse",
        "logging",
        "os",
        "time",
        "threading",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Protocol",
        "typing.runtime_checkable",
        "common.core.base_agent.BaseAgent",
        "common.utils.data_models.AgentRegistration",
        "common.env_helpers.get_env",
        "common.pools.redis_pool.get_redis_client_sync",
        "orjson",
        "http.server.BaseHTTPRequestHandler",
        "http.server.HTTPServer",
        "urllib.parse",
        "json"
      ],
      "ports": [
        6379
      ],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "def _start_http_health_server(port: int):"
      ],
      "errors": []
    },
    "main_pc_code/agents/core_speech_output/streaming_tts_agent_day4_optimized.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 28)"
      ]
    },
    "main_pc_code/agents/core_speech_output/streaming_tts_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 23)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/jarvis_memory_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected an indented block after 'try' statement on line 12 (<unknown>, line 13)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/web_utils/web_scraper_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 105)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/translation/translator_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 405)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/memory_reasoning/learning_mode_agent.py": {
      "classes": [
        {
          "name": "LearningModeAgent",
          "line": 37,
          "methods": [
            "broadcast_learning_suggestion",
            "__init__",
            "load_learning_data",
            "save_learning_data",
            "handle_query",
            "run",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "broadcast_learning_suggestion",
          "line": 38,
          "args": [
            "self",
            "text",
            "user",
            "emotion"
          ]
        },
        {
          "name": "__init__",
          "line": 41,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "load_learning_data",
          "line": 53,
          "args": [
            "self"
          ]
        },
        {
          "name": "save_learning_data",
          "line": 59,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_query",
          "line": 63,
          "args": [
            "self",
            "query"
          ]
        },
        {
          "name": "run",
          "line": 92,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 104,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 141,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "main_pc_code.src.core.base_agent.BaseAgent",
        "sys",
        "pathlib.Path",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "zmq",
        "json",
        "os",
        "main_pc_code.agents.proactive_agent_interface.send_proactive_event",
        "threading",
        "time",
        "logging",
        "psutil",
        "datetime.datetime",
        "common.env_helpers.get_env",
        "common.utils.path_manager.PathManager"
      ],
      "ports": [
        5598
      ],
      "configurations": [
        ".env",
        ".json"
      ],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/memory_reasoning/unified_memory_reasoning_agent.py": {
      "classes": [
        {
          "name": "UnifiedMemoryReasoningAgent",
          "line": 22,
          "methods": [
            "__init__",
            "_process_requests",
            "_handle_request",
            "_store_memory",
            "_retrieve_memory",
            "_update_context",
            "_get_context",
            "_store_error_pattern",
            "_get_error_patterns",
            "_health_check",
            "shutdown",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 23,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_process_requests",
          "line": 45,
          "args": [
            "self"
          ]
        },
        {
          "name": "_handle_request",
          "line": 55,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_store_memory",
          "line": 73,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_retrieve_memory",
          "line": 86,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_update_context",
          "line": 100,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_get_context",
          "line": 106,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_store_error_pattern",
          "line": 114,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_get_error_patterns",
          "line": 122,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_health_check",
          "line": 130,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "shutdown",
          "line": 141,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 149,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 189,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "main_pc_code.src.core.base_agent.BaseAgent",
        "zmq",
        "json",
        "logging",
        "threading",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "time",
        "psutil",
        "datetime.datetime"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "health",
        "def _health_check(self, message: Dict) -> Dict:",
        "def health_check(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/memory_reasoning/llm_task_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 28)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/memory_reasoning/context_summarizer_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 160)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/memory_reasoning/contextual_memory_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected an indented block after 'try' statement on line 15 (<unknown>, line 16)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/memory_reasoning/chain_of_thought_agent.py": {
      "classes": [
        {
          "name": "ChainOfThoughtAgent",
          "line": 23,
          "methods": [
            "__init__",
            "_process_requests",
            "_handle_request",
            "_use_chain_of_thought",
            "_use_tree_of_thought",
            "_generate_step_result",
            "_generate_tree_step_result",
            "_start_reasoning",
            "_continue_reasoning",
            "_get_reasoning_state",
            "_store_reasoning_pattern",
            "_get_reasoning_patterns",
            "_health_check",
            "shutdown",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 24,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_process_requests",
          "line": 75,
          "args": [
            "self"
          ]
        },
        {
          "name": "_handle_request",
          "line": 85,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_use_chain_of_thought",
          "line": 104,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_use_tree_of_thought",
          "line": 158,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_generate_step_result",
          "line": 212,
          "args": [
            "self",
            "step_name",
            "prompt",
            "code_context"
          ]
        },
        {
          "name": "_generate_tree_step_result",
          "line": 245,
          "args": [
            "self",
            "step_name",
            "prompt",
            "code_context"
          ]
        },
        {
          "name": "_start_reasoning",
          "line": 281,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_continue_reasoning",
          "line": 311,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_get_reasoning_state",
          "line": 350,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_store_reasoning_pattern",
          "line": 362,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_get_reasoning_patterns",
          "line": 380,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "_health_check",
          "line": 393,
          "args": [
            "self",
            "message"
          ]
        },
        {
          "name": "shutdown",
          "line": 403,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 412,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 452,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "main_pc_code.src.core.base_agent.BaseAgent",
        "zmq",
        "json",
        "logging",
        "threading",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "main_pc_code.agents.memory_client.MemoryClient",
        "time",
        "psutil",
        "datetime.datetime"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "health",
        "def _health_check(self, message: Dict) -> Dict:",
        "def health_check(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/misc/test_generator_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 223)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/tts/tts_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected an indented block after 'try' statement on line 14 (<unknown>, line 15)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/tts/streaming_tts_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 115)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/model_management/model_manager_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 38)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/model_management/model_manager_agent_gguf_connector.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 21)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/planning_utils/planner_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 245)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/planning_utils/executor_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected an indented block after 'if' statement on line 131 (<unknown>, line 134)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/planning_utils/chain_of_thought_agent.py": {
      "classes": [
        {
          "name": "ChainOfThoughtAgent",
          "line": 39,
          "methods": [
            "__init__",
            "connect_cga",
            "send_to_llm",
            "generate_problem_breakdown",
            "generate_solution_for_step",
            "verify_solution",
            "refine_solution",
            "generate_combined_solution",
            "generate_with_cot",
            "handle_query",
            "run",
            "stop",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "send_cot_request",
          "line": 451,
          "args": [
            "request",
            "port"
          ]
        },
        {
          "name": "generate_code_with_cot",
          "line": 477,
          "args": [
            "user_request",
            "code_context"
          ]
        },
        {
          "name": "main",
          "line": 500,
          "args": []
        },
        {
          "name": "__init__",
          "line": 40,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "connect_cga",
          "line": 53,
          "args": [
            "self"
          ]
        },
        {
          "name": "send_to_llm",
          "line": 62,
          "args": [
            "self",
            "prompt",
            "model_id",
            "system_prompt",
            "max_tokens",
            "temperature"
          ]
        },
        {
          "name": "generate_problem_breakdown",
          "line": 98,
          "args": [
            "self",
            "user_request",
            "code_context"
          ]
        },
        {
          "name": "generate_solution_for_step",
          "line": 134,
          "args": [
            "self",
            "step",
            "previous_steps_info",
            "code_context"
          ]
        },
        {
          "name": "verify_solution",
          "line": 164,
          "args": [
            "self",
            "step",
            "solution",
            "code_context"
          ]
        },
        {
          "name": "refine_solution",
          "line": 206,
          "args": [
            "self",
            "step",
            "original_solution",
            "verification_results",
            "code_context"
          ]
        },
        {
          "name": "generate_combined_solution",
          "line": 233,
          "args": [
            "self",
            "steps_with_solutions",
            "user_request",
            "code_context"
          ]
        },
        {
          "name": "generate_with_cot",
          "line": 261,
          "args": [
            "self",
            "user_request",
            "code_context"
          ]
        },
        {
          "name": "handle_query",
          "line": 322,
          "args": [
            "self",
            "query"
          ]
        },
        {
          "name": "run",
          "line": 384,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop",
          "line": 409,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 417,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 515,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "main_pc_code.src.core.base_agent.BaseAgent",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "zmq",
        "json",
        "os",
        "threading",
        "time",
        "logging",
        "re",
        "datetime.datetime",
        "psutil",
        "datetime.datetime",
        "common.env_helpers.get_env",
        "common.utils.path_manager.PathManager"
      ],
      "ports": [
        5604,
        5613
      ],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/_trash_2025-06-13/archive/web/unified_web_agent_main_pc.py": {
      "classes": [
        {
          "name": "UnifiedWebAgent",
          "line": 38,
          "methods": [
            "__init__",
            "_setup_logging",
            "_init_selenium",
            "search_web",
            "scrape_webpage",
            "navigate_web",
            "extract_content",
            "automate_web_task",
            "close",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 42,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_setup_logging",
          "line": 54,
          "args": [
            "self"
          ]
        },
        {
          "name": "_init_selenium",
          "line": 78,
          "args": [
            "self"
          ]
        },
        {
          "name": "search_web",
          "line": 93,
          "args": [
            "self",
            "query",
            "num_results"
          ]
        },
        {
          "name": "scrape_webpage",
          "line": 122,
          "args": [
            "self",
            "url"
          ]
        },
        {
          "name": "navigate_web",
          "line": 151,
          "args": [
            "self",
            "url"
          ]
        },
        {
          "name": "extract_content",
          "line": 168,
          "args": [
            "self",
            "selector"
          ]
        },
        {
          "name": "automate_web_task",
          "line": 185,
          "args": [
            "self",
            "task"
          ]
        },
        {
          "name": "close",
          "line": 219,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 228,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 286,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "main_pc_code.src.core.base_agent.BaseAgent",
        "sys",
        "os",
        "logging",
        "json",
        "time",
        "pathlib.Path",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Union",
        "requests",
        "bs4.BeautifulSoup",
        "selenium.webdriver",
        "selenium.webdriver.chrome.options.Options",
        "selenium.webdriver.common.by.By",
        "selenium.webdriver.support.ui.WebDriverWait",
        "selenium.webdriver.support.expected_conditions",
        "psutil",
        "datetime.datetime",
        "common.utils.path_manager.PathManager"
      ],
      "ports": [],
      "configurations": [
        "config = config or {}",
        "config = config or {}",
        ".json"
      ],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/core_memory/context_summarizer_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 160)"
      ]
    },
    "main_pc_code/agents/needtoverify/auto_fixer_agent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 135)"
      ]
    },
    "main_pc_code/agents/needtoverify/agent_utils.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected 'except' or 'finally' block (<unknown>, line 512)"
      ]
    },
    "main_pc_code/agents/needtoverify/context_bridge_agent.py": {
      "classes": [
        {
          "name": "ContextBridgeAgent",
          "line": 40,
          "methods": [
            "__init__",
            "connect_to_face_recognition",
            "connect_to_interpreter",
            "handle_face_recognition_event",
            "switch_context",
            "notify_interpreter",
            "run",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "line": 248,
          "args": []
        },
        {
          "name": "__init__",
          "line": 43,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "connect_to_face_recognition",
          "line": 65,
          "args": [
            "self"
          ]
        },
        {
          "name": "connect_to_interpreter",
          "line": 78,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_face_recognition_event",
          "line": 90,
          "args": [
            "self",
            "event_data"
          ]
        },
        {
          "name": "switch_context",
          "line": 123,
          "args": [
            "self",
            "speaker",
            "confidence",
            "emotion"
          ]
        },
        {
          "name": "notify_interpreter",
          "line": 146,
          "args": [
            "self",
            "speaker",
            "emotion"
          ]
        },
        {
          "name": "run",
          "line": 165,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 215,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 256,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "zmq",
        "json",
        "time",
        "logging",
        "threading",
        "os",
        "sys",
        "traceback",
        "main_pc_code.agents.context_manager.create_context_manager",
        "main_pc_code.agents.context_manager.add_to_context",
        "main_pc_code.agents.context_manager.get_context",
        "main_pc_code.agents.context_manager.clear_context",
        "psutil",
        "datetime.datetime",
        "common.env_helpers.get_env"
      ],
      "ports": [
        5595,
        5596,
        5557
      ],
      "configurations": [
        ".env",
        ".JSON"
      ],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/needtoverify/autonomous_agent_framework.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 106)"
      ]
    },
    "main_pc_code/agents/needtoverify/filesystem_assistant_agent.py": {
      "classes": [
        {
          "name": "FileSystemAssistantAgent",
          "line": 40,
          "methods": [
            "__init__",
            "handle_query",
            "run",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 41,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "handle_query",
          "line": 52,
          "args": [
            "self",
            "query"
          ]
        },
        {
          "name": "run",
          "line": 102,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 114,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 151,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.core.base_agent.BaseAgent",
        "zmq",
        "common.utils.async_io.read_file_async",
        "common.utils.async_io.write_file_async",
        "common.utils.async_io.read_json_async",
        "common.utils.async_io.write_json_async",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "os",
        "threading",
        "logging",
        "time",
        "psutil",
        "datetime.datetime",
        "common.env_helpers.get_env",
        "common.utils.path_manager.PathManager",
        "orjson",
        "json"
      ],
      "ports": [
        5594
      ],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "main_pc_code/tests/test_vram_optimizer_agent.py": {
      "classes": [
        {
          "name": "TestVRAMOptimizerAgent",
          "line": 32,
          "methods": [
            "setUp",
            "tearDown",
            "test_initialization",
            "test_health_check",
            "test_unload_model",
            "test_optimize_memory",
            "test_report_vram_status"
          ]
        }
      ],
      "functions": [
        {
          "name": "setUp",
          "line": 36,
          "args": [
            "self",
            "mock_discover_service"
          ]
        },
        {
          "name": "tearDown",
          "line": 63,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_initialization",
          "line": 69,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_health_check",
          "line": 77,
          "args": [
            "self",
            "mock_socket"
          ]
        },
        {
          "name": "test_unload_model",
          "line": 93,
          "args": [
            "self",
            "mock_send"
          ]
        },
        {
          "name": "test_optimize_memory",
          "line": 111,
          "args": [
            "self",
            "mock_get_models"
          ]
        },
        {
          "name": "test_report_vram_status",
          "line": 141,
          "args": [
            "self",
            "mock_send"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "unittest",
        "json",
        "zmq",
        "logging",
        "sys",
        "os",
        "unittest.mock.MagicMock",
        "unittest.mock.patch",
        "sys",
        "os",
        "common.utils.path_env.get_project_root",
        "common.utils.path_env.get_main_pc_code",
        "main_pc_code.agents.vram_optimizer_agent.VRAMOptimizerAgent",
        "common.env_helpers.get_env"
      ],
      "ports": [
        9999
      ],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "def test_health_check(self, mock_socket):",
        "def test_report_vram_status(self, mock_send):"
      ],
      "errors": []
    },
    "main_pc_code/tests/test_unified_planning_agent.py": {
      "classes": [
        {
          "name": "TestUnifiedPlanningAgent",
          "line": 30,
          "methods": [
            "setUp",
            "tearDown",
            "test_initialization",
            "test_health_check",
            "test_create_plan",
            "test_update_plan",
            "test_execute_plan"
          ]
        }
      ],
      "functions": [
        {
          "name": "setUp",
          "line": 34,
          "args": [
            "self",
            "mock_discover_service"
          ]
        },
        {
          "name": "tearDown",
          "line": 56,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_initialization",
          "line": 61,
          "args": [
            "self"
          ]
        },
        {
          "name": "test_health_check",
          "line": 69,
          "args": [
            "self",
            "mock_socket"
          ]
        },
        {
          "name": "test_create_plan",
          "line": 84,
          "args": [
            "self",
            "mock_handle_message"
          ]
        },
        {
          "name": "test_update_plan",
          "line": 105,
          "args": [
            "self",
            "mock_handle_message"
          ]
        },
        {
          "name": "test_execute_plan",
          "line": 128,
          "args": [
            "self",
            "mock_handle_message"
          ]
        }
      ],
      "imports": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "unittest",
        "json",
        "zmq",
        "logging",
        "sys",
        "os",
        "unittest.mock.MagicMock",
        "unittest.mock.patch",
        "common.utils.path_env.get_project_root",
        "common.utils.path_env.get_main_pc_code",
        "main_pc_code.agents.unified_planning_agent.UnifiedPlanningAgent",
        "common.env_helpers.get_env"
      ],
      "ports": [
        9999
      ],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "def test_health_check(self, mock_socket):"
      ],
      "errors": []
    },
    "main_pc_code/NEWMUSTFOLLOW/copy_agent_files.py": {
      "classes": [],
      "functions": [
        {
          "name": "load_config",
          "line": 28,
          "args": []
        },
        {
          "name": "ensure_directory",
          "line": 43,
          "args": [
            "directory"
          ]
        },
        {
          "name": "copy_file",
          "line": 53,
          "args": [
            "source",
            "target_dir"
          ]
        },
        {
          "name": "create_init_file",
          "line": 70,
          "args": [
            "directory"
          ]
        },
        {
          "name": "update_config_with_local_paths",
          "line": 82,
          "args": [
            "config"
          ]
        },
        {
          "name": "main",
          "line": 105,
          "args": []
        }
      ],
      "imports": [
        "os",
        "sys",
        "yaml",
        "shutil",
        "pathlib.Path"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = {",
        "config = load_config()",
        "config = update_config_with_local_paths(config)",
        "config = yaml.safe_load(f)",
        "config = {",
        "config = load_config()",
        "config = update_config_with_local_paths(config)",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/NEWMUSTFOLLOW/find_agent_files.py": {
      "classes": [],
      "functions": [
        {
          "name": "find_config_file",
          "line": 33,
          "args": []
        },
        {
          "name": "load_config",
          "line": 52,
          "args": []
        },
        {
          "name": "find_files_by_pattern",
          "line": 66,
          "args": [
            "root_dir",
            "pattern"
          ]
        },
        {
          "name": "find_agent_file",
          "line": 79,
          "args": [
            "agent_name"
          ]
        },
        {
          "name": "main",
          "line": 97,
          "args": []
        }
      ],
      "imports": [
        "os",
        "sys",
        "yaml",
        "argparse",
        "pathlib.Path",
        "sys",
        "os",
        "common.utils.path_manager.PathManager"
      ],
      "ports": [],
      "configurations": [
        "config = yaml.safe_load(f)",
        "config = load_config()",
        "config = yaml.safe_load(f)",
        "config = load_config()",
        ".yaml",
        ".yaml",
        ".yaml",
        ".yaml",
        ".yaml"
      ],
      "health_checks": [],
      "errors": []
    },
    "backups/week4_second_migration/tutoring_agent_original.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unmatched ')' (<unknown>, line 69)"
      ]
    },
    "backups/task2d_pilot_agent_backups/unifiedutilsagent_original.py": {
      "classes": [
        {
          "name": "UnifiedUtilsAgent",
          "line": 85,
          "methods": [
            "__init__",
            "setup_error_reporting",
            "report_error",
            "cleanup_temp_files",
            "cleanup_logs",
            "cleanup_cache",
            "cleanup_browser_cache",
            "_get_dir_size",
            "run_windows_disk_cleanup",
            "cleanup_system",
            "_get_health_status",
            "handle_request",
            "run",
            "cleanup",
            "stop",
            "connect_to_main_pc_service"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_network_config",
          "line": 53,
          "args": []
        },
        {
          "name": "__init__",
          "line": 89,
          "args": [
            "self",
            "port",
            "health_check_port",
            "host"
          ]
        },
        {
          "name": "setup_error_reporting",
          "line": 108,
          "args": [
            "self"
          ]
        },
        {
          "name": "report_error",
          "line": 120,
          "args": [
            "self",
            "error_type",
            "message",
            "severity"
          ]
        },
        {
          "name": "cleanup_temp_files",
          "line": 139,
          "args": [
            "self",
            "temp_dir"
          ]
        },
        {
          "name": "cleanup_logs",
          "line": 157,
          "args": [
            "self",
            "log_dir",
            "days_old"
          ]
        },
        {
          "name": "cleanup_cache",
          "line": 176,
          "args": [
            "self",
            "cache_dir",
            "days_old"
          ]
        },
        {
          "name": "cleanup_browser_cache",
          "line": 195,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_dir_size",
          "line": 241,
          "args": [
            "self",
            "dir_path"
          ]
        },
        {
          "name": "run_windows_disk_cleanup",
          "line": 250,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup_system",
          "line": 273,
          "args": [
            "self"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 285,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_request",
          "line": 302,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 321,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 353,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop",
          "line": 390,
          "args": [
            "self"
          ]
        },
        {
          "name": "connect_to_main_pc_service",
          "line": 393,
          "args": [
            "self",
            "service_name"
          ]
        }
      ],
      "imports": [
        "os",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "yaml",
        "platform",
        "shutil",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "pathlib.Path",
        "subprocess",
        "sys",
        "zmq",
        "json",
        "threading",
        "time",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "pathlib.Path",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        "config = Config().get_config()",
        "config = None",
        "config = load_network_config()",
        "config = Config().get_config()",
        "config = None",
        "config = load_network_config()",
        ".env",
        ".env",
        ".env",
        ".env"
      ],
      "health_checks": [
        "def __init__(self, port=None, health_check_port=None, host=\"0.0.0.0\"):",
        "def _get_health_status(self) -> Dict[str, Any]:",
        "def _get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "backups/week4_mma_migration/model_manager_agent_original.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: expected an indented block after 'try' statement on line 3990 (<unknown>, line 3992)"
      ]
    },
    "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/distributed/rpc/_testing/faulty_agent_backend_registry.py": {
      "classes": [],
      "functions": [
        {
          "name": "_faulty_tensorpipe_construct_rpc_backend_options_handler",
          "line": 7,
          "args": [
            "rpc_timeout",
            "init_method",
            "num_worker_threads",
            "messages_to_fail",
            "messages_to_delay",
            "num_fail_sends"
          ]
        },
        {
          "name": "_faulty_tensorpipe_init_backend_handler",
          "line": 28,
          "args": [
            "store",
            "name",
            "rank",
            "world_size",
            "rpc_backend_options"
          ]
        }
      ],
      "imports": [
        "src.core.base_agent.BaseAgent",
        "torch.distributed",
        "torch.distributed.rpc",
        "torch.distributed.rpc.api"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/distributed/elastic/agent/server/local_elastic_agent.py": {
      "classes": [
        {
          "name": "LocalElasticAgent",
          "line": 50,
          "methods": [
            "__init__",
            "_make_log_dir",
            "_setup_local_watchdog",
            "_get_fq_hostname",
            "_log_watchdog_event",
            "_stop_workers",
            "_start_workers",
            "_shutdown",
            "_monitor_workers",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 130,
          "args": [
            "self",
            "spec",
            "start_method",
            "exit_barrier_timeout",
            "log_dir"
          ]
        },
        {
          "name": "_make_log_dir",
          "line": 144,
          "args": [
            "self",
            "log_dir",
            "rdzv_run_id"
          ]
        },
        {
          "name": "_setup_local_watchdog",
          "line": 151,
          "args": [
            "self",
            "envs"
          ]
        },
        {
          "name": "_get_fq_hostname",
          "line": 175,
          "args": [
            "self"
          ]
        },
        {
          "name": "_log_watchdog_event",
          "line": 178,
          "args": [
            "self",
            "name",
            "request"
          ]
        },
        {
          "name": "_stop_workers",
          "line": 219,
          "args": [
            "self",
            "worker_group"
          ]
        },
        {
          "name": "_start_workers",
          "line": 225,
          "args": [
            "self",
            "worker_group"
          ]
        },
        {
          "name": "_shutdown",
          "line": 288,
          "args": [
            "self",
            "death_sig"
          ]
        },
        {
          "name": "_monitor_workers",
          "line": 298,
          "args": [
            "self",
            "worker_group"
          ]
        },
        {
          "name": "health_check",
          "line": 336,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "src.core.base_agent.BaseAgent",
        "json",
        "os",
        "shutil",
        "signal",
        "socket",
        "tempfile",
        "uuid",
        "typing.Any",
        "typing.Dict",
        "typing.Optional",
        "typing.Tuple",
        "torch.distributed.elastic.timer",
        "torch.distributed.elastic.events",
        "torch.distributed.elastic.agent.server.api.RunResult",
        "torch.distributed.elastic.agent.server.api.SimpleElasticAgent",
        "torch.distributed.elastic.agent.server.api.WorkerGroup",
        "torch.distributed.elastic.agent.server.api.WorkerSpec",
        "torch.distributed.elastic.agent.server.api.WorkerState",
        "torch.distributed.elastic.events.api.EventMetadataValue",
        "torch.distributed.elastic.metrics.api.prof",
        "torch.distributed.elastic.multiprocessing.PContext",
        "torch.distributed.elastic.multiprocessing.start_processes",
        "torch.distributed.elastic.utils.macros",
        "torch.distributed.elastic.utils.logging.get_logger",
        "time",
        "psutil",
        "datetime.datetime"
      ],
      "ports": [],
      "configurations": [
        ".env",
        ".env"
      ],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/rpc_agent_test_fixture.py": {
      "classes": [
        {
          "name": "RpcAgentTestFixture",
          "line": 11,
          "methods": [
            "world_size",
            "init_method",
            "file_init_method",
            "rpc_backend",
            "rpc_backend_options",
            "setup_fault_injection",
            "get_shutdown_error_regex",
            "get_timeout_error_regex",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "world_size",
          "line": 13,
          "args": [
            "self"
          ]
        },
        {
          "name": "init_method",
          "line": 17,
          "args": [
            "self"
          ]
        },
        {
          "name": "file_init_method",
          "line": 27,
          "args": [
            "self"
          ]
        },
        {
          "name": "rpc_backend",
          "line": 34,
          "args": [
            "self"
          ]
        },
        {
          "name": "rpc_backend_options",
          "line": 39,
          "args": [
            "self"
          ]
        },
        {
          "name": "setup_fault_injection",
          "line": 42,
          "args": [
            "self",
            "faulty_messages",
            "messages_to_delay"
          ]
        },
        {
          "name": "get_shutdown_error_regex",
          "line": 53,
          "args": [
            "self"
          ]
        },
        {
          "name": "get_timeout_error_regex",
          "line": 62,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 70,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "src.core.base_agent.BaseAgent",
        "os",
        "abc.ABC",
        "abc.abstractmethod",
        "torch.testing._internal.dist_utils",
        "time",
        "psutil",
        "datetime.datetime"
      ],
      "ports": [],
      "configurations": [
        ".env",
        ".env",
        ".env"
      ],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/faulty_agent_rpc_test.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 13)"
      ]
    },
    "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/faulty_rpc_agent_test_fixture.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 5)"
      ]
    },
    "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/tensorpipe_rpc_agent_test_fixture.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 7)"
      ]
    },
    "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/transformers/tools/agent_types.py": {
      "classes": [
        {
          "name": "AgentType",
          "line": 42,
          "methods": [
            "__init__",
            "__str__",
            "to_raw",
            "to_string"
          ]
        },
        {
          "name": "AgentText",
          "line": 72,
          "methods": [
            "to_raw",
            "to_string"
          ]
        },
        {
          "name": "AgentImage",
          "line": 84,
          "methods": [
            "__init__",
            "_ipython_display_",
            "to_raw",
            "to_string"
          ]
        },
        {
          "name": "AgentAudio",
          "line": 156,
          "methods": [
            "__init__",
            "_ipython_display_",
            "to_raw",
            "to_string"
          ]
        }
      ],
      "functions": [
        {
          "name": "handle_agent_inputs",
          "line": 221,
          "args": []
        },
        {
          "name": "handle_agent_outputs",
          "line": 227,
          "args": [
            "outputs",
            "output_types"
          ]
        },
        {
          "name": "__init__",
          "line": 53,
          "args": [
            "self",
            "value"
          ]
        },
        {
          "name": "__str__",
          "line": 56,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_raw",
          "line": 59,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_string",
          "line": 65,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_raw",
          "line": 77,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_string",
          "line": 80,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 89,
          "args": [
            "self",
            "value"
          ]
        },
        {
          "name": "_ipython_display_",
          "line": 108,
          "args": [
            "self",
            "include",
            "exclude"
          ]
        },
        {
          "name": "to_raw",
          "line": 116,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_string",
          "line": 127,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 161,
          "args": [
            "self",
            "value",
            "samplerate"
          ]
        },
        {
          "name": "_ipython_display_",
          "line": 179,
          "args": [
            "self",
            "include",
            "exclude"
          ]
        },
        {
          "name": "to_raw",
          "line": 187,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_string",
          "line": 199,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 281,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "src.core.base_agent.BaseAgent",
        "os",
        "pathlib",
        "tempfile",
        "uuid",
        "numpy",
        "utils.is_soundfile_availble",
        "utils.is_torch_available",
        "utils.is_vision_available",
        "utils.logging",
        "PIL.Image",
        "PIL.Image",
        "PIL.Image.Image",
        "torch",
        "soundfile",
        "IPython.display.Image",
        "IPython.display.display",
        "IPython.display.Audio",
        "IPython.display.display"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/transformers/tools/evaluate_agent.py": {
      "classes": [
        {
          "name": "Problem",
          "line": 105,
          "methods": [
            "__init__"
          ]
        }
      ],
      "functions": [
        {
          "name": "classifier",
          "line": 23,
          "args": [
            "text",
            "labels"
          ]
        },
        {
          "name": "translator",
          "line": 27,
          "args": [
            "text",
            "src_lang",
            "tgt_lang"
          ]
        },
        {
          "name": "speaker",
          "line": 31,
          "args": [
            "text"
          ]
        },
        {
          "name": "transcriber",
          "line": 35,
          "args": [
            "audio"
          ]
        },
        {
          "name": "image_generator",
          "line": 41,
          "args": [
            "prompt"
          ]
        },
        {
          "name": "image_captioner",
          "line": 45,
          "args": [
            "image"
          ]
        },
        {
          "name": "image_transformer",
          "line": 51,
          "args": [
            "image",
            "prompt"
          ]
        },
        {
          "name": "question_answerer",
          "line": 57,
          "args": [
            "text",
            "question"
          ]
        },
        {
          "name": "image_qa",
          "line": 61,
          "args": [
            "image",
            "question"
          ]
        },
        {
          "name": "text_downloader",
          "line": 67,
          "args": [
            "url"
          ]
        },
        {
          "name": "summarizer",
          "line": 71,
          "args": [
            "text"
          ]
        },
        {
          "name": "video_generator",
          "line": 75,
          "args": [
            "prompt",
            "seconds"
          ]
        },
        {
          "name": "document_qa",
          "line": 79,
          "args": [
            "image",
            "question"
          ]
        },
        {
          "name": "image_segmenter",
          "line": 83,
          "args": [
            "image",
            "prompt"
          ]
        },
        {
          "name": "get_theoretical_tools",
          "line": 401,
          "args": [
            "agent_answer",
            "theoretical_answer",
            "code_answer"
          ]
        },
        {
          "name": "evaluate_code",
          "line": 417,
          "args": [
            "code",
            "inputs",
            "state",
            "verbose",
            "return_interpretor_error"
          ]
        },
        {
          "name": "score_code",
          "line": 444,
          "args": [
            "agent_answer",
            "theoretical_answer",
            "verbose"
          ]
        },
        {
          "name": "evaluate_one_result",
          "line": 463,
          "args": [
            "explanation",
            "code",
            "agent_answer",
            "theoretical_answer",
            "answer",
            "verbose"
          ]
        },
        {
          "name": "evaluate_agent",
          "line": 506,
          "args": [
            "agent",
            "batch_size",
            "verbose",
            "return_errors"
          ]
        },
        {
          "name": "evaluate_chat_agent",
          "line": 595,
          "args": [
            "agent",
            "verbose",
            "return_errors"
          ]
        },
        {
          "name": "__init__",
          "line": 121,
          "args": [
            "self",
            "task",
            "inputs",
            "answer"
          ]
        },
        {
          "name": "health_check",
          "line": 696,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "src.core.base_agent.BaseAgent",
        "agents.BASE_PYTHON_TOOLS",
        "agents.clean_code_for_chat",
        "agents.clean_code_for_run",
        "python_interpreter.InterpretorError",
        "python_interpreter.evaluate"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/transformers/tools/agents.py": {
      "classes": [
        {
          "name": "PreTool",
          "line": 61,
          "methods": []
        },
        {
          "name": "Agent",
          "line": 197,
          "methods": [
            "__init__",
            "toolbox",
            "format_prompt",
            "set_stream",
            "chat",
            "prepare_for_new_chat",
            "run",
            "generate_one",
            "generate_many"
          ]
        },
        {
          "name": "OpenAiAgent",
          "line": 365,
          "methods": [
            "__init__",
            "generate_many",
            "generate_one",
            "_chat_generate",
            "_completion_generate"
          ]
        },
        {
          "name": "AzureOpenAiAgent",
          "line": 463,
          "methods": [
            "__init__",
            "generate_many",
            "generate_one",
            "_chat_generate",
            "_completion_generate"
          ]
        },
        {
          "name": "HfAgent",
          "line": 589,
          "methods": [
            "__init__",
            "generate_one"
          ]
        },
        {
          "name": "LocalAgent",
          "line": 660,
          "methods": [
            "__init__",
            "from_pretrained",
            "_model_device",
            "generate_one"
          ]
        },
        {
          "name": "StopSequenceCriteria",
          "line": 753,
          "methods": [
            "__init__",
            "__call__",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "get_remote_tools",
          "line": 78,
          "args": [
            "organization"
          ]
        },
        {
          "name": "_setup_default_tools",
          "line": 97,
          "args": []
        },
        {
          "name": "resolve_tools",
          "line": 128,
          "args": [
            "code",
            "toolbox",
            "remote",
            "cached_tools"
          ]
        },
        {
          "name": "get_tool_creation_code",
          "line": 147,
          "args": [
            "code",
            "toolbox",
            "remote"
          ]
        },
        {
          "name": "clean_code_for_chat",
          "line": 163,
          "args": [
            "result"
          ]
        },
        {
          "name": "clean_code_for_run",
          "line": 181,
          "args": [
            "result"
          ]
        },
        {
          "name": "__init__",
          "line": 215,
          "args": [
            "self",
            "chat_prompt_template",
            "run_prompt_template",
            "additional_tools"
          ]
        },
        {
          "name": "toolbox",
          "line": 243,
          "args": [
            "self"
          ]
        },
        {
          "name": "format_prompt",
          "line": 247,
          "args": [
            "self",
            "task",
            "chat_mode"
          ]
        },
        {
          "name": "set_stream",
          "line": 260,
          "args": [
            "self",
            "streamer"
          ]
        },
        {
          "name": "chat",
          "line": 269,
          "args": [
            "self",
            "task"
          ]
        },
        {
          "name": "prepare_for_new_chat",
          "line": 311,
          "args": [
            "self"
          ]
        },
        {
          "name": "run",
          "line": 319,
          "args": [
            "self",
            "task"
          ]
        },
        {
          "name": "generate_one",
          "line": 356,
          "args": [
            "self",
            "prompt",
            "stop"
          ]
        },
        {
          "name": "generate_many",
          "line": 360,
          "args": [
            "self",
            "prompts",
            "stop"
          ]
        },
        {
          "name": "__init__",
          "line": 403,
          "args": [
            "self",
            "model",
            "api_key",
            "chat_prompt_template",
            "run_prompt_template",
            "additional_tools"
          ]
        },
        {
          "name": "generate_many",
          "line": 431,
          "args": [
            "self",
            "prompts",
            "stop"
          ]
        },
        {
          "name": "generate_one",
          "line": 437,
          "args": [
            "self",
            "prompt",
            "stop"
          ]
        },
        {
          "name": "_chat_generate",
          "line": 443,
          "args": [
            "self",
            "prompt",
            "stop"
          ]
        },
        {
          "name": "_completion_generate",
          "line": 452,
          "args": [
            "self",
            "prompts",
            "stop"
          ]
        },
        {
          "name": "__init__",
          "line": 511,
          "args": [
            "self",
            "deployment_id",
            "api_key",
            "resource_name",
            "api_version",
            "is_chat_model",
            "chat_prompt_template",
            "run_prompt_template",
            "additional_tools"
          ]
        },
        {
          "name": "generate_many",
          "line": 557,
          "args": [
            "self",
            "prompts",
            "stop"
          ]
        },
        {
          "name": "generate_one",
          "line": 563,
          "args": [
            "self",
            "prompt",
            "stop"
          ]
        },
        {
          "name": "_chat_generate",
          "line": 569,
          "args": [
            "self",
            "prompt",
            "stop"
          ]
        },
        {
          "name": "_completion_generate",
          "line": 578,
          "args": [
            "self",
            "prompts",
            "stop"
          ]
        },
        {
          "name": "__init__",
          "line": 621,
          "args": [
            "self",
            "url_endpoint",
            "token",
            "chat_prompt_template",
            "run_prompt_template",
            "additional_tools"
          ]
        },
        {
          "name": "generate_one",
          "line": 637,
          "args": [
            "self",
            "prompt",
            "stop"
          ]
        },
        {
          "name": "__init__",
          "line": 696,
          "args": [
            "self",
            "model",
            "tokenizer",
            "chat_prompt_template",
            "run_prompt_template",
            "additional_tools"
          ]
        },
        {
          "name": "from_pretrained",
          "line": 706,
          "args": [
            "cls",
            "pretrained_model_name_or_path"
          ]
        },
        {
          "name": "_model_device",
          "line": 731,
          "args": [
            "self"
          ]
        },
        {
          "name": "generate_one",
          "line": 737,
          "args": [
            "self",
            "prompt",
            "stop"
          ]
        },
        {
          "name": "__init__",
          "line": 764,
          "args": [
            "self",
            "stop_sequences",
            "tokenizer"
          ]
        },
        {
          "name": "__call__",
          "line": 770,
          "args": [
            "self",
            "input_ids",
            "scores"
          ]
        },
        {
          "name": "health_check",
          "line": 775,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "src.core.base_agent.BaseAgent",
        "importlib.util",
        "json",
        "os",
        "time",
        "dataclasses.dataclass",
        "typing.Dict",
        "requests",
        "huggingface_hub.HfFolder",
        "huggingface_hub.hf_hub_download",
        "huggingface_hub.list_spaces",
        "models.auto.AutoTokenizer",
        "utils.is_offline_mode",
        "utils.is_openai_available",
        "utils.is_torch_available",
        "utils.logging",
        "base.TASK_MAPPING",
        "base.TOOL_CONFIG_FILE",
        "base.Tool",
        "base.load_tool",
        "base.supports_remote",
        "prompts.CHAT_MESSAGE_PROMPT",
        "prompts.download_prompt",
        "python_interpreter.evaluate",
        "openai",
        "generation.StoppingCriteria",
        "generation.StoppingCriteriaList",
        "models.auto.AutoModelForCausalLM"
      ],
      "ports": [],
      "configurations": [
        "config = json.load(reader)",
        "config = json.load(reader)",
        ".env",
        ".env",
        ".env",
        ".env",
        ".env",
        ".env",
        ".json",
        ".json"
      ],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/werkzeug/user_agent.py": {
      "classes": [
        {
          "name": "UserAgent",
          "line": 5,
          "methods": [
            "__init__",
            "__repr__",
            "__str__",
            "__bool__",
            "to_header",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 33,
          "args": [
            "self",
            "string"
          ]
        },
        {
          "name": "__repr__",
          "line": 37,
          "args": [
            "self"
          ]
        },
        {
          "name": "__str__",
          "line": 40,
          "args": [
            "self"
          ]
        },
        {
          "name": "__bool__",
          "line": 43,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_header",
          "line": 46,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 51,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "src.core.base_agent.BaseAgent"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/distributed/rpc/_testing/faulty_agent_backend_registry.py": {
      "classes": [],
      "functions": [
        {
          "name": "_faulty_tensorpipe_construct_rpc_backend_options_handler",
          "line": 7,
          "args": [
            "rpc_timeout",
            "init_method",
            "num_worker_threads",
            "messages_to_fail",
            "messages_to_delay",
            "num_fail_sends"
          ]
        },
        {
          "name": "_faulty_tensorpipe_init_backend_handler",
          "line": 28,
          "args": [
            "store",
            "name",
            "rank",
            "world_size",
            "rpc_backend_options"
          ]
        }
      ],
      "imports": [
        "src.core.base_agent.BaseAgent",
        "torch.distributed",
        "torch.distributed.rpc",
        "torch.distributed.rpc.api"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/distributed/elastic/agent/server/local_elastic_agent.py": {
      "classes": [
        {
          "name": "LocalElasticAgent",
          "line": 50,
          "methods": [
            "__init__",
            "_make_log_dir",
            "_setup_local_watchdog",
            "_get_fq_hostname",
            "_log_watchdog_event",
            "_stop_workers",
            "_start_workers",
            "_shutdown",
            "_monitor_workers",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 130,
          "args": [
            "self",
            "spec",
            "start_method",
            "exit_barrier_timeout",
            "log_dir"
          ]
        },
        {
          "name": "_make_log_dir",
          "line": 144,
          "args": [
            "self",
            "log_dir",
            "rdzv_run_id"
          ]
        },
        {
          "name": "_setup_local_watchdog",
          "line": 151,
          "args": [
            "self",
            "envs"
          ]
        },
        {
          "name": "_get_fq_hostname",
          "line": 175,
          "args": [
            "self"
          ]
        },
        {
          "name": "_log_watchdog_event",
          "line": 178,
          "args": [
            "self",
            "name",
            "request"
          ]
        },
        {
          "name": "_stop_workers",
          "line": 219,
          "args": [
            "self",
            "worker_group"
          ]
        },
        {
          "name": "_start_workers",
          "line": 225,
          "args": [
            "self",
            "worker_group"
          ]
        },
        {
          "name": "_shutdown",
          "line": 288,
          "args": [
            "self",
            "death_sig"
          ]
        },
        {
          "name": "_monitor_workers",
          "line": 298,
          "args": [
            "self",
            "worker_group"
          ]
        },
        {
          "name": "health_check",
          "line": 336,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "src.core.base_agent.BaseAgent",
        "json",
        "os",
        "shutil",
        "signal",
        "socket",
        "tempfile",
        "uuid",
        "typing.Any",
        "typing.Dict",
        "typing.Optional",
        "typing.Tuple",
        "torch.distributed.elastic.timer",
        "torch.distributed.elastic.events",
        "torch.distributed.elastic.agent.server.api.RunResult",
        "torch.distributed.elastic.agent.server.api.SimpleElasticAgent",
        "torch.distributed.elastic.agent.server.api.WorkerGroup",
        "torch.distributed.elastic.agent.server.api.WorkerSpec",
        "torch.distributed.elastic.agent.server.api.WorkerState",
        "torch.distributed.elastic.events.api.EventMetadataValue",
        "torch.distributed.elastic.metrics.api.prof",
        "torch.distributed.elastic.multiprocessing.PContext",
        "torch.distributed.elastic.multiprocessing.start_processes",
        "torch.distributed.elastic.utils.macros",
        "torch.distributed.elastic.utils.logging.get_logger",
        "time",
        "psutil",
        "datetime.datetime"
      ],
      "ports": [],
      "configurations": [
        ".env",
        ".env"
      ],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/rpc_agent_test_fixture.py": {
      "classes": [
        {
          "name": "RpcAgentTestFixture",
          "line": 11,
          "methods": [
            "world_size",
            "init_method",
            "file_init_method",
            "rpc_backend",
            "rpc_backend_options",
            "setup_fault_injection",
            "get_shutdown_error_regex",
            "get_timeout_error_regex",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "world_size",
          "line": 13,
          "args": [
            "self"
          ]
        },
        {
          "name": "init_method",
          "line": 17,
          "args": [
            "self"
          ]
        },
        {
          "name": "file_init_method",
          "line": 27,
          "args": [
            "self"
          ]
        },
        {
          "name": "rpc_backend",
          "line": 34,
          "args": [
            "self"
          ]
        },
        {
          "name": "rpc_backend_options",
          "line": 39,
          "args": [
            "self"
          ]
        },
        {
          "name": "setup_fault_injection",
          "line": 42,
          "args": [
            "self",
            "faulty_messages",
            "messages_to_delay"
          ]
        },
        {
          "name": "get_shutdown_error_regex",
          "line": 53,
          "args": [
            "self"
          ]
        },
        {
          "name": "get_timeout_error_regex",
          "line": 62,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 70,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "src.core.base_agent.BaseAgent",
        "os",
        "abc.ABC",
        "abc.abstractmethod",
        "torch.testing._internal.dist_utils",
        "time",
        "psutil",
        "datetime.datetime"
      ],
      "ports": [],
      "configurations": [
        ".env",
        ".env",
        ".env"
      ],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/faulty_agent_rpc_test.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 13)"
      ]
    },
    "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/faulty_rpc_agent_test_fixture.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 5)"
      ]
    },
    "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/torch/testing/_internal/distributed/rpc/tensorpipe_rpc_agent_test_fixture.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 7)"
      ]
    },
    "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/transformers/tools/agent_types.py": {
      "classes": [
        {
          "name": "AgentType",
          "line": 42,
          "methods": [
            "__init__",
            "__str__",
            "to_raw",
            "to_string"
          ]
        },
        {
          "name": "AgentText",
          "line": 72,
          "methods": [
            "to_raw",
            "to_string"
          ]
        },
        {
          "name": "AgentImage",
          "line": 84,
          "methods": [
            "__init__",
            "_ipython_display_",
            "to_raw",
            "to_string"
          ]
        },
        {
          "name": "AgentAudio",
          "line": 156,
          "methods": [
            "__init__",
            "_ipython_display_",
            "to_raw",
            "to_string"
          ]
        }
      ],
      "functions": [
        {
          "name": "handle_agent_inputs",
          "line": 221,
          "args": []
        },
        {
          "name": "handle_agent_outputs",
          "line": 227,
          "args": [
            "outputs",
            "output_types"
          ]
        },
        {
          "name": "__init__",
          "line": 53,
          "args": [
            "self",
            "value"
          ]
        },
        {
          "name": "__str__",
          "line": 56,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_raw",
          "line": 59,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_string",
          "line": 65,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_raw",
          "line": 77,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_string",
          "line": 80,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 89,
          "args": [
            "self",
            "value"
          ]
        },
        {
          "name": "_ipython_display_",
          "line": 108,
          "args": [
            "self",
            "include",
            "exclude"
          ]
        },
        {
          "name": "to_raw",
          "line": 116,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_string",
          "line": 127,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 161,
          "args": [
            "self",
            "value",
            "samplerate"
          ]
        },
        {
          "name": "_ipython_display_",
          "line": 179,
          "args": [
            "self",
            "include",
            "exclude"
          ]
        },
        {
          "name": "to_raw",
          "line": 187,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_string",
          "line": 199,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 281,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "src.core.base_agent.BaseAgent",
        "os",
        "pathlib",
        "tempfile",
        "uuid",
        "numpy",
        "utils.is_soundfile_availble",
        "utils.is_torch_available",
        "utils.is_vision_available",
        "utils.logging",
        "PIL.Image",
        "PIL.Image",
        "PIL.Image.Image",
        "torch",
        "soundfile",
        "IPython.display.Image",
        "IPython.display.display",
        "IPython.display.Audio",
        "IPython.display.display"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/transformers/tools/evaluate_agent.py": {
      "classes": [
        {
          "name": "Problem",
          "line": 105,
          "methods": [
            "__init__"
          ]
        }
      ],
      "functions": [
        {
          "name": "classifier",
          "line": 23,
          "args": [
            "text",
            "labels"
          ]
        },
        {
          "name": "translator",
          "line": 27,
          "args": [
            "text",
            "src_lang",
            "tgt_lang"
          ]
        },
        {
          "name": "speaker",
          "line": 31,
          "args": [
            "text"
          ]
        },
        {
          "name": "transcriber",
          "line": 35,
          "args": [
            "audio"
          ]
        },
        {
          "name": "image_generator",
          "line": 41,
          "args": [
            "prompt"
          ]
        },
        {
          "name": "image_captioner",
          "line": 45,
          "args": [
            "image"
          ]
        },
        {
          "name": "image_transformer",
          "line": 51,
          "args": [
            "image",
            "prompt"
          ]
        },
        {
          "name": "question_answerer",
          "line": 57,
          "args": [
            "text",
            "question"
          ]
        },
        {
          "name": "image_qa",
          "line": 61,
          "args": [
            "image",
            "question"
          ]
        },
        {
          "name": "text_downloader",
          "line": 67,
          "args": [
            "url"
          ]
        },
        {
          "name": "summarizer",
          "line": 71,
          "args": [
            "text"
          ]
        },
        {
          "name": "video_generator",
          "line": 75,
          "args": [
            "prompt",
            "seconds"
          ]
        },
        {
          "name": "document_qa",
          "line": 79,
          "args": [
            "image",
            "question"
          ]
        },
        {
          "name": "image_segmenter",
          "line": 83,
          "args": [
            "image",
            "prompt"
          ]
        },
        {
          "name": "get_theoretical_tools",
          "line": 401,
          "args": [
            "agent_answer",
            "theoretical_answer",
            "code_answer"
          ]
        },
        {
          "name": "evaluate_code",
          "line": 417,
          "args": [
            "code",
            "inputs",
            "state",
            "verbose",
            "return_interpretor_error"
          ]
        },
        {
          "name": "score_code",
          "line": 444,
          "args": [
            "agent_answer",
            "theoretical_answer",
            "verbose"
          ]
        },
        {
          "name": "evaluate_one_result",
          "line": 463,
          "args": [
            "explanation",
            "code",
            "agent_answer",
            "theoretical_answer",
            "answer",
            "verbose"
          ]
        },
        {
          "name": "evaluate_agent",
          "line": 506,
          "args": [
            "agent",
            "batch_size",
            "verbose",
            "return_errors"
          ]
        },
        {
          "name": "evaluate_chat_agent",
          "line": 595,
          "args": [
            "agent",
            "verbose",
            "return_errors"
          ]
        },
        {
          "name": "__init__",
          "line": 121,
          "args": [
            "self",
            "task",
            "inputs",
            "answer"
          ]
        },
        {
          "name": "health_check",
          "line": 696,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "src.core.base_agent.BaseAgent",
        "agents.BASE_PYTHON_TOOLS",
        "agents.clean_code_for_chat",
        "agents.clean_code_for_run",
        "python_interpreter.InterpretorError",
        "python_interpreter.evaluate"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/transformers/tools/agents.py": {
      "classes": [
        {
          "name": "PreTool",
          "line": 61,
          "methods": []
        },
        {
          "name": "Agent",
          "line": 197,
          "methods": [
            "__init__",
            "toolbox",
            "format_prompt",
            "set_stream",
            "chat",
            "prepare_for_new_chat",
            "run",
            "generate_one",
            "generate_many"
          ]
        },
        {
          "name": "OpenAiAgent",
          "line": 365,
          "methods": [
            "__init__",
            "generate_many",
            "generate_one",
            "_chat_generate",
            "_completion_generate"
          ]
        },
        {
          "name": "AzureOpenAiAgent",
          "line": 463,
          "methods": [
            "__init__",
            "generate_many",
            "generate_one",
            "_chat_generate",
            "_completion_generate"
          ]
        },
        {
          "name": "HfAgent",
          "line": 589,
          "methods": [
            "__init__",
            "generate_one"
          ]
        },
        {
          "name": "LocalAgent",
          "line": 660,
          "methods": [
            "__init__",
            "from_pretrained",
            "_model_device",
            "generate_one"
          ]
        },
        {
          "name": "StopSequenceCriteria",
          "line": 753,
          "methods": [
            "__init__",
            "__call__",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "get_remote_tools",
          "line": 78,
          "args": [
            "organization"
          ]
        },
        {
          "name": "_setup_default_tools",
          "line": 97,
          "args": []
        },
        {
          "name": "resolve_tools",
          "line": 128,
          "args": [
            "code",
            "toolbox",
            "remote",
            "cached_tools"
          ]
        },
        {
          "name": "get_tool_creation_code",
          "line": 147,
          "args": [
            "code",
            "toolbox",
            "remote"
          ]
        },
        {
          "name": "clean_code_for_chat",
          "line": 163,
          "args": [
            "result"
          ]
        },
        {
          "name": "clean_code_for_run",
          "line": 181,
          "args": [
            "result"
          ]
        },
        {
          "name": "__init__",
          "line": 215,
          "args": [
            "self",
            "chat_prompt_template",
            "run_prompt_template",
            "additional_tools"
          ]
        },
        {
          "name": "toolbox",
          "line": 243,
          "args": [
            "self"
          ]
        },
        {
          "name": "format_prompt",
          "line": 247,
          "args": [
            "self",
            "task",
            "chat_mode"
          ]
        },
        {
          "name": "set_stream",
          "line": 260,
          "args": [
            "self",
            "streamer"
          ]
        },
        {
          "name": "chat",
          "line": 269,
          "args": [
            "self",
            "task"
          ]
        },
        {
          "name": "prepare_for_new_chat",
          "line": 311,
          "args": [
            "self"
          ]
        },
        {
          "name": "run",
          "line": 319,
          "args": [
            "self",
            "task"
          ]
        },
        {
          "name": "generate_one",
          "line": 356,
          "args": [
            "self",
            "prompt",
            "stop"
          ]
        },
        {
          "name": "generate_many",
          "line": 360,
          "args": [
            "self",
            "prompts",
            "stop"
          ]
        },
        {
          "name": "__init__",
          "line": 403,
          "args": [
            "self",
            "model",
            "api_key",
            "chat_prompt_template",
            "run_prompt_template",
            "additional_tools"
          ]
        },
        {
          "name": "generate_many",
          "line": 431,
          "args": [
            "self",
            "prompts",
            "stop"
          ]
        },
        {
          "name": "generate_one",
          "line": 437,
          "args": [
            "self",
            "prompt",
            "stop"
          ]
        },
        {
          "name": "_chat_generate",
          "line": 443,
          "args": [
            "self",
            "prompt",
            "stop"
          ]
        },
        {
          "name": "_completion_generate",
          "line": 452,
          "args": [
            "self",
            "prompts",
            "stop"
          ]
        },
        {
          "name": "__init__",
          "line": 511,
          "args": [
            "self",
            "deployment_id",
            "api_key",
            "resource_name",
            "api_version",
            "is_chat_model",
            "chat_prompt_template",
            "run_prompt_template",
            "additional_tools"
          ]
        },
        {
          "name": "generate_many",
          "line": 557,
          "args": [
            "self",
            "prompts",
            "stop"
          ]
        },
        {
          "name": "generate_one",
          "line": 563,
          "args": [
            "self",
            "prompt",
            "stop"
          ]
        },
        {
          "name": "_chat_generate",
          "line": 569,
          "args": [
            "self",
            "prompt",
            "stop"
          ]
        },
        {
          "name": "_completion_generate",
          "line": 578,
          "args": [
            "self",
            "prompts",
            "stop"
          ]
        },
        {
          "name": "__init__",
          "line": 621,
          "args": [
            "self",
            "url_endpoint",
            "token",
            "chat_prompt_template",
            "run_prompt_template",
            "additional_tools"
          ]
        },
        {
          "name": "generate_one",
          "line": 637,
          "args": [
            "self",
            "prompt",
            "stop"
          ]
        },
        {
          "name": "__init__",
          "line": 696,
          "args": [
            "self",
            "model",
            "tokenizer",
            "chat_prompt_template",
            "run_prompt_template",
            "additional_tools"
          ]
        },
        {
          "name": "from_pretrained",
          "line": 706,
          "args": [
            "cls",
            "pretrained_model_name_or_path"
          ]
        },
        {
          "name": "_model_device",
          "line": 731,
          "args": [
            "self"
          ]
        },
        {
          "name": "generate_one",
          "line": 737,
          "args": [
            "self",
            "prompt",
            "stop"
          ]
        },
        {
          "name": "__init__",
          "line": 764,
          "args": [
            "self",
            "stop_sequences",
            "tokenizer"
          ]
        },
        {
          "name": "__call__",
          "line": 770,
          "args": [
            "self",
            "input_ids",
            "scores"
          ]
        },
        {
          "name": "health_check",
          "line": 775,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "src.core.base_agent.BaseAgent",
        "importlib.util",
        "json",
        "os",
        "time",
        "dataclasses.dataclass",
        "typing.Dict",
        "requests",
        "huggingface_hub.HfFolder",
        "huggingface_hub.hf_hub_download",
        "huggingface_hub.list_spaces",
        "models.auto.AutoTokenizer",
        "utils.is_offline_mode",
        "utils.is_openai_available",
        "utils.is_torch_available",
        "utils.logging",
        "base.TASK_MAPPING",
        "base.TOOL_CONFIG_FILE",
        "base.Tool",
        "base.load_tool",
        "base.supports_remote",
        "prompts.CHAT_MESSAGE_PROMPT",
        "prompts.download_prompt",
        "python_interpreter.evaluate",
        "openai",
        "generation.StoppingCriteria",
        "generation.StoppingCriteriaList",
        "models.auto.AutoModelForCausalLM"
      ],
      "ports": [],
      "configurations": [
        "config = json.load(reader)",
        "config = json.load(reader)",
        ".env",
        ".env",
        ".env",
        ".env",
        ".env",
        ".env",
        ".json",
        ".json"
      ],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "python_files_backup_20250627_230225/python_files_backup_20250627_230225/main_pc_code/.venv/lib/python3.10/site-packages/werkzeug/user_agent.py": {
      "classes": [
        {
          "name": "UserAgent",
          "line": 5,
          "methods": [
            "__init__",
            "__repr__",
            "__str__",
            "__bool__",
            "to_header",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 33,
          "args": [
            "self",
            "string"
          ]
        },
        {
          "name": "__repr__",
          "line": 37,
          "args": [
            "self"
          ]
        },
        {
          "name": "__str__",
          "line": 40,
          "args": [
            "self"
          ]
        },
        {
          "name": "__bool__",
          "line": 43,
          "args": [
            "self"
          ]
        },
        {
          "name": "to_header",
          "line": 46,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 51,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "__future__.annotations",
        "src.core.base_agent.BaseAgent"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "docs/resiliency_examples/MetaCognitionAgent_circuit_breaker.py": {
      "classes": [
        {
          "name": "MetacognitionagentCircuitBreakers",
          "line": 9,
          "methods": [
            "__init__"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "db_query",
          "line": 43,
          "args": []
        }
      ],
      "imports": [
        "common.resiliency.circuit_breaker.get_circuit_breaker",
        "common.resiliency.circuit_breaker.CircuitBreakerConfig",
        "common.resiliency.circuit_breaker.circuit_breaker"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "docs/resiliency_examples/MetaCognitionAgent_health.py": {
      "classes": [
        {
          "name": "MetacognitionagentHealthMonitor",
          "line": 9,
          "methods": [
            "__init__",
            "_register_health_checks"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "_register_health_checks",
          "line": 16,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.resiliency.health_monitor.get_health_monitor",
        "common.resiliency.health_monitor.HealthCheck",
        "common.resiliency.health_monitor.HealthStatus"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "class MetacognitionagentHealthMonitor:",
        "def _register_health_checks(self):",
        "def get_health_status(self):",
        "def get_health_status(self):"
      ],
      "errors": []
    },
    "docs/resiliency_examples/MetaCognitionAgent_bulkhead.py": {
      "classes": [
        {
          "name": "MetacognitionagentBulkheads",
          "line": 9,
          "methods": [
            "__init__"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": [
            "self"
          ]
        },
        {
          "name": "task",
          "line": 49,
          "args": []
        }
      ],
      "imports": [
        "common.resiliency.bulkhead.get_bulkhead",
        "common.resiliency.bulkhead.BulkheadConfig",
        "common.resiliency.bulkhead.IsolationStrategy",
        "common.resiliency.bulkhead.bulkhead"
      ],
      "ports": [],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/agents/ProactiveAgent.py": {
      "classes": [
        {
          "name": "ProactivityLevel",
          "line": 25,
          "methods": []
        },
        {
          "name": "SuggestionType",
          "line": 32,
          "methods": []
        },
        {
          "name": "ProactiveSuggestion",
          "line": 42,
          "methods": []
        },
        {
          "name": "ProactiveAgent",
          "line": 55,
          "methods": [
            "__init__",
            "_initialize_suggestion_rules",
            "generate_suggestion_id",
            "analyze_context",
            "generate_suggestion",
            "evaluate_suggestion_relevance",
            "should_generate_suggestion",
            "_calculate_recent_acceptance_rate",
            "process_user_feedback",
            "_publish_feedback_event",
            "cleanup_expired_suggestions",
            "get_active_suggestions",
            "process_context_update",
            "_monitoring_loop",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 61,
          "args": [
            "self",
            "name",
            "port"
          ]
        },
        {
          "name": "_initialize_suggestion_rules",
          "line": 116,
          "args": [
            "self"
          ]
        },
        {
          "name": "generate_suggestion_id",
          "line": 151,
          "args": [
            "self"
          ]
        },
        {
          "name": "analyze_context",
          "line": 156,
          "args": [
            "self",
            "context_data"
          ]
        },
        {
          "name": "generate_suggestion",
          "line": 199,
          "args": [
            "self",
            "opportunity",
            "context"
          ]
        },
        {
          "name": "evaluate_suggestion_relevance",
          "line": 271,
          "args": [
            "self",
            "suggestion",
            "current_context"
          ]
        },
        {
          "name": "should_generate_suggestion",
          "line": 306,
          "args": [
            "self",
            "current_context"
          ]
        },
        {
          "name": "_calculate_recent_acceptance_rate",
          "line": 342,
          "args": [
            "self"
          ]
        },
        {
          "name": "process_user_feedback",
          "line": 358,
          "args": [
            "self",
            "suggestion_id",
            "feedback",
            "feedback_data"
          ]
        },
        {
          "name": "_publish_feedback_event",
          "line": 398,
          "args": [
            "self",
            "suggestion",
            "feedback",
            "feedback_data"
          ]
        },
        {
          "name": "cleanup_expired_suggestions",
          "line": 415,
          "args": [
            "self"
          ]
        },
        {
          "name": "get_active_suggestions",
          "line": 433,
          "args": [
            "self"
          ]
        },
        {
          "name": "process_context_update",
          "line": 459,
          "args": [
            "self",
            "context_data"
          ]
        },
        {
          "name": "_monitoring_loop",
          "line": 513,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 533,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "asyncio",
        "json",
        "threading",
        "time",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "dataclasses.dataclass",
        "dataclasses.field",
        "enum.Enum",
        "zmq",
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager",
        "common.utils.data_models.ErrorSeverity",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "remote_api_adapter.adapter.RemoteApiAdapter",
        "asyncio",
        "uuid"
      ],
      "ports": [
        5624
      ],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/agents/IntentionValidatorAgent.py": {
      "classes": [
        {
          "name": "IntentionType",
          "line": 25,
          "methods": []
        },
        {
          "name": "ConfidenceLevel",
          "line": 35,
          "methods": []
        },
        {
          "name": "ValidationResult",
          "line": 43,
          "methods": []
        },
        {
          "name": "IntentionValidatorAgent",
          "line": 52,
          "methods": [
            "__init__",
            "extract_entities",
            "calculate_intention_confidence",
            "validate_intention",
            "_generate_suggested_response",
            "_update_statistics",
            "_publish_validation_result",
            "get_validation_statistics",
            "process_batch_validation",
            "_background_processing",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 58,
          "args": [
            "self",
            "name",
            "port"
          ]
        },
        {
          "name": "extract_entities",
          "line": 128,
          "args": [
            "self",
            "text"
          ]
        },
        {
          "name": "calculate_intention_confidence",
          "line": 148,
          "args": [
            "self",
            "text",
            "intention_type"
          ]
        },
        {
          "name": "validate_intention",
          "line": 179,
          "args": [
            "self",
            "user_input",
            "context"
          ]
        },
        {
          "name": "_generate_suggested_response",
          "line": 270,
          "args": [
            "self",
            "intention",
            "confidence",
            "entities",
            "requires_clarification"
          ]
        },
        {
          "name": "_update_statistics",
          "line": 305,
          "args": [
            "self",
            "result"
          ]
        },
        {
          "name": "_publish_validation_result",
          "line": 328,
          "args": [
            "self",
            "input_text",
            "result"
          ]
        },
        {
          "name": "get_validation_statistics",
          "line": 345,
          "args": [
            "self"
          ]
        },
        {
          "name": "process_batch_validation",
          "line": 353,
          "args": [
            "self",
            "inputs"
          ]
        },
        {
          "name": "_background_processing",
          "line": 389,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 409,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "asyncio",
        "json",
        "re",
        "time",
        "threading",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "enum.Enum",
        "zmq",
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager",
        "common.utils.data_models.ErrorSeverity",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "asyncio"
      ],
      "ports": [
        5701
      ],
      "configurations": [],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/agents/EmpathyAgent.py": {
      "classes": [
        {
          "name": "EmpathyAgent",
          "line": 45,
          "methods": [
            "__init__",
            "_initialize_connections",
            "update_emotional_profile",
            "send_voice_settings_to_tts",
            "_monitor_emotions",
            "_update_emotional_state",
            "determine_voice_settings",
            "_send_voice_settings_to_tts",
            "_get_health_status",
            "handle_request",
            "run",
            "stop",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "_perform_initialization",
          "line": 413,
          "args": [
            "self"
          ]
        },
        {
          "name": "__init__",
          "line": 46,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_initialize_connections",
          "line": 70,
          "args": [
            "self"
          ]
        },
        {
          "name": "update_emotional_profile",
          "line": 91,
          "args": [
            "self",
            "profile"
          ]
        },
        {
          "name": "send_voice_settings_to_tts",
          "line": 104,
          "args": [
            "self"
          ]
        },
        {
          "name": "_monitor_emotions",
          "line": 132,
          "args": [
            "self"
          ]
        },
        {
          "name": "_update_emotional_state",
          "line": 152,
          "args": [
            "self",
            "emotional_state"
          ]
        },
        {
          "name": "determine_voice_settings",
          "line": 166,
          "args": [
            "self"
          ]
        },
        {
          "name": "_send_voice_settings_to_tts",
          "line": 220,
          "args": [
            "self",
            "voice_settings"
          ]
        },
        {
          "name": "_get_health_status",
          "line": 256,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_request",
          "line": 266,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 326,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop",
          "line": 353,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 362,
          "args": [
            "self"
          ]
        },
        {
          "name": "get_health_status",
          "line": 416,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 452,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "sys",
        "os",
        "sys",
        "os",
        "os",
        "sys",
        "pathlib.Path",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "logging",
        "time",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "threading",
        "common.config_manager.load_unified_config",
        "main_pc_code.utils.service_discovery_client.get_service_address",
        "main_pc_code.utils.service_discovery_client.register_service",
        "traceback"
      ],
      "ports": [],
      "configurations": [
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "config = load_unified_config(os.path.join(PathManager.get_project_root(), \"main_pc_code\", \"config\", \"startup_config.yaml\"))",
        "settings = self.voice_settings[dominant_emotion].copy()",
        "settings = self.voice_settings['neutral'].copy()",
        "settings = self.voice_settings['neutral']",
        "settings = self.determine_voice_settings()",
        "settings = self.voice_settings[dominant_emotion].copy()",
        "settings = self.voice_settings['neutral'].copy()",
        "settings = self.voice_settings['neutral']",
        "settings = self.determine_voice_settings()"
      ],
      "health_checks": [
        "health",
        "def _get_health_status(self):",
        "Default health status:",
        "def health_check(self):",
        "def get_health_status(self) -> Dict[str, Any]:",
        "def _get_health_status(self):",
        "Default health status:",
        "def get_health_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    },
    "main_pc_code/agents/HumanAwarenessAgent.py": {
      "classes": [
        {
          "name": "HumanAwarenessAgent",
          "line": 57,
          "methods": [
            "__init__",
            "_start_tone_detector",
            "_tone_monitor_loop",
            "_process_loop",
            "_handle_request",
            "shutdown",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 58,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_start_tone_detector",
          "line": 98,
          "args": [
            "self"
          ]
        },
        {
          "name": "_tone_monitor_loop",
          "line": 118,
          "args": [
            "self"
          ]
        },
        {
          "name": "_process_loop",
          "line": 144,
          "args": [
            "self"
          ]
        },
        {
          "name": "_handle_request",
          "line": 165,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "shutdown",
          "line": 197,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 220,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 261,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "main_pc_code.src.core.base_agent.BaseAgent",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "logging",
        "json",
        "time",
        "os",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "datetime.datetime",
        "zmq",
        "threading",
        "subprocess",
        "signal",
        "sys",
        "psutil",
        "datetime.datetime",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.path_manager.PathManager",
        "common.env_helpers.get_env"
      ],
      "ports": [],
      "configurations": [
        "config = json.load(f)",
        "config = config['agents']['human_awareness']",
        "config = json.load(f)",
        "config = config['agents']['human_awareness']",
        ".env",
        ".json"
      ],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/DynamicIdentityAgent.py": {
      "classes": [
        {
          "name": "IdentityProfile",
          "line": 25,
          "methods": []
        },
        {
          "name": "IdentityContext",
          "line": 36,
          "methods": []
        },
        {
          "name": "DynamicIdentityAgent",
          "line": 45,
          "methods": [
            "__init__",
            "load_identity_profiles",
            "initialize_default_profiles",
            "save_identity_profiles",
            "analyze_context",
            "select_identity",
            "switch_identity",
            "get_current_identity_info",
            "process_request",
            "start_monitoring",
            "_monitor_identity_usage",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 50,
          "args": [
            "self",
            "name",
            "port"
          ]
        },
        {
          "name": "load_identity_profiles",
          "line": 76,
          "args": [
            "self"
          ]
        },
        {
          "name": "initialize_default_profiles",
          "line": 103,
          "args": [
            "self"
          ]
        },
        {
          "name": "save_identity_profiles",
          "line": 180,
          "args": [
            "self"
          ]
        },
        {
          "name": "analyze_context",
          "line": 201,
          "args": [
            "self",
            "user_input",
            "conversation_history"
          ]
        },
        {
          "name": "select_identity",
          "line": 234,
          "args": [
            "self",
            "context",
            "user_preferences"
          ]
        },
        {
          "name": "switch_identity",
          "line": 276,
          "args": [
            "self",
            "target_identity"
          ]
        },
        {
          "name": "get_current_identity_info",
          "line": 304,
          "args": [
            "self"
          ]
        },
        {
          "name": "process_request",
          "line": 317,
          "args": [
            "self",
            "user_input",
            "conversation_history"
          ]
        },
        {
          "name": "start_monitoring",
          "line": 349,
          "args": [
            "self"
          ]
        },
        {
          "name": "_monitor_identity_usage",
          "line": 356,
          "args": [
            "self"
          ]
        },
        {
          "name": "cleanup",
          "line": 396,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "json",
        "time",
        "threading",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "datetime.datetime",
        "asyncio",
        "zmq",
        "dataclasses.dataclass",
        "dataclasses.field",
        "enum.Enum",
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager",
        "common.utils.data_models.ErrorSeverity",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "asyncio"
      ],
      "ports": [
        5802
      ],
      "configurations": [
        ".json"
      ],
      "health_checks": [],
      "errors": []
    },
    "main_pc_code/agents/MetaCognitionAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 961)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/LearningAgent.py": {
      "classes": [
        {
          "name": "LearningAgent",
          "line": 32,
          "methods": [
            "__init__",
            "_init_database",
            "_analyze_patterns",
            "_analyze_episode",
            "_find_command_sequences",
            "_compare_sequences",
            "_identify_shortcuts",
            "_store_command_pattern",
            "_store_shortcut",
            "_get_command_patterns",
            "_get_shortcuts",
            "_trigger_few_shot_learning",
            "handle_request",
            "run",
            "stop",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 33,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_init_database",
          "line": 68,
          "args": [
            "self"
          ]
        },
        {
          "name": "_analyze_patterns",
          "line": 117,
          "args": [
            "self"
          ]
        },
        {
          "name": "_analyze_episode",
          "line": 145,
          "args": [
            "self",
            "episode"
          ]
        },
        {
          "name": "_find_command_sequences",
          "line": 170,
          "args": [
            "self",
            "interactions",
            "min_sequence_length"
          ]
        },
        {
          "name": "_compare_sequences",
          "line": 186,
          "args": [
            "self",
            "seq1",
            "seq2"
          ]
        },
        {
          "name": "_identify_shortcuts",
          "line": 198,
          "args": [
            "self",
            "interactions"
          ]
        },
        {
          "name": "_store_command_pattern",
          "line": 222,
          "args": [
            "self",
            "user_id",
            "pattern"
          ]
        },
        {
          "name": "_store_shortcut",
          "line": 265,
          "args": [
            "self",
            "user_id",
            "shortcut"
          ]
        },
        {
          "name": "_get_command_patterns",
          "line": 308,
          "args": [
            "self",
            "user_id"
          ]
        },
        {
          "name": "_get_shortcuts",
          "line": 334,
          "args": [
            "self",
            "user_id"
          ]
        },
        {
          "name": "_trigger_few_shot_learning",
          "line": 362,
          "args": [
            "self",
            "user_id",
            "examples"
          ]
        },
        {
          "name": "handle_request",
          "line": 383,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 423,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop",
          "line": 447,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 458,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 497,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "main_pc_code.src.core.base_agent.BaseAgent",
        "zmq",
        "json",
        "time",
        "logging",
        "sqlite3",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "collections.defaultdict",
        "threading.Thread",
        "psutil",
        "datetime.datetime",
        "common.env_helpers.get_env",
        "common.utils.path_manager.PathManager"
      ],
      "ports": [
        5603,
        5629
      ],
      "configurations": [
        ".env"
      ],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/_trash_2025-06-13/SecurityPolicyAgent.py": {
      "classes": [
        {
          "name": "SecurityPolicyAgent",
          "line": 29,
          "methods": [
            "__init__",
            "_init_database",
            "_check_permission",
            "_log_access",
            "handle_request",
            "run",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 30,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_init_database",
          "line": 46,
          "args": [
            "self"
          ]
        },
        {
          "name": "_check_permission",
          "line": 137,
          "args": [
            "self",
            "profile_id",
            "command",
            "parameters"
          ]
        },
        {
          "name": "_log_access",
          "line": 187,
          "args": [
            "self",
            "profile_id",
            "command",
            "parameters",
            "allowed",
            "reason"
          ]
        },
        {
          "name": "handle_request",
          "line": 209,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 300,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 325,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 361,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "main_pc_code.src.core.base_agent.BaseAgent",
        "zmq",
        "json",
        "time",
        "logging",
        "sqlite3",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Set",
        "psutil",
        "datetime.datetime",
        "common.utils.path_manager.PathManager"
      ],
      "ports": [],
      "configurations": [],
      "health_checks": [
        "health",
        "def health_check(self):"
      ],
      "errors": []
    },
    "main_pc_code/agents/_trash_2025-06-13/PredictiveActionAgent.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: unexpected indent (<unknown>, line 3)"
      ]
    },
    "main_pc_code/agents/_trash_2025-06-13/AgentBreeder.py": {
      "classes": [],
      "functions": [],
      "imports": [],
      "ports": [],
      "configurations": [],
      "health_checks": [],
      "errors": [
        "Analysis error: invalid syntax (<unknown>, line 67)"
      ]
    },
    "main_pc_code/agents/needtoverify/SessionAgent.py": {
      "classes": [
        {
          "name": "SessionAgent",
          "line": 31,
          "methods": [
            "__init__",
            "_create_session_folder",
            "_create_session_log",
            "_log_event",
            "_monitor_events",
            "start_recording",
            "stop_recording",
            "get_session_status",
            "handle_request",
            "run",
            "stop",
            "health_check"
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 32,
          "args": [
            "self",
            "port"
          ]
        },
        {
          "name": "_create_session_folder",
          "line": 62,
          "args": [
            "self"
          ]
        },
        {
          "name": "_create_session_log",
          "line": 74,
          "args": [
            "self",
            "folder"
          ]
        },
        {
          "name": "_log_event",
          "line": 87,
          "args": [
            "self",
            "event"
          ]
        },
        {
          "name": "_monitor_events",
          "line": 100,
          "args": [
            "self"
          ]
        },
        {
          "name": "start_recording",
          "line": 116,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop_recording",
          "line": 158,
          "args": [
            "self"
          ]
        },
        {
          "name": "get_session_status",
          "line": 200,
          "args": [
            "self"
          ]
        },
        {
          "name": "handle_request",
          "line": 213,
          "args": [
            "self",
            "request"
          ]
        },
        {
          "name": "run",
          "line": 232,
          "args": [
            "self"
          ]
        },
        {
          "name": "stop",
          "line": 256,
          "args": [
            "self"
          ]
        },
        {
          "name": "health_check",
          "line": 266,
          "args": [
            "self"
          ]
        },
        {
          "name": "_perform_initialization",
          "line": 305,
          "args": [
            "self"
          ]
        }
      ],
      "imports": [
        "common.core.base_agent.BaseAgent",
        "zmq",
        "json",
        "logging",
        "time",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "os",
        "threading",
        "psutil",
        "datetime.datetime",
        "common.env_helpers.get_env",
        "common.utils.path_manager.PathManager"
      ],
      "ports": [
        5621
      ],
      "configurations": [
        ".env",
        ".json"
      ],
      "health_checks": [
        "health",
        "def health_check(self):",
        "def get_session_status(self) -> Dict[str, Any]:"
      ],
      "errors": []
    }
  },
  "health_status": {
    "running_processes": 1,
    "process_details": [
      "haymayn+ 2168340 68.2  0.1  23044 18532 pts/5    s+   14:38   0:03 python3 comprehensive_agent_scanner.py"
    ],
    "ports_detected": 81,
    "port_list": [
      4222,
      4223,
      5557,
      5558,
      5559,
      5560,
      5563,
      5568,
      5569,
      5580,
      5594,
      5595,
      5596,
      5597,
      5598,
      5603,
      5604,
      5605,
      5613,
      5615,
      5621,
      5624,
      5629,
      5644,
      5701,
      5802,
      6379,
      6572,
      6574,
      6575,
      6576,
      6578,
      6580,
      6581,
      6584,
      6606,
      6610,
      6612,
      6613,
      6615,
      6641,
      6642,
      6646,
      6650,
      6660,
      6713,
      6715,
      7100,
      7101,
      7104,
      7105,
      7106,
      7107,
      7120,
      7124,
      7150,
      7602,
      7777,
      8000,
      8101,
      8200,
      8202,
      8211,
      8212,
      8220,
      8222,
      8225,
      8570,
      9000,
      9091,
      9092,
      9100,
      9570,
      9999,
      11434,
      15000,
      15001,
      15002,
      15100,
      15200,
      27002
    ],
    "port_conflicts": {
      "7105": 3,
      "7106": 3,
      "5595": 2,
      "5604": 2,
      "9999": 4,
      "9000": 2,
      "8220": 2,
      "7120": 5,
      "6379": 2,
      "9100": 2,
      "4222": 3,
      "6576": 2,
      "6578": 2,
      "6575": 2
    }
  },
  "recommendations": [
    {
      "type": "cleanup",
      "priority": "high",
      "issue": "Duplicate agent files detected",
      "details": {
        "agent_utils.py": 2,
        "remote_connector_agent.py": 2,
        "evaluate_agent.py": 2,
        "auto_fixer_agent.py": 3,
        "test_unified_web_agent.py": 2,
        "check_all_agents_health.py": 2,
        "translator_agent.py": 2,
        "AgentTrustScorer.py": 2,
        "unified_memory_reasoning_agent.py": 3,
        "check_agents.py": 2,
        "unified_web_agent.py": 2,
        "faulty_agent_rpc_test.py": 2,
        "faulty_rpc_agent_test_fixture.py": 2,
        "model_manager_agent.py": 4,
        "llm_task_agent.py": 2,
        "filesystem_assistant_agent.py": 3,
        "learning_mode_agent.py": 2,
        "DreamingModeAgent.py": 2,
        "test_unified_memory_agent.py": 2,
        "faulty_agent_backend_registry.py": 2,
        "rca_agent.py": 2,
        "agents.py": 2,
        "proactive_agent_interface.py": 2,
        "user_agent.py": 3,
        "tensorpipe_rpc_agent_test_fixture.py": 2,
        "tutoring_agent.py": 3,
        "context_summarizer_agent.py": 3,
        "LearningAdjusterAgent.py": 4,
        "tutoring_service_agent.py": 3,
        "rpc_agent_test_fixture.py": 2,
        "local_elastic_agent.py": 2,
        "agent_types.py": 2,
        "web_scraper_agent.py": 2,
        "PerformanceLoggerAgent.py": 2,
        "AuthenticationAgent.py": 2,
        "contextual_memory_agent.py": 2,
        "tutor_agent.py": 2,
        "DreamWorldAgent.py": 2,
        "unified_utils_agent.py": 2,
        "chain_of_thought_agent.py": 3,
        "streaming_tts_agent.py": 3
      },
      "suggestion": "Review and consolidate duplicate agents"
    },
    {
      "type": "configuration",
      "priority": "critical",
      "issue": "Port conflicts detected",
      "details": {
        "7105": 3,
        "7106": 3,
        "5595": 2,
        "5604": 2,
        "9999": 4,
        "9000": 2,
        "8220": 2,
        "7120": 5,
        "6379": 2,
        "9100": 2,
        "4222": 3,
        "6576": 2,
        "6578": 2,
        "6575": 2
      },
      "suggestion": "Resolve port conflicts to prevent service issues"
    },
    {
      "type": "monitoring",
      "priority": "medium",
      "issue": "Agents without health checks",
      "details": "189 agents lack health monitoring",
      "suggestion": "Implement health check endpoints for better monitoring"
    },
    {
      "type": "refactoring",
      "priority": "low",
      "issue": "Large agent files detected",
      "details": [
        {
          "path": "pc2_code/agents/unified_web_agent.py",
          "size": 80283
        },
        {
          "path": "pc2_code/agents/backups/unified_web_agent.py",
          "size": 77599
        },
        {
          "path": "common/core/base_agent.py",
          "size": 59254
        },
        {
          "path": "main_pc_code/agents/vram_optimizer_agent_day4_optimized.py",
          "size": 66352
        },
        {
          "path": "main_pc_code/agents/model_manager_agent.py",
          "size": 234712
        },
        {
          "path": "main_pc_code/agents/model_manager_agent_migrated.py",
          "size": 233242
        },
        {
          "path": "main_pc_code/agents/vram_optimizer_agent.py",
          "size": 66979
        },
        {
          "path": "main_pc_code/agents/model_manager_agent_test.py",
          "size": 233109
        },
        {
          "path": "main_pc_code/agents/model_manager_agent_day4_optimized.py",
          "size": 233512
        },
        {
          "path": "main_pc_code/agents/_trash_2025-06-13/archive/model_management/model_manager_agent.py",
          "size": 182369
        },
        {
          "path": "backups/week4_mma_migration/model_manager_agent_original.py",
          "size": 232844
        }
      ],
      "suggestion": "Consider breaking down large agents into smaller modules"
    }
  ],
  "summary": {
    "total_directories_scanned": 24,
    "total_agents_found": 294,
    "mainpc_agents": 9,
    "pc2_agents": 87,
    "shared_agents": 198,
    "total_classes": 192,
    "total_functions": 1500,
    "total_ports": 81,
    "recommendations_count": 4,
    "critical_issues": 1,
    "scan_completion": "100%"
  }
}