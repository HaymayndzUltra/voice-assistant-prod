[
  {
    "id": "observability_and_self_healing_setup",
    "description": "Action plan to set up the Observability Dashboard and the Self-Healing Supervisor, including scaffolding, testing, and configuration updates for both MainPC and PC2.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nThis initial step contains the user manual for this task plan. It outlines the commands to interact with the plan and the critical safety workflow that must be followed for all subsequent phases.\n\n**Technical Artifacts:**\n**I. CORE BEHAVIORAL MANDATES (FOR THE EXECUTING AI - READ FIRST)**\n1.  **Validate Assumptions:** Before starting, validate your assumptions about the task using the provided details.\n2.  **Clarify Ambiguity:** If information is ambiguous or missing, seek clarification before proceeding.\n3.  **Highlight Conflicts:** If you detect errors or conflicts in the data, highlight them immediately and suggest alternatives.\n4.  **Explain Rationale:** During execution, explain the rationale for each step taken.\n5.  **Review Before Submission:** Before submitting the final output, review the entire process to correct any errors or flawed assumptions.\n\n**II. HOW TO USE THIS TASK PLAN (COMMANDS & PROTOCOL)**\n\n1.  **COMMANDS:**\n    *   **TO VIEW DETAILS:** `python3 todo_manager.py show observability_and_self_healing_setup`\n    *   **TO MARK AS DONE:** `python3 todo_manager.py done observability_and_self_healing_setup <step_number>`\n\n2.  **WORKFLOW & SAFETY PROTOCOL (CRUCIAL):**\n    *   **FOCUS ON CURRENT STEP:** In each Phase, always read and understand the `IMPORTANT NOTE` first.\n    *   **REVIEW-CONFIRM-PROCEED LOOP:** After completing a Phase, review your work and the next Phase. If your confidence score is below 90%, REPEAT the review.\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating manual for the entire plan. Understanding these protocols is mandatory before proceeding to Phase 5. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      },
      {
        "text": "PHASE 5: Observability Dashboard (UI + API)\n\n**Explanations:**\nThis phase executes a one-shot script to create the Observability Dashboard. It involves scaffolding a FastAPI backend API, a React front-end, running tests, building a Docker image for the API, and patching the MainPC startup configuration.\n\n**Technical Artifacts / Tasks:**\n\n**1. Scaffold Backend API Service (1/7):**\nCreate the directory structure and files for the FastAPI backend.\n```bash\necho \"🔧 1/7  Scaffolding backend API service…\"\nAPI_DIR=\"services/obs_dashboard_api\"\nmkdir -p \"$API_DIR\" tests\n\ncat >\"$API_DIR/requirements.txt\"<<'REQ'\nfastapi>=0.111.0\nuvicorn[standard]>=0.29.0\nprometheus-client>=0.20.0\npython-dotenv>=1.0.1\nrequests>=2.31.0\nREQ\n\ncat >\"$API_DIR/Dockerfile\"<<'DOCK'\nFROM python:3.10-slim-bullseye\nENV PYTHONUNBUFFERED=1\nCOPY requirements.txt /tmp/\nRUN pip3 install --no-cache-dir -r /tmp/requirements.txt\nCOPY . /app\nWORKDIR /app\nENV OBS_HUB=http://localhost:9000\nCMD [\"uvicorn\", \"server:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8001\"]\nDOCK\n\ncat >\"$API_DIR/server.py\"<<'PY'\nfrom fastapi import FastAPI, HTTPException\nimport os, requests\nfrom prometheus_client import start_http_server\n\nOBS_HUB = os.getenv(\"OBS_HUB\", \"http://localhost:9000\")\nMETRICS_PORT = int(os.getenv(\"METRICS_PORT\", \"9107\"))\n\napp = FastAPI(title=\"ObservabilityDashboardAPI\")\nstart_http_server(METRICS_PORT)\n\n@app.get(\"/health\")\ndef health():\n    return {\"status\": \"ok\"}\n\n@app.get(\"/metrics/raw\")\ndef proxy_metrics():\n    try:\n        r = requests.get(f\"{OBS_HUB}/metrics\", timeout=5)\n        r.raise_for_status()\n        return r.text\n    except requests.RequestException as e:\n        raise HTTPException(status_code=502, detail=str(e))\nPY\n```\n\n**2. Scaffold React Front-End (2/7):**\nUse `create-react-app` if Node.js is available; otherwise, create a placeholder.\n```bash\necho \"🖥  2/7  Scaffolding React front-end (dashboard/)…\"\nif command -v npx >/dev/null 2>&1; then\n  npx --yes create-react-app dashboard --template typescript\n  pushd dashboard\n  npm run build --if-present\n  popd\nelse\n  mkdir -p dashboard\n  cat > dashboard/README.txt <<'TXT'\nFront-end React app placeholder.  Build the UI on a Node-enabled runner.\nTXT\nfi\n```\n\n**3. Run Basic Import Test for API (3/7):**\n```bash\necho \"🧪 3/7  Basic import test for API…\"\npython3 -m pip install --quiet pytest\ncat > tests/test_obs_dashboard_api_import.py <<'PYT'\ndef test_import():\n    import importlib; importlib.import_module(\"services.obs_dashboard_api.server\")\nPYT\npytest -q\n```\n\n**4. Docker Build Smoke-Test for API (4/7):**\n```bash\necho \"🐳 4/7  Docker build smoke-test for backend API…\"\ndocker build -t obs_dashboard_api:dev \"$API_DIR\"\n```\n\n**5. Update MainPC Startup Configuration (5/7):**\n```bash\necho \"🗂 5/7  Updating startup_config.yaml (MainPC)…\"\npython3 - <<'PY'\nimport yaml, pathlib, textwrap\nCFG = pathlib.Path(\"main_pc_code/config/startup_config.yaml\")\ndata = yaml.safe_load(CFG.read_text())\n\nagent = \"ObservabilityDashboardAPI\"\nagent_def = {\n    \"script_path\": \"services/obs_dashboard_api/server.py\",\n    \"port\": \"${PORT_OFFSET}+8001\",\n    \"health_check_port\": \"${PORT_OFFSET}+9007\",\n    \"required\": True,\n    \"dependencies\": [\"ObservabilityHub\"]\n}\n\ngroup = data.setdefault(\"agent_groups\", {}).setdefault(\"observability_ui\", {})\ngroup.setdefault(agent, agent_def)\n\ndg = data.setdefault(\"docker_groups\", {})\ndg.setdefault(\"observability_ui\", {\n    \"description\": \"Dashboard UI + API for system metrics\",\n    \"agents\": [agent]\n})\n\nCFG.write_text(textwrap.dedent(yaml.dump(data, sort_keys=False)))\nprint(\"MainPC config patched ✔\")\nPY\n```\n\n**6. YAML Validity Check (6/7):**\n```bash\necho \"📜 6/7  YAML validity check…\"\npython3 - <<'PY'\nimport yaml, pathlib\nyaml.safe_load(pathlib.Path(\"main_pc_code/config/startup_config.yaml\").read_text())\nprint(\"startup_config.yaml valid YAML ✔\")\nPY\n```\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase has a conditional step for the front-end (step 2) which depends on Node.js and `npx` being installed. If they are not present, only a placeholder will be created. The phase patches the MainPC configuration file. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      },
      {
        "text": "PHASE 6: Self-Healing Supervisor\n\n**Explanations:**\nThis phase creates a supervisor service that monitors the health of other running Docker containers and automatically restarts them on failure. It requires access to the Docker socket and patches the configuration files for both MainPC and PC2.\n\n**Technical Artifacts / Tasks:**\n\n**1. Scaffold Service Directory (1/8):**\nCreate the directory and all necessary files for the supervisor service.\n```bash\necho \"🔧 1/8  Scaffolding service directory…\"\nSVC=\"services/self_healing_supervisor\"\nmkdir -p \"$SVC\" tests\n\ncat >\"$SVC/requirements.txt\"<<'REQ'\naiohttp>=3.9.5\ndocker>=7.0.0\nprometheus-client>=0.20.0\nuvloop>=0.19.0\nREQ\n\ncat >\"$SVC/Dockerfile\"<<'DOCK'\nFROM python:3.10-slim-bullseye\nENV PYTHONUNBUFFERED=1\nRUN apt-get update && apt-get install -y python3-pip && rm -rf /var/lib/apt/lists/*\nCOPY requirements.txt /tmp/\nRUN pip3 install --no-cache-dir -r /tmp/requirements.txt\nCOPY . /app\nWORKDIR /app\nVOLUME /var/run/docker.sock\nCMD [\"python3\",\"supervisor.py\"]\nDOCK\n\ncat >\"$SVC/supervisor.py\"<<'PY'\n\"\"\"\nSelf-Healing Supervisor\n‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n• Polls health-check endpoints of all running containers every 30 s\n• On failure → docker restart + Prometheus counter\n• Requires /var/run/docker.sock mount (read-write)\n\"\"\"\nimport asyncio, os, json, time, logging\nimport docker, aiohttp\nfrom prometheus_client import start_http_server, Counter\n\nlogging.basicConfig(level=logging.INFO)\nLOG = logging.getLogger(\"self-healer\")\n\nPOLL_SEC = int(os.getenv(\"HEALTH_POLL_SEC\", \"30\"))\nMETRICS_PORT = int(os.getenv(\"METRICS_PORT\", \"9108\"))\nHEALTH_TIMEOUT = int(os.getenv(\"HEALTH_TIMEOUT_SEC\", \"5\"))\n\nRESTARTS = Counter(\"container_restarts_total\", \"Auto restarts\", [\"name\"])\n\nclient = docker.DockerClient(base_url=\"unix://var/run/docker.sock\")\nstart_http_server(METRICS_PORT)\n\nasync def check_container(cont):\n    url = cont.labels.get(\"health_check_url\")\n    if not url:\n        port = cont.labels.get(\"health_check_port\")\n        if port:\n            url = f\"http://localhost:{port}/health\"\n    if not url:\n        return\n    try:\n        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=HEALTH_TIMEOUT)) as sess:\n            async with sess.get(url) as r:\n                if r.status != 200:\n                    raise RuntimeError(f\"Bad status {r.status}\")\n    except Exception as e:\n        LOG.warning(\"Health failed for %s – restarting: %s\", cont.name, e)\n        RESTARTS.labels(cont.name).inc()\n        cont.restart()\n\nasync def loop():\n    while True:\n        for cont in client.containers.list():\n            await check_container(cont)\n        await asyncio.sleep(POLL_SEC)\n\nif __name__ == \"__main__\":\n    asyncio.run(loop())\nPY\n```\n\n**2. Run Unit-Test Import (2/8):**\n```bash\necho \"🧪 2/8  Unit-test import…\"\npython3 -m pip install --quiet pytest\ncat > tests/test_self_healer_import.py <<'PYT'\ndef test_import():\n    import importlib; importlib.import_module(\"services.self_healing_supervisor.supervisor\")\nPYT\npytest -q\n```\n\n**3. Docker Build Smoke-Test (3/8):**\n```bash\necho \"🐳 3/8  Docker build smoke-test…\"\ndocker build -t self_healing_supervisor:dev \"$SVC\"\n```\n\n**4. Update MainPC Startup Configuration (4/8):**\n```bash\necho \"🗂 4/8  Updating startup_config.yaml (MainPC)…\"\npython3 - <<'PY'\nimport yaml, pathlib, textwrap\nCFG = pathlib.Path(\"main_pc_code/config/startup_config.yaml\")\ndata = yaml.safe_load(CFG.read_text())\n\nagent = \"SelfHealingSupervisor\"\nagent_def = {\n    \"script_path\": \"services/self_healing_supervisor/supervisor.py\",\n    \"port\": \"${PORT_OFFSET}+7009\",            # internal only\n    \"health_check_port\": \"${PORT_OFFSET}+9008\",\n    \"required\": True,\n    \"dependencies\": [\"ObservabilityHub\"],\n    \"config\": {\"docker_sock\": \"/var/run/docker.sock\"}\n}\nfoundation = data.setdefault(\"agent_groups\", {}).setdefault(\"foundation_services\", {})\nfoundation.setdefault(agent, agent_def)\n\ndg = data.setdefault(\"docker_groups\", {})\ndg.setdefault(\"self_healing\", {\n    \"description\": \"Auto-restart supervisor for failed agents\",\n    \"agents\": [agent]\n})\nCFG.write_text(textwrap.dedent(yaml.dump(data, sort_keys=False)))\nprint(\"MainPC config patched ✔\")\nPY\n```\n\n**5. Update PC2 Startup Configuration (5/8):**\n```bash\necho \"🗂 5/8  Updating startup_config.yaml (PC2)…\"\npython3 - <<'PY'\nimport yaml, pathlib, textwrap\nCFG = pathlib.Path(\"pc2_code/config/startup_config.yaml\")\ndata = yaml.safe_load(CFG.read_text())\n\nagent = \"SelfHealingSupervisor\"\nsvc_def = {\n    \"name\": agent,\n    \"script_path\": \"services/self_healing_supervisor/supervisor.py\",\n    \"host\": \"0.0.0.0\",\n    \"port\": \"${PORT_OFFSET}+7009\",\n    \"health_check_port\": \"${PORT_OFFSET}+9008\",\n    \"required\": True,\n    \"dependencies\": [\"ObservabilityHub\"],\n    \"config\": {\"docker_sock\": \"/var/run/docker.sock\"}\n}\nif not any(s.get(\"name\") == agent for s in data.get(\"pc2_services\", [])):\n    data.setdefault(\"pc2_services\", []).append(svc_def)\n\ndg = data.setdefault(\"docker_groups\", {})\ndg.setdefault(\"self_healing\", {\n    \"description\": \"Auto-restart supervisor for failed agents\",\n    \"agents\": [agent]\n})\n\nCFG.write_text(textwrap.dedent(yaml.dump(data, sort_keys=False)))\nprint(\"PC2 config patched ✔\")\nPY\n```\n\n**6. YAML Validity Check (6/8):**\n```bash\necho \"📜 6/8  YAML validity check…\"\npython3 - <<'PY'\nimport yaml, pathlib\nfor p in [\"main_pc_code/config/startup_config.yaml\",\n          \"pc2_code/config/startup_config.yaml\"]:\n    yaml.safe_load(pathlib.Path(p).read_text())\nprint(\"Both YAML configs valid ✔\")\nPY\n```\n\n**7. Optional Code Formatting (7/8):**\n```bash\necho \"🧼 7/8  Optional code formatting (isort + black)…\"\npython3 - <<'PY'\nimport shutil, subprocess, pathlib, sys\ntarget=\"services/self_healing_supervisor\"\nif shutil.which(\"isort\"): subprocess.run([\"isort\", target, \"-q\"])\nif shutil.which(\"black\"): subprocess.run([\"black\", target, \"-q\"])\nPY || true\n```\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase modifies configuration files on both MainPC and PC2. It also requires access to the host's Docker socket (`/var/run/docker.sock`) to function correctly. Ensure permissions are correct for this mount. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      }
    ],
    "status": "in_progress",
    "created": "2024-05-24T12:25:00Z",
    "updated": "2024-05-24T12:25:00Z"
  }
]