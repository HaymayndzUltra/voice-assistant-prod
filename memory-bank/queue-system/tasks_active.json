[
  {
    "id": "streaming_translation_proxy_setup",
    "description": "Action plan to set up the Streaming Translation Proxy service, including scaffolding files, running tests, building a Docker image, and integrating it into the MainPC configuration.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nThis initial step contains the user manual for this task plan. It outlines the commands to interact with the plan and the critical safety workflow that must be followed for all subsequent phases.\n\n**Technical Artifacts:**\n**I. CORE BEHAVIORAL MANDATES (FOR THE EXECUTING AI - READ FIRST)**\n1.  **Validate Assumptions:** Before starting, validate your assumptions about the task using the provided details.\n2.  **Clarify Ambiguity:** If information is ambiguous or missing, seek clarification before proceeding.\n3.  **Highlight Conflicts:** If you detect errors or conflicts in the data, highlight them immediately and suggest alternatives.\n4.  **Explain Rationale:** During execution, explain the rationale for each step taken.\n5.  **Review Before Submission:** Before submitting the final output, review the entire process to correct any errors or flawed assumptions.\n\n**II. HOW TO USE THIS TASK PLAN (COMMANDS & PROTOCOL)**\n\n1.  **COMMANDS:**\n    *   **TO VIEW DETAILS:** `python3 todo_manager.py show streaming_translation_proxy_setup`\n    *   **TO MARK AS DONE:** `python3 todo_manager.py done streaming_translation_proxy_setup <step_number>`\n\n2.  **WORKFLOW & SAFETY PROTOCOL (CRUCIAL):**\n    *   **FOCUS ON CURRENT STEP:** In each Phase, always read and understand the `IMPORTANT NOTE` first.\n    *   **REVIEW-CONFIRM-PROCEED LOOP:** After completing a Phase, review your work and the next Phase. If your confidence score is below 90%, REPEAT the review.\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating manual for the entire plan. Understanding these protocols is mandatory before proceeding to Phase 3. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      },
      {
        "text": "PHASE 3: Streaming Translation Proxy Setup\n\n**Explanations:**\nThis phase executes the one-shot script to create, configure, and test the new Streaming Translation Proxy service. It involves creating all necessary files for the FastAPI/WebSocket server, running tests, building a Docker image, and updating the MainPC startup configuration.\n\n**Technical Artifacts / Tasks:**\n\n**1. Write Service Files (1/6):**\nCreate the service directory and populate it with the Python source code, Dockerfile, requirements, and a basic unit test.\n\n```bash\nset -euo pipefail\nSVC=\"services/streaming_translation_proxy\"\nmkdir -p \"$SVC\" tests\n\necho \"🔧 1/6  Writing service files...\"\ncat >\"$SVC/requirements.txt\"<<'REQ'\nfastapi>=0.111.0\nuvicorn[standard]>=0.29.0\nwebsockets>=12.0\nhttpx>=0.25.2\nprometheus-client>=0.20.0\nuvloop>=0.19.0\nREQ\n\ncat >\"$SVC/Dockerfile\"<<'DOCK'\nFROM python:3.10-slim-bullseye\nENV PYTHONUNBUFFERED=1\nCOPY requirements.txt /tmp/\nRUN pip3 install --no-cache-dir -r /tmp/requirements.txt\nCOPY . /app\nWORKDIR /app\nENV PORT=5596\nCMD [\"uvicorn\", \"proxy:app\", \"--host\", \"0.0.0.0\", \"--port\", \"5596\"]\nDOCK\n\ncat >\"$SVC/proxy.py\"<<'PY'\n\"\"\"\nStreaming Translation Proxy\n---------------------------\nWebSocket endpoint  `/ws`   → sentence-level translation\nHTTP health check   `/health`\nPrometheus metrics  `:9106/metrics`\nDepends on existing CloudTranslationService for heavy lifting.\n\"\"\"\nimport os, asyncio, httpx\nfrom fastapi import FastAPI, WebSocket, Depends\nfrom fastapi.responses import JSONResponse\nfrom prometheus_client import start_http_server, Counter\n\nOPENAI_URL  = os.getenv(\"OPENAI_URL\", \"https://api.openai.com/v1/chat/completions\")\nOPENAI_KEY  = os.getenv(\"OPENAI_API_KEY\", \"\")\nMODEL       = os.getenv(\"OPENAI_MODEL\", \"gpt-4o\")\nMETRICS_PORT = int(os.getenv(\"METRICS_PORT\", \"9106\"))\n\nTX_COUNTER = Counter(\"translation_requests_total\", \"Total translation requests\", [\"target\"])\n\napp = FastAPI(title=\"StreamingTranslationProxy\")\n\n@app.get(\"/health\")\ndef health():\n    return JSONResponse({\"status\": \"ok\"})\n\nasync def translate(text: str, target: str) -> str:\n    TX_COUNTER.labels(target).inc()\n    headers = {\"Authorization\": f\"Bearer {OPENAI_KEY}\"} if OPENAI_KEY else {}\n    payload = {\n        \"model\": MODEL,\n        \"messages\": [\n            {\"role\": \"user\", \"content\": f\"Translate to {target}: {text}\"}],\n        \"temperature\": 0.2,\n    }\n    async with httpx.AsyncClient(timeout=30.0) as cli:\n        r = await cli.post(OPENAI_URL, headers=headers, json=payload)\n        r.raise_for_status()\n        return r.json()[\"choices\"][0][\"message\"][\"content\"]\n\n@app.websocket(\"/ws\")\nasync def ws_endpoint(ws: WebSocket):\n    await ws.accept()\n    try:\n        while True:\n            data = await ws.receive_json()\n            text = data[\"text\"]\n            target = data.get(\"target_lang\", \"en\")\n            result = await translate(text, target)\n            await ws.send_json({\"translated\": result})\n    except Exception:\n        await ws.close()\n\n# Metrics\nstart_http_server(METRICS_PORT)\nPY\n\ncat >\"tests/test_translation_proxy_import.py\"<<'PYT'\ndef test_import():\n    import importlib; importlib.import_module(\"services.streaming_translation_proxy.proxy\")\nPYT\n```\n\n**2. Run Unit Test (2/6):**\nInstall testing dependencies and run the import test to verify the file structure.\n\n```bash\necho \"🧪 2/6  Running unit-test (import)…\"\npython3 -m pip install --quiet pytest\npytest -q\n```\n\n**3. Docker Build Smoke-Test (3/6):**\nBuild the Docker image to ensure the Dockerfile and dependencies are correct.\n\n```bash\nSVC=\"services/streaming_translation_proxy\"\necho \"🐳 3/6  Docker build smoke-test…\"\ndocker build -t translation_proxy:dev \"$SVC\"\n```\n\n**4. Update MainPC Startup Configuration (4/6):**\nExecute a Python script to programmatically add the new translation proxy service to the `startup_config.yaml` file.\n\n```bash\necho \"🗂 4/6  Updating MainPC startup_config.yaml…\"\npython3 - <<'PY'\nimport yaml, pathlib, textwrap\nCFG = pathlib.Path(\"main_pc_code/config/startup_config.yaml\")\ndata = yaml.safe_load(CFG.read_text())\n\nagent_name = \"StreamingTranslationProxy\"\nagent_def = {\n    \"script_path\": \"services/streaming_translation_proxy/proxy.py\",\n    \"port\": \"${PORT_OFFSET}+5596\",\n    \"health_check_port\": \"${PORT_OFFSET}+6596\",\n    \"required\": True,\n    \"dependencies\": [\"CloudTranslationService\", \"SystemDigitalTwin\"]\n}\n\ngroup = data.setdefault(\"agent_groups\", {}).setdefault(\"translation_services\", {})\nif agent_name not in group:\n    group[agent_name] = agent_def\n\ndg = data.setdefault(\"docker_groups\", {})\ndg.setdefault(\"translation_proxy\", {\n    \"description\": \"Low-latency WebSocket translation proxy\",\n    \"agents\": [agent_name]\n})\n\nCFG.write_text(textwrap.dedent(yaml.dump(data, sort_keys=False)))\nprint(\"MainPC config patched ✔\")\nPY\n```\n\n**5. YAML Lint Check (5/6):**\nValidate that the modified `startup_config.yaml` is still a valid YAML file.\n\n```bash\necho \"📜 5/6  YAML lint check…\"\npython3 - <<'PY'\nimport yaml, pathlib, sys\nyaml.safe_load(pathlib.Path(\"main_pc_code/config/startup_config.yaml\").read_text())\nprint(\"startup_config.yaml valid YAML ✔\")\nPY\n```\n\n**6. Finalization (6/6):**\nConfirm that all steps are complete and the service is integrated.\n\n```bash\necho \"✅ 6/6  PHASE-3 complete – Streaming Translation Proxy fully integrated.\"\n```\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase involves creating multiple files and patching a core configuration file. Execute each step sequentially and verify its output. Ensure the YAML config is valid before considering the phase complete. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      }
    ],
    "status": "in_progress",
    "created": "2024-05-24T12:10:00Z",
    "updated": "2024-05-24T12:10:00Z"
  }
]