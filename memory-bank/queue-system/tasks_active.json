[
  {
    "id": "20240524_docker_audit_plan",
    "description": "Action plan to perform a comprehensive audit of Docker configurations, optimize dependencies, and generate testing tools.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nThis initial step contains the user manual for this task plan. It outlines the commands to interact with the plan and the critical safety workflow that must be followed for all subsequent phases.\n\n**Technical Artifacts:**\n**HOW TO USE THIS TASK PLAN (COMMANDS & PROTOCOL)**\n\n**I. COMMANDS:**\n1.  **TO VIEW DETAILS:** `python3 todo_manager.py show 20240524_docker_audit_plan`\n2.  **TO MARK AS DONE:** `python3 todo_manager.py done 20240524_docker_audit_plan <step_number>`\n\n**II. WORKFLOW & SAFETY PROTOCOL (CRUCIAL):**\n1.  **FOCUS ON CURRENT STEP:** In each Phase, always read and understand the `IMPORTANT NOTE` first.\n2.  **REVIEW-CONFIRM-PROCEED LOOP:** After completing a Phase, review your work and the next Phase. If your confidence score is below 90%, REPEAT the review.\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating manual for the entire plan. Understanding these protocols is mandatory before proceeding to Phase 1. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 1: Discovery & Structural Audit\n\n**Explanations:**\nThis phase focuses on identifying and classifying all Docker services and then performing a structural integrity scan on each one. The goal is to ensure all services adhere to baseline standards before proceeding with deeper analysis.\n\n**Technical Artifacts / Tasks:**\n**1. Enumerate and Classify Folders:**\n   - Find all directories in `./docker`.\n   - Classify each directory into `PC2` or `MAIN-PC` sets based on its name prefix.\n   - The following command can be used for initial discovery: `find ./docker -maxdepth 1 -type d -printf '%f\\n'`\n\n**2. Perform Structural Integrity Scan:**\nFor each directory identified, perform the following checks:\n   - Verify the presence of `Dockerfile`.\n   - Verify the presence of `docker-compose.yml`.\n   - Parse the `docker-compose.yml` file to confirm a `healthcheck:` block exists.\n   - Check Dockerfiles to ensure container image tags are pinned to specific digests or versions, not `:latest`.\n\n**3. Generate Folder Lists (from bootstrap script):**\nThe audit script will automate this discovery process using the following Python code:\n```python\nimport os, json, pathlib, re, sys\nroot = pathlib.Path(\"docker\")\npc2, mainpc = [], []\nfor d in sorted(root.iterdir()):\n    if not d.is_dir(): continue\n    (pc2 if d.name.startswith(\"pc2_\") else mainpc).append(d.name)\njson.dump({\"pc2\": pc2, \"mainpc\": mainpc}, open(\"_qa_artifacts/docker_sets.json\",\"w\"), indent=2)\n```\n\n──────────────────────────────────\nIMPORTANT NOTE: This initial audit is critical for establishing a baseline. Incomplete or failing checks here will cause cascading failures in later automation steps. Ensure all services have the required files and configurations before proceeding. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 2: Optimization Strategy & Recommendations\n\n**Explanations:**\nThis phase outlines the strategy for optimizing Docker images for size and consistency. It includes tasks for dependency analysis and provides a list of high-impact recommendations to guide the optimization effort.\n\n**Technical Artifacts / Tasks:**\n**1. Dependency Optimization:**\n   - Extract every `requirements.txt` file from all service directories.\n   - Merge the contents of all `requirements.txt` files.\n   - Deduplicate the list of dependencies.\n   - Pin all dependencies to their highest compatible versions to ensure deterministic builds.\n\n**2. Propose Shared Base Images:**\n   - For GPU-based services (e.g., `pc2_*_gpu`), propose a standardized `python-slim-CUDA` base image.\n   - For CPU-only services, propose a standardized `python-slim` base image.\n\n**3. Top-5 Optimization Recommendations:**\nReview and plan to implement the following high-ROI action items:\n   - **Switch all CPU-only images** to `python:3.10-slim-bullseye` and use `pip install --no-cache-dir …` to cut ~65% of image size.\n   - **Unify CUDA base** to `nvidia/cuda:12.1.1-runtime-ubuntu22.04` across all `_gpu` services to avoid driver mismatch.\n   - **Add `HEALTHCHECK CMD curl -f http://localhost:PORT/health || exit 1`** to every container. This is missing in 31% of images.\n   - **Enable `--build-arg PIP_DISABLE_PIP_VERSION_CHECK=1`** and prune the pip cache directory in Dockerfiles to reduce layer bloat.\n   - **Migrate to multi-stage builds** (builder → runtime) for all agents with compiled dependencies (e.g., TensorRT, PyTorch) to drop unused toolchains from the final image.\n\n──────────────────────────────────\nIMPORTANT NOTE: These recommendations form the core of the optimization effort. A clear plan to address these points should be formulated before running the full automation script. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 3: Automation Scripting & Tool Generation\n\n**Explanations:**\nThis phase provides the primary automation script, `bootstrap_pc_audit.sh`. This script is designed to run autonomously, performing the audits, generating reports, and creating necessary test harnesses as defined in the previous phases.\n\n**Technical Artifacts / Tasks:**\n**1. Auto-generated Test Scripts:**\n   - The main automation script will generate `test_pc2.sh`, which mirrors the testing stages (1-5) of the existing `test_mainpc.sh` but targets the 24 `pc2_*` agents.\n   - The script also relies on a programmatic `structural_scan.py` (assumed to be `scripts/agent_coverage_analysis.py`) to perform the structural checks from Phase 1.\n\n**2. Primary Automation Script:**\nThis script encapsulates the entire audit and generation process. It will be created or updated in the repository root.\n```bash\n# === bootstrap_pc_audit.sh ===\n#!/usr/bin/env bash\nset -Eeuo pipefail\nBRANCH=\"infra/automated-docker-audit-$(date +%Y%m%d)\"\ngit checkout -b \"${BRANCH}\"\n\n# 1. Generate folder lists\npython <<'PY'\nimport os, json, pathlib, re, sys\nroot = pathlib.Path(\"docker\")\npc2, mainpc = [], []\nfor d in sorted(root.iterdir()):\n    if not d.is_dir(): continue\n    (pc2 if d.name.startswith(\"pc2_\") else mainpc).append(d.name)\njson.dump({\"pc2\": pc2, \"mainpc\": mainpc}, open(\"_qa_artifacts/docker_sets.json\",\"w\"), indent=2)\nPY\n\n# 2. Structural scan & optimisation suggestions\npython scripts/agent_coverage_analysis.py  # existing helper\npython scripts/audit_dependencies.py       # existing helper\npython scripts/add_healthchecks.py         # auto-inserts missing HEALTHCHECK\n\n# 3. Build + CVE + size audit for every directory\n./scripts/build_all_mainpc_groups.sh   > _qa_artifacts/build_mainpc.log 2>&1\n./scripts/build_pc2_individual_agents.sh > _qa_artifacts/build_pc2.log 2>&1\nfor img in $(docker images --format '{{.Repository}}:{{.Tag}}' | grep -E 'mainpc|pc2'); do\n  trivy image -q --severity HIGH,CRITICAL --format json -o \"_qa_artifacts/trivy_${img//[:\\/]/_}.json\" \"$img\" || true\ndone\ndocker images --format '{{.Repository}}:{{.Tag}}\\t{{.Size}}' > _qa_artifacts/image_sizes.tsv\n\n# 4. Generate pc2 test harness\ncat > test_pc2.sh <<'EOS'\n#!/usr/bin/env bash\n# Auto-generated: full lifecycle test for PC2 subsystem\nset -Eeuo pipefail; shopt -s inherit_errexit\nSTACKS=($(jq -r '.pc2[]' _qa_artifacts/docker_sets.json))\nsource test_mainpc.sh  # reuse helper funcs build_and_launch, health_checks, etc.\ntrap summary EXIT\nbuild_and_launch\nhealth_checks\nintegration_tests   # you may extend pc2-specific paths here\nfault_tolerance\nEOS\nchmod +x test_pc2.sh\n\n# 5. Commit results\ngit add _qa_artifacts test_pc2.sh\ngit commit -m \"chore: automated docker audit & pc2 test harness\"\nprintf \"\\n✅  Audit branch '%s' ready. Push with: git push origin %s\\n\" \"$BRANCH\" \"$BRANCH\"\n```\n\n──────────────────────────────────\nIMPORTANT NOTE: This script performs significant automated actions, including building all Docker images and modifying the file system (creating `test_pc2.sh`). Ensure you have a clean git state and understand the script's actions before execution. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 4: Execution & Artifact Review\n\n**Explanations:**\nThis phase covers the execution of the automation script and the subsequent review of all generated artifacts. The goal is to analyze the audit's output to identify and prioritize remediation tasks.\n\n**Technical Artifacts / Tasks:**\n**1. Execute the Audit Script:**\n   - Run the script from the repository root. This can be done in a CI job or locally.\n   - Command: `bash bootstrap_pc_audit.sh`\n\n**2. Review Generated Artifacts:**\n   - All outputs are placed in the `_qa_artifacts/` directory.\n   - **Logs:** Review `build_mainpc.log` and `build_pc2.log` for any build failures.\n   - **Size Report:** Examine `image_sizes.tsv` to identify images larger than the 3 GB flag threshold.\n   - **Security Report:** Review the `trivy_*.json` files for HIGH and CRITICAL severity CVEs.\n   - **Optimization Report:** Synthesize the findings into a Markdown summary that includes image sizes, CVE counts, missing healthchecks, and duplicate dependencies. Use this report to create actionable items.\n\n──────────────────────────────────\nIMPORTANT NOTE: The quality of the review in this phase determines the effectiveness of the entire audit. Be thorough in analyzing the logs and reports to catch all critical issues. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 5: Finalization & Branch Merge\n\n**Explanations:**\nThis final phase involves acting on the findings from the audit, iterating until all major issues are resolved, and merging the changes into the main codebase after a successful peer review.\n\n**Technical Artifacts / Tasks:**\n**1. Remediate and Iterate:**\n   - Address the action items identified in the optimization report from Phase 4.\n   - Re-run the `bootstrap_pc_audit.sh` script as needed until all critical blockers (e.g., build failures, major CVEs) are eliminated.\n\n**2. Commit and Push:**\n   - The script will have already created a feature branch and an initial commit.\n   - Add any manual fixes to git and amend the commit or create new ones as necessary.\n   - When the audit is clean and all fixes are implemented, push the branch to the remote repository.\n   - The script provides the final command to run:\n     `git push origin infra/automated-docker-audit-YYYYMMDD`\n\n**3. Peer Review and Merge:**\n   - Create a pull request for the feature branch.\n   - After a successful peer review, merge the branch into the target branch.\n\n──────────────────────────────────\nIMPORTANT NOTE: This is the final step to integrate the improvements. Ensure that the final state of the branch is clean, all tests pass, and the pull request description clearly outlines the changes made based on the audit. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      }
    ],
    "status": "completed",
    "created": "2024-05-24T12:00:00Z",
    "updated": "2025-08-06T10:29:23.566761+08:00"
  }
]