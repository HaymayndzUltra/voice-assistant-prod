[
  {
    "id": "20250807_mfh_implementation",
    "description": "Action plan to implement, test, and deploy the Memory Fusion Hub (MFH) microservice, replacing seven legacy agents.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nThis initial step contains the user manual for this task plan. It outlines the commands to interact with the plan and the critical safety workflow that must be followed for all subsequent phases.\n\n**Technical Artifacts:**\n**I. CORE BEHAVIORAL MANDATES**\n*   **Execute Serially:** You must execute the phases in the prescribed order. Do not skip phases.\n*   **Verify Each Step:** After completing a phase, verify its success before marking it as 'done'.\n*   **Consult Source:** This plan is an interpretation of the source document. If any ambiguity arises, the source document is the ground truth.\n\n**II. HOW TO USE THIS TASK PLAN**\n*   **To Show the Plan:** `python3 todo_manager.py show 20250807_mfh_implementation`\n*   **To Mark a Phase Done:** `python3 todo_manager.py done 20250807_mfh_implementation <phase_number>` (e.g., `... done 20250807_mfh_implementation 0`)\n\n**Concluding Step: Update Plan Status**\nTo officially conclude this setup phase and update the plan's state, run the following commands. This ensures the task manager knows you are ready to proceed to the first technical phase.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_mfh_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_mfh_implementation 0`\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating manual for the entire plan. Understanding these protocols is mandatory before proceeding to Phase 1. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 1: Project Scaffolding & Dependencies\n\n**Explanations:**\nThis phase involves creating the directory structure, copying essential utility files, and setting up the initial Python environment with all required dependencies.\n\n**Technical Artifacts / Tasks:**\n**I. Create Directory Structure:**\nCreate the following directory and file layout. Empty `__init__.py` files should be created in each subdirectory to mark them as Python packages.\n```\nmemory_fusion_hub/\n├── __init__.py\n├── app.py\n├── config/\n│   ├── __init__.py\n│   ├── default.yaml\n│   ├── main_pc.yaml\n│   └── pc2.yaml\n├── adapters/\n│   ├── __init__.py\n│   ├── sqlite_adapter.py\n│   ├── postgres_adapter.py\n│   └── redis_cache.py\n├── core/\n│   ├── __init__.py\n│   ├── models.py\n│   ├── repository.py\n│   ├── fusion_service.py\n│   ├── event_log.py\n│   └── telemetry.py\n├── transport/\n│   ├── __init__.py\n│   ├── zmq_server.py\n│   └── grpc_server.py\n├── resiliency/\n│   ├── __init__.py\n│   ├── circuit_breaker.py\n│   └── bulkhead.py\n├── requirements.txt\n└── README.md\n```\n\n**II. Copy Canonical Utilities:**\nExecute the following commands to copy shared, canonical code into the new project structure.\n```bash\ncp common/resiliency/bulkhead.py memory_fusion_hub/resiliency/\ncp main_pc_code/agents/memory_client.py memory_fusion_hub/resiliency/circuit_breaker.py\n```\n\n**III. Populate `requirements.txt`:**\nAdd the following dependencies to `memory_fusion_hub/requirements.txt`.\n```\npydantic==1.10.13\npyzmq==26.0.3\ngrpcio==1.63.0\ngrpcio-tools==1.63.0\nredis==5.0.1\nsqlalchemy==2.0.30\naiosqlite==0.19.0\nprometheus-client==0.20.0\ntenacity==8.2.3\n```\n\n**IV. Install Dependencies:**\nRun the following command from your terminal:\n`pip install -r memory_fusion_hub/requirements.txt`\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_mfh_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_mfh_implementation 1`\n\n──────────────────────────────────\nIMPORTANT NOTE: A correct project structure and environment are critical for all subsequent development. Verify that all files are in the correct locations and all dependencies are installed without errors before proceeding.",
        "done": true
      },
      {
        "text": "PHASE 2: Configuration & Core Data Models\n\n**Explanations:**\nDefine the application's configuration schema in `default.yaml` and implement the core Pydantic data models that will be used throughout the service.\n\n**Technical Artifacts / Tasks:**\n**I. Define Configuration Schema (`config/default.yaml`):**\nPopulate `memory_fusion_hub/config/default.yaml` with the following content.\n```yaml\ntitle: MemoryFusionHubConfig\nversion: 1.0\n\nserver:\n  zmq_port: 5713\n  grpc_port: 5714\n  max_workers: 8\n\nstorage:\n  write_strategy: \"event_sourcing\"   # options: direct, event_sourcing\n  sqlite_path: \"${MFH_SQLITE:/workspace/memory.db}\"\n  postgres_url: \"${POSTGRES_URL:}\"\n  redis_url: \"${REDIS_URL:redis://localhost:6379/0}\"\n  cache_ttl_seconds: 900\n\nreplication:\n  enabled: true\n  event_topic: \"memory_events\"\n  nats_url: \"${NATS_URL:nats://localhost:4222}\"\n\nresilience:\n  circuit_breaker:\n    failure_threshold: 5\n    reset_timeout: 30\n  bulkhead:\n    max_concurrent: 32\n    max_queue_size: 128\n```\n\n**II. Implement Core Models (`core/models.py`):**\nIn `memory_fusion_hub/core/models.py`, define the Pydantic objects: `MemoryItem`, `SessionData`, `KnowledgeRecord`, and `MemoryEvent`. Ensure they support JSON-schema generation.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_mfh_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_mfh_implementation 2`\n\n──────────────────────────────────\nIMPORTANT NOTE: The configuration and data models are the backbone of the application. Errors here will have cascading effects. Ensure the YAML is valid and Pydantic models are correctly defined.",
        "done": true
      },
      {
        "text": "PHASE 3: Core Logic Implementation\n\n**Explanations:**\nImplement the heart of the Memory Fusion Hub. This includes the data repository abstractions, the Redis cache adapter, the event log writer, and the main `FusionService` business logic.\n\n**Technical Artifacts / Tasks:**\n**I. Implement Repository (`core/repository.py`):**\nDefine the `AbstractRepository` interface and create concrete implementations `SQLiteRepository` and `PostgresRepository`. Wrap them with the `CircuitBreaker` and `@retry_with_backoff` decorator.\n```python\nclass AbstractRepository(ABC):\n    @abstractmethod\n    async def get(self, key: str) -> Optional[BaseModel]: ...\n    @abstractmethod\n    async def put(self, key: str, value: BaseModel) -> None: ...\n    @abstractmethod\n    async def delete(self, key: str) -> None: ...\n```\n\n**II. Implement Redis Cache (`adapters/redis_cache.py`):**\nCreate a TTL-aware cache class with lazy connection logic.\n\n**III. Implement Event Log (`core/event_log.py`):**\nCreate an append-only log writer that publishes `MemoryEvent` objects, using Redis Streams or NATS JetStream.\n\n**IV. Implement Fusion Service (`core/fusion_service.py`):**\nImplement the main service class with its core methods.\n```python\nclass FusionService:\n    def __init__(self, cfg: FusionConfig):\n        self.cache = RedisCache(cfg.storage.redis_url, cfg.storage.cache_ttl_seconds)\n        self.repo = build_repo(cfg.storage)          # returns appropriate repository\n        self.event_log = EventLog(cfg.replication)\n        self.metrics = Telemetry()                   # Prometheus counters & histograms\n        self.lock = asyncio.Lock()                   # to guard write sequence\n\n    @retry_with_backoff(...)\n    async def get(self, key: str) -> MemoryItem:\n        cached = await self.cache.get(key)\n        if cached:\n            self.metrics.cache_hits.inc()\n            return cached\n        self.metrics.cache_misses.inc()\n        item = await self.repo.get(key)\n        await self.cache.put(key, item)\n        return item\n\n    @bulkhead_guard\n    async def put(self, key: str, item: MemoryItem):\n        async with self.lock:                       # ensure event order\n            await self.repo.put(key, item)\n            await self.cache.put(key, item)\n            await self.event_log.publish(\"PUT\", item)\n\n    async def delete(self, key: str):\n        await self.repo.delete(key)\n        await self.cache.evict(key)\n        await self.event_log.publish(\"DELETE\", key)\n```\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_mfh_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_mfh_implementation 3`\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the primary business logic. Pay close attention to the interaction between the repository, cache, and event log, especially the locking mechanism in the `put` method to ensure data consistency.",
        "done": false
      },
      {
        "text": "PHASE 4: Transport Layer & gRPC Compilation\n\n**Explanations:**\nImplement the ZMQ and gRPC server façades that expose the `FusionService` logic to clients. This includes compiling the required gRPC protocol buffer stubs.\n\n**Technical Artifacts / Tasks:**\n**I. Compile gRPC Stubs:**\nFirst, create the `memory_fusion.proto` file with the `MemoryFusionService` definition (Get, Put, Delete, BatchGet RPCs). Then, run the following command to generate the Python stubs:\n```bash\npython -m grpc_tools.protoc -I. --python_out=memory_fusion_hub/ --grpc_python_out=memory_fusion_hub/ memory_fusion.proto\n```\n\n**II. Implement ZMQ Server (`transport/zmq_server.py`):**\nCreate the ZMQ REQ/REP server. It should accept requests, parse the action and payload, call the appropriate `FusionService` method, and return the result.\n\n**III. Implement gRPC Server (`transport/grpc_server.py`):**\nImplement the gRPC server using the compiled stubs. This server will also delegate calls to the shared `FusionService` instance.\n\n**IV. Server Execution:**\nEnsure both servers are designed to be started within a `ThreadPoolExecutor`, controlled by the `max_workers` setting from the configuration.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_mfh_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_mfh_implementation 4`\n\n──────────────────────────────────\nIMPORTANT NOTE: The transport layer is the public API of the service. Ensure that data serialization/deserialization (Pydantic for ZMQ, Protobuf for gRPC) is handled correctly to prevent communication errors.",
        "done": false
      },
      {
        "text": "PHASE 5: Application Bootstrap & Entry-point\n\n**Explanations:**\nCreate the main application entry-point (`app.py`) which ties everything together: configuration loading, service initialization, server startup, and graceful shutdown.\n\n**Technical Artifacts / Tasks:**\n**I. Implement `app.py`:**\nThe script must perform the following actions in order:\n1.  Load configuration using `UnifiedConfigLoader` (merging `default.yaml`, host-specific overrides, and environment variables).\n2.  Initialize a single instance of `FusionService`.\n3.  Start the Prometheus HTTP endpoint on the `/metrics` path.\n4.  Launch the ZMQ and gRPC servers asynchronously (e.g., using `asyncio` and a `ThreadPoolExecutor`).\n5.  Implement a graceful shutdown handler for `SIGTERM` and `SIGINT` signals to ensure the event log is flushed and database connections are closed properly.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_mfh_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_mfh_implementation 5`\n\n──────────────────────────────────\nIMPORTANT NOTE: The bootstrap script is critical for service stability and operability. Thoroughly test the startup sequence and the graceful shutdown logic to prevent data loss or orphaned processes.",
        "done": false
      },
      {
        "text": "PHASE 6: Testing & Performance Validation\n\n**Explanations:**\nConduct comprehensive testing to ensure the service is correct, robust, and performant before deployment.\n\n**Technical Artifacts / Tasks:**\n**I. Unit Tests:**\nWrite and pass `pytest` unit tests for the repository layer, cache logic, and `FusionService` business logic.\n\n**II. Static Analysis:**\nRun static analysis tools and ensure they pass with a high score.\n*   `mypy --strict`\n*   `flake8` (< 0.9 score)\n\n**III. Load Testing:**\nUse Locust to perform a load test against the service. The primary goal is to verify performance under load.\n*   **Target:** ≤ 20 ms p95 latency per single read request.\n*   **Load:** 1,000 requests per second (rps).\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_mfh_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_mfh_implementation 6`\n\n──────────────────────────────────\nIMPORTANT NOTE: Do not proceed to deployment without passing all tests. Performance validation is especially important to ensure the new service meets or exceeds the capabilities of the legacy systems it replaces.",
        "done": false
      },
      {
        "text": "PHASE 7: Final Verification, Deployment & Migration\n\n**Explanations:**\nPerform the final pre-production checks, deploy the service, and migrate traffic from the legacy agents. This phase also includes reviewing the risk mitigation strategies.\n\n**Technical Artifacts / Tasks:**\n**I. Final Verification Gate:**\nExecute and confirm success for every item on this checklist:\n*   **Integration Tests:** A legacy agent (e.g., `LearningManager`) performs 1,000 sequential reads/writes against the new MFH without error.\n*   **Failover Drill:** Manually kill the primary MFH process; verify that a replica continues serving requests without interruption.\n*   **Cross-Machine Consistency:** A random write on a `pc2` replica appears on a `main_pc` replica within 200 ms (via the NATS stream).\n*   **Audit Log Review:** Use an `event_log.replay()` function to rehydrate a database from the event log and verify it has an identical checksum to the original.\n\n**II. Review Risk Mitigation Checklist:**\nConfirm that mitigations are in place for all identified risks (e.g., API key security, TLS, structured logging, circuit breakers).\n\n**III. Deployment & Migration:**\n1.  Deploy two replicas of the MFH service per host, placed behind a `zmq.ROUTER` socket for load balancing.\n2.  Switch existing agents’ `mem_port` configuration to point to the new MFH port (e.g., 5713).\n3.  Monitor system stability and performance.\n4.  Once stable, decommission the seven legacy memory agents.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_mfh_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_mfh_implementation 7`\n\n──────────────────────────────────\nIMPORTANT NOTE: This is the final gate before the project is considered complete. Be methodical and rigorous during the verification and migration process. Successful completion of this phase means the Memory Fusion Hub is production-ready.",
        "done": false
      }
    ],
    "status": "in_progress",
    "created": "2024-05-24T14:15:00Z",
    "updated": "2025-08-08T01:57:06.084809+08:00"
  }
]