[
  {
    "id": "20240521_mainpc_testing_blueprint",
    "description": "Action plan para sa pag-validate ng Main-PC stack, base sa 5-stage testing blueprint.",
    "todos": [
      {
        "text": "PHASE 1: Local Main-PC Validation\n\n• I-angat ang stack gamit ang `docker-compose.mainpc-local.yml`.\n• Patakbuhin ang lahat ng tests maliban sa chaos tests: `pytest -v -m \"not chaos\"`.\n• Mga kailangan para pumasa: 100% health status sa lahat ng serbisyo, nakikita ang GPU, at may natatanggap na traces sa ObservabilityHub.\n\n────────────────── MGA KAUGNAY NA FILES ──────────────────\n\n# docker-compose.mainpc-local.yml\nversion: \"3.9\"\nx-main: &defaults\n  restart: on-failure\n  networks: [ mainpc_net ]\n  environment:\n    - PC_ROLE=mainpc\n    - OTEL_EXPORTER_OTLP_ENDPOINT=http://observabilityhub:4318\nservices:\n  coordination:        { <<: *defaults, image: mainpc/coordination:latest,        ports: [\"51100:51100\"] }\n  emotion_system:      { <<: *defaults, image: mainpc/emotion_system:latest,      ports: [\"51200:51200\"] }\n  infra_core:          { <<: *defaults, image: mainpc/infra_core:latest,          ports: [\"51300:51300\"] }\n  language_stack:      { <<: *defaults, image: mainpc/language_stack:latest,      ports: [\"51400:51400\"] }\n  learning_gpu:        { <<: *defaults, image: mainpc/learning_gpu:latest,\n                          deploy: { resources: { reservations: { devices: [ { capabilities: [\"gpu\"] } ] } } },\n                          ports: [\"51500:51500\"] }\n  memory_stack:        { <<: *defaults, image: mainpc/memory_stack:latest,        ports: [\"51600:51600\"] }\n  observability:       { <<: *defaults, image: mainpc/observability:latest,       ports: [\"4318:4318\", \"5601:5601\"] }\n  reasoning_gpu:       { <<: *defaults, image: mainpc/reasoning_gpu:latest,\n                          deploy: { resources: { reservations: { devices: [ { capabilities: [\"gpu\"] } ] } } },\n                          ports: [\"51700:51700\"] }\n  speech_gpu:          { <<: *defaults, image: mainpc/speech_gpu:latest,\n                          deploy: { resources: { reservations: { devices: [ { capabilities: [\"gpu\"] } ] } } },\n                          ports: [\"51800:51800\"] }\n  translation_services:{ <<: *defaults, image: mainpc/translation_services:latest, ports: [\"51900:51900\"] }\n  utility_cpu:         { <<: *defaults, image: mainpc/utility_cpu:latest,         ports: [\"52000:52000\"] }\n  vision_gpu:          { <<: *defaults, image: mainpc/vision_gpu:latest,\n                          deploy: { resources: { reservations: { devices: [ { capabilities: [\"gpu\"] } ] } } },\n                          ports: [\"52100:52100\"] }\nnetworks:\n  mainpc_net: {}\n\n# tests/conftest_mainpc.py\nimport pytest, subprocess, time, socket\nCOMPOSE_FILE = \"docker-compose.mainpc-local.yml\"\nTIMEOUT = 150\nPORTS = list(range(51100, 52101, 100)) + [4318, 5601]\n@pytest.fixture(scope=\"session\", autouse=True)\ndef mainpc_stack():\n    subprocess.run([\"docker\", \"compose\", \"-f\", COMPOSE_FILE, \"pull\"], check=True)\n    up = subprocess.Popen([\"docker\", \"compose\", \"-f\", COMPOSE_FILE, \"up\", \"-d\"])\n    up.wait(TIMEOUT)\n    _wait_for_ports()\n    yield\n    subprocess.call([\"docker\", \"compose\", \"-f\", COMPOSE_FILE, \"down\", \"-v\"])\n\n# tests/test_core_health.py\nimport requests, pytest, time, os\nSERVICES = {\n    \"coordination\": 51100, \"emotion_system\": 51200, \"infra_core\": 51300,\n    \"language_stack\": 51400, \"learning_gpu\": 51500, \"memory_stack\": 51600,\n    \"reasoning_gpu\": 51700, \"speech_gpu\": 51800, \"translation_services\": 51900,\n    \"utility_cpu\": 52000, \"vision_gpu\": 52100,\n}\n@pytest.mark.parametrize(\"svc,port\", SERVICES.items())\ndef test_health_endpoints(svc, port):\n    r = requests.get(f\"http://localhost:{port}/health\", timeout=5)\n    assert r.status_code == 200, f\"{svc} unhealthy\"\n    assert r.json().get(\"status\") == \"ok\"\n\n# tests/test_inter_service_calls.py\nimport requests, pytest\nCASES = [\n    (\"coordination\", 51100, \"/delegate\", \"language_stack\", 51400),\n    (\"memory_stack\", 51600, \"/retrieve\", \"reasoning_gpu\", 51700),\n    (\"utility_cpu\", 52000, \"/exec\", \"translation_services\", 51900),\n]\n@pytest.mark.parametrize(\"src,src_p,endpoint,dst,dst_p\", CASES)\ndef test_cross_calls(src, src_p, endpoint, dst, dst_p):\n    payload = {\"target\": f\"http://{dst}:{dst_p}/health\"}\n    r = requests.post(f\"http://localhost:{src_p}{endpoint}\", json=payload, timeout=6)\n    assert r.status_code == 200\n    assert r.json()[\"target_status\"] == \"ok\"\n\n──────────────────────────────────\nMAHALAGANG PAALALA: Tiyaking 100% ang resulta ng lahat ng local tests. Ito ang pundasyon ng buong stack. Anumang isyu dito ay magdudulot ng mas malaking problema sa mga susunod na yugto.",
        "done": false
      },
      {
        "text": "PHASE 2: Main-PC ↔ PC2 Integration (same host)\n\n• Patakbuhin nang sabay ang parehong compose stacks (Main-PC at PC2).\n• I-execute ang dating PC2 Stage-2 test suite kasama ang mga bagong tests para sa Main-PC.\n• Magsagawa ng karagdagang tests, tulad ng isang kumpletong speech-to-translation round-trip na dumadaan sa parehong stacks.\n\n──────────────────────────────────\nMAHALAGANG PAALALA: Ang yugtong ito ay sumusuri sa tamang komunikasyon sa pagitan ng Main-PC at PC2. Siguraduhing walang conflicts sa ports at matagumpay ang mga cross-stack tests bago magpatuloy sa cross-machine setup.",
        "done": false
      },
      {
        "text": "PHASE 3: Cross-Machine Sync Pre-Flight\n\n• I-deploy ang Main-PC compose stack sa target na `mainpc` host.\n• Mula sa PC2 machine, patakbuhin ang `scripts/cross_machine_mainpc_checks.sh` para i-verify ang connectivity.\n• Kumpirmahin na ang OTLP traffic mula sa parehong stacks ay pumapasok sa iisang ObservabilityHub.\n\n────────────────── MGA KAUGNAY NA FILES ──────────────────\n\n# scripts/cross_machine_mainpc_checks.sh\n#!/usr/bin/env bash\nset -euo pipefail\nHOST=${MAINPC_HOST:-\"mainpc.local\"}\nfor port in 51100 51200 51300 51400 51500 51600 51700 51800 51900 52000 52100; do\n  nc -z -w2 \"$HOST\" \"$port\" || { echo \"UNREACHABLE $HOST:$port\"; exit 1; }\ndone\necho \"Main-PC ports reachable from $(hostname)\"\n\n──────────────────────────────────\nMAHALAGANG PAALALA: Ito ang huling pagsusuri sa network bago ang aktwal na deployment. Tinitiyak nito na ang PC2 machine ay kayang 'makita' at kumonekta sa Main-PC host. Ang pagkabigo dito ay nangangahulugan ng problema sa firewall o network configuration.",
        "done": false
      },
      {
        "text": "PHASE 4: Post-Sync Continuous Validation (CI)\n\n• I-configure ang CI/CD pipeline (e.g., Jenkins, GitHub Actions) para awtomatikong patakbuhin ang buong pytest suite sa `mainpc` machine sa bawat bagong build o code change.\n• Kolektahin ang mga resulta sa JUnit format at ang code coverage reports.\n• I-configure ang build para mag-fail kung ang test results ay mas mababa sa 100%.\n\n──────────────────────────────────\nMAHALAGANG PAALALA: Ang yugtong ito ay tungkol sa pag-automate ng testing. Tinitiyak nito na ang kalidad ng sistema ay napapanatili sa bawat pagbabago ng code. Ang pag-setup ng tamang CI/CD pipeline ay kritikal dito para maiwasan ang 'regressions'.",
        "done": false
      },
      {
        "text": "PHASE 5: Chaos / Failover Testing\n\n• I-set ang environment variable: `FAILOVER=1`.\n• Patakbuhin ang subset ng mga tests na idinisenyo para sa chaos engineering (e.g., GPU kill, network drop).\n• Mga kailangan para pumasa: Ang system ay dapat awtomatikong maka-recover sa loob ng 8 segundo, at ang mga error budget ay hindi nalalagpasan.\n\n────────────────── MGA KAUGNAY NA FILES ──────────────────\n\n# tests/test_gpu_allocation.py (Failover part)\n@pytest.mark.skipif(os.getenv(\"FAILOVER\") != \"1\", reason=\"run only in chaos stage\")\ndef test_gpu_failover():\n    subprocess.call([\"docker\", \"kill\", \"vision_gpu\"])\n    time.sleep(4)\n    r = requests.post(\"http://localhost:51100/coord/fallback_check\", timeout=6)\n    assert r.status_code == 200\n\n# Paano patakbuhin:\nFAILOVER=1 pytest -v tests/test_gpu_allocation.py\n\n──────────────────────────────────\nMAHALAGANG PAALALA: Ito ang pinaka-kritikal na pagsubok sa katatagan. Ito ay 'destructive' at sinasadyang sirain ang mga bahagi ng sistema. Kumpirmahin na ang system ay nakaka-recover nang mabilis at tama bago ito ideklarang 'bulletproof' at production-ready.",
        "done": false
      }
    ],
    "status": "in_progress",
    "created": "2024-05-21T10:00:00Z",
    "updated": "2024-05-21T10:00:00Z"
  }
]