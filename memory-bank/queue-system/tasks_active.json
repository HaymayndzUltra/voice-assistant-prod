[
  {
    "id": "2024_unified_remediation_plan_v2",
    "description": "A single, de-duplicated, prioritized remediation plan synthesized from audit reports to fix critical system blockers, architectural flaws, and technical debt.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Core Behavioral Mandates**\n*   **Execute Sequentially:** Phases are ordered by priority (P0 → P1 → P2). Do not skip phases or tasks within a phase.\n*   **Verify Rigorously:** Each task includes a `Rationale` and `Suggested Fix`. Do not mark a phase complete until all its tasks are implemented and verified.\n*   **Confirm Locations:** Some tasks note that file paths were not specified in the source reports. Confirm these locations before editing.\n\n**How-To/Workflow Protocol**\nThis plan is managed by a script, `todo_manager.py`.\n1.  **To Show Plan State:** `python3 todo_manager.py show 2024_unified_remediation_plan_v2`\n2.  **To Mark a Phase Complete:** `python3 todo_manager.py done 2024_unified_remediation_plan_v2 [phase_index]` (e.g., `... done 2024_unified_remediation_plan_v2 0` for this phase).\n3.  **Follow the Protocol:** At the end of each phase, you will find a `Concluding Step` protocol. Follow it exactly to maintain plan integrity.\n\n**Concluding Step: Phase Completion Protocol**\nTo formally conclude this phase, update the plan's state, and prepare for the next, execute the following protocol:\n1.  **Run Command (Mark Complete):** `python3 todo_manager.py done 2024_unified_remediation_plan_v2 0`\n2.  **Analyze Next Phase:** Before proceeding, read and understand the 'Context' and 'Technical Artifacts' for Phase 1.\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating manual for this entire remediation plan. Completing it signifies your understanding of the process. Failure to follow the protocol can lead to incorrect state tracking.",
        "done": true
      },
      {
        "text": "PHASE 1: P0 – CRITICAL SYSTEM BLOCKERS\n\n**Task 1: Replace all ObservabilityHub hard-dependencies with UnifiedObservabilityCenter (UOC)**\n*   **Context (Rationale):** The UOC is the authoritative service. Dangling references to the legacy `ObservabilityHub` break startup ordering and dependency resolution.\n*   **Technical Artifacts / Tasks:**\n    *   **Task:** Purge legacy `ObservabilityHub` references to prevent boot order failures; standardize on UOC and correct the tuning source.\n    *   **Location(s):**\n        *   `main_pc_code/config/startup_config.yaml`: lines 23-25 (performance_tuning.tuning_source), 149-160 (SelfHealingSupervisor.dependencies), 167-174 (MemoryFusionHub.dependencies), 618-626 (ObservabilityDashboardAPI.dependencies)\n        *   Docker group “observability” (compose/group config path not specified)\n    *   **Suggested Fix:** Replace all `ObservabilityHub` references with `UnifiedObservabilityCenter`; set `performance_tuning.tuning_source: UnifiedObservabilityCenter`; remove/rename the “observability” docker group.\n\n**Task 2: Fix RTAP gating deadlock**\n*   **Context (Rationale):** A boot deadlock occurs in RTAP-only mode because downstream agents depend on SSR, which is disabled by the `RTAP_ENABLED=true` flag.\n*   **Technical Artifacts / Tasks:**\n    *   **Task:** Harmonize feature flags so `StreamingInterruptHandler` and `StreamingLanguageAnalyzer` do not depend on a disabled SSR.\n    *   **Location(s):** `main_pc_code/config/startup_config.yaml`: lines 499-507, 512-517, 536-543.\n    *   **Suggested Fix:** Gate `StreamingInterruptHandler` and `StreamingLanguageAnalyzer` with the same condition as SSR, or adapt both to consume RTAP outputs directly (e.g., RTAP transcripts topic/ports).\n\n**Task 3-8: Fix Fatal Agent Errors (Multiple)**\n*   **Context (Rationale):** A series of fatal errors (missing imports, syntax errors, port collisions) cause multiple agents to crash on startup, breaking critical system pipelines.\n*   **Technical Artifacts / Tasks:**\n    *   **Task 3 (StreamingLanguageAnalyzer):** Add missing `import zmq`, correctly derive endpoint, and auto-detect RTAP transcripts port 6553.\n        *   Location: `streaming_language_analyzer.py`: 110-140, 196-205\n    *   **Task 4 (StreamingInterruptHandler):** Import `configure_secure_client` and `get_zmq_connection_string` from shared utils to fix `NameError` when `SECURE_ZMQ=1`.\n        *   Location: `streaming_interrupt_handler.py`: 80-88, 105-119\n    *   **Task 5 (TTS/STT Stack):** Remove deprecated `ModelManagerAgent` paths. Replace with gRPC/REST calls to `ModelOpsCoordinator`.\n        *   Location: `model_client.py`: 22-24, 122-132; `tts_service.py`: 229-235; `stt_service.py`: 156-163\n    *   **Task 6 (SystemDigitalTwin):** Reinstate commented-out imports for `is_secure_zmq_enabled`, `configure_secure_server`, `start_auth` to fix `NameError` in secure-ZMQ path.\n        *   Location: `main_pc_code/agents/system_digital_twin.py`: ~40, 181-186\n    *   **Task 7 (PC-2 Port Collision):** Eliminate the bind conflict on `${PORT_OFFSET}+7150` between `CentralErrorBus` and `VisionProcessingAgent`.\n        *   Location: PC-2 config(s): 18-20, 85-89 (file paths not specified)\n        *   Fix: Move one agent to an unused port and add a CI uniqueness check.\n    *   **Task 8 (PC-2 Agents):** Correct syntax (missing parentheses) and ZMQ context initialization errors.\n        *   Location: `advanced_router.py`: 48-67; `remote_connector_agent.py`: 143-150; `cache_manager.py`: 100-104\n\n**Concluding Step: Phase Completion Protocol**\nTo formally conclude this phase, update the plan's state, and prepare for the next, execute the following protocol:\n1.  **Run Command (Review State):** `python3 todo_manager.py show 2024_unified_remediation_plan_v2`\n2.  **Run Command (Mark Complete):** `python3 todo_manager.py done 2024_unified_remediation_plan_v2 1`\n3.  **Analyze Next Phase:** Before proceeding, read and understand the 'Context' and 'Technical Artifacts' for Phase 2.\n\n──────────────────────────────────\nIMPORTANT NOTE: The tasks in this phase are critical system blockers. The system is not expected to boot or function correctly until these are resolved. Verify each fix carefully.",
        "done": true
      },
      {
        "text": "PHASE 2: P1 – HIGH SEVERITY ARCHITECTURAL FLAWS\n\n**Task 9: Harmonize APC topic naming**\n*   **Context (Rationale):** Consumers (`EmpathyAgent`, `MoodTrackerAgent`) subscribe to \"affect\" while the producer (APC) publishes on \"emotional_context\". This mismatch means consumers never receive emotional state updates, making downstream mappings stale.\n*   **Technical Artifacts / Tasks:**\n    *   **Task:** Align the APC publisher topic and all consumers to a single, canonical name.\n    *   **Location(s):** `affective_processing_center/app.py`: 341-345; `EmpathyAgent.py`: 60-65; `MoodTrackerAgent.py`: 58-65\n    *   **Suggested Fix:** Pick one canonical topic (recommended: \"emotional_context\") and update all subscribers, or change APC to publish \"affect\".\n\n**Task 10: Externalize Redis endpoints**\n*   **Context (Rationale):** Hard-coded `localhost` Redis URLs break portability when Redis is containerized or remote.\n*   **Technical Artifacts / Tasks:**\n    *   **Task:** Replace hard-coded Redis URLs with an environment variable like `${REDIS_URL}`.\n    *   **Location(s):** `main_pc_code/config/startup_config.yaml`: 161-166; `CacheManager.py`: 38-43, 98-107; PC-2 MemoryFusionHub config (path not specified).\n    *   **Suggested Fix:** Use `${REDIS_URL}` everywhere; document the default and override in deployment artifacts.\n\n**Task 11-14: Consolidate Architectural Roles**\n*   **Context (Rationale):** Several components have overlapping responsibilities, creating \"god objects\", data divergence, and state management issues (state loss on restart, race conditions).\n*   **Technical Artifacts / Tasks:**\n    *   **Task 11 (SelfHealingSupervisor):** Update its dependency from the orphan `ObservabilityHub` to the active `UOC` to ensure the self-healing loop activates.\n        *   Location: `main_pc_code/config/startup_config.yaml`: 149-152\n    *   **Task 12 (SystemDigitalTwin vs ServiceRegistry):** Eliminate the split-brain source of truth for endpoints. Make `ServiceRegistry` authoritative.\n        *   Location: `main_pc_code/agents/system_digital_twin.py`\n        *   Fix: Delete the local endpoint store in SDT or implement it as a read-through cache with a TTL. All writes/reads must go through `ServiceRegistry`.\n    *   **Task 13 (ServiceRegistry):** Prevent state loss and race conditions by making the default backend persistent (Redis) and adding concurrency control.\n        *   Location: `ServiceRegistryAgent` code and startup YAML (paths not specified).\n        *   Fix: Default backend to Redis; add `threading.Lock` around in-memory backend mutations for dev mode.\n    *   **Task 14 (SystemDigitalTwin Role):** Reduce SDT's role to predictive analytics. Migrate real-time metrics to UOC and discovery to ServiceRegistry.\n        *   Location: Multiple components.\n        *   Fix: SDT should consume UOC streams and publish forecasts. Agents should query UOC for metrics and `ServiceRegistry` for discovery.\n\n**Concluding Step: Phase Completion Protocol**\nTo formally conclude this phase, update the plan's state, and prepare for the next, execute the following protocol:\n1.  **Run Command (Review State):** `python3 todo_manager.py show 2024_unified_remediation_plan_v2`\n2.  **Run Command (Mark Complete):** `python3 todo_manager.py done 2024_unified_remediation_plan_v2 2`\n3.  **Analyze Next Phase:** Before proceeding, read and understand the 'Context' and 'Technical Artifacts' for Phase 3.\n\n──────────────────────────────────\nIMPORTANT NOTE: These tasks address major architectural flaws. Completing this phase will significantly improve system consistency, reliability, and scalability.",
        "done": true
      },
      {
        "text": "PHASE 3: P2 – MEDIUM & LOW SEVERITY CLEANUP\n\n**Task 15-28: Technical Debt Cleanup (Multiple)**\n*   **Context (Rationale):** This phase addresses numerous medium and low-severity issues related to configuration noise, code duplication, hard-coded values, and inefficient implementations that contribute to technical debt.\n*   **Technical Artifacts / Tasks:**\n    *   **Task 15:** Remove duplicate UOC block in `startup_config.yaml` (lines 129-136 & 220-227).\n    *   **Task 16:** Update APC default input endpoints from legacy 5555/5556 to RTAP events (6552/6553).\n    *   **Task 17:** Fix `RealTimeAudioPipeline` to respect base config environment instead of hard-coding \"pc2\".\n    *   **Task 18:** Remove duplicate `register_agent` method definition in `SystemDigitalTwin`.\n    *   **Task 19:** Standardize all telemetry dependencies to point directly to UOC.\n    *   **Task 20:** Externalize hard-coded `tcp://*:*` bind addresses in APC to environment variables.\n    *   **Task 21:** Remove large \"DECOMMISSIONED\" comment blocks from active YAML files.\n    *   **Task 22:** Improve `ServiceRegistry` scalability by replacing the single REP socket (which causes head-of-line blocking) with a ROUTER/DEALER pattern or gRPC.\n    *   **Task 23:** Optimize metrics history retention in `SystemDigitalTwin` by using `collections.deque(maxlen=N)` to avoid O(n²) operations.\n    *   **Task 24:** Parameterize the hard-coded Prometheus URL (`http://prometheus:9090`) using an environment variable.\n    *   **Task 25:** Ensure `RealTimeAudioPipeline` ports are unique across machines using `PORT_OFFSET`.\n    *   **Task 26:** Centralize logging initialization to avoid duplicate setups and inconsistent formatting.\n    *   **Task 27:** Replace blocking `time.sleep()` with `await asyncio.sleep()` in async loops (`FeedbackHandler`, `ToneDetector`).\n\n**Concluding Step: Phase Completion Protocol**\nTo formally conclude this phase, update the plan's state, and prepare for the next, execute the following protocol:\n1.  **Run Command (Review State):** `python3 todo_manager.py show 2024_unified_remediation_plan_v2`\n2.  **Run Command (Mark Complete):** `python3 todo_manager.py done 2024_unified_remediation_plan_v2 3`\n3.  **Analyze Next Phase:** Before proceeding, read and understand the 'Technical Artifacts' for Phase 4.\n\n──────────────────────────────────\nIMPORTANT NOTE: While individual tasks in this phase are lower priority, completing them as a whole is crucial for reducing technical debt, improving maintainability, and increasing developer velocity.",
        "done": false
      },
      {
        "text": "PHASE 4: POST-REMEDIATION CI/QUALITY GATES\n\n**Task 28: Implement Post-Remediation CI/Quality Gates**\n*   **Context (Rationale):** To prevent regressions of the issues fixed in previous phases, automated checks must be integrated into the CI pipeline.\n*   **Technical Artifacts / Tasks:**\n    *   **Task:** Add the following automated checks to the CI pipeline.\n    *   **Suggested Fixes / Checks to Add:**\n        1.  **Duplicate-YAML-key detection:** A linter that fails the build if duplicate keys are found in YAML configs.\n        2.  **Unique (host,port) linter:** A script that validates port uniqueness across all configuration files to prevent bind conflicts.\n        3.  **Dependency graph validator:** A tool that validates the service dependency graph for each feature-flag permutation to catch invalid dependencies before runtime.\n        4.  **Thread-safety/race-condition static analysis:** A static analysis tool focused on detecting potential race conditions in components like the `ServiceRegistry`.\n        5.  **Unused/Duplicate Import Check:** Run `flake8 --select=F401,F811` to catch issues like the duplicate `get_env` import.\n\n**Concluding Step: Plan Completion Protocol**\nTo formally conclude this plan, update its state by executing the following protocol:\n1.  **Run Command (Review State):** `python3 todo_manager.py show 2024_unified_remediation_plan_v2`\n2.  **Run Command (Mark Complete):** `python3 todo_manager.py done 2024_unified_remediation_plan_v2 4`\n\n──────────────────────────────────\nIMPORTANT NOTE: This final phase is about prevention. Implementing these safeguards will codify the lessons learned from this remediation effort and automatically protect the system from similar issues in the future.",
        "done": false
      }
    ],
    "status": "in_progress",
    "created": "2024-05-24T12:00:00Z",
    "updated": "2025-08-10T01:14:24.926848+08:00"
  }
]