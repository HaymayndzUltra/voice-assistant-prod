[
  {
    "id": "docker_blueprint_actionable_20250811",
    "description": "Actionable, phase-gated plan compiled from FINAL Docker Architecture Blueprint (Dual-Machine 4090 + 3060), ensuring strict adherence to the frozen source document.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Core Behavioral Mandates:**\n* **Execute Sequentially**: Complete phases in order (0 → 6).\n* **Verify Each Step**: Each task must be validated before advancing.\n* **Consult Source Document**: This plan is derived from `origplan.md`; follow it exactly.\n\n**How-To/Workflow Protocol:**\nThis plan is managed by `todo_manager.py`.\n1. To view: `python3 todo_manager.py show docker_blueprint_actionable_20250811`\n2. To mark a phase done: `python3 todo_manager.py done docker_blueprint_actionable_20250811 <PHASE_INDEX>`\n\n**Concluding Step: Phase Completion Protocol**\n1. **Review**: `python3 todo_manager.py show docker_blueprint_actionable_20250811`\n2. **Done**:   `python3 todo_manager.py done docker_blueprint_actionable_20250811 0`\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase encodes the operating protocol and gating rules. All later phases must include an IMPORTANT NOTE and follow post-review + pre-analysis gates.",
        "done": false
      },
      {
        "text": "PHASE 1: BUILD FOUNDATIONAL BASE IMAGES\n\n**Explanations:**\nCreate the functional-family base images and enforce reproducibility, non-root, tini, hardware-aware defaults, and correct tagging.\n\n**Technical Artifacts / Tasks:**\n1. **Base Hierarchy (Python 3.11 default)**: Build and push in order:\n   - `base-python:3.11-slim` (must include `tini`, non-root user)\n   - `base-utils` (curl, dumb-init, gosu, tzdata)\n   - `base-cpu-pydeps` (numpy, pydantic, fastapi, uvicorn)\n   - `family-web` (starlette, websockets, gunicorn extras)\n   - `base-gpu-cu121` (FROM `nvidia/cuda:12.1.1-runtime-ubuntu22.04`)\n   - `family-torch-cu121` (torch==2.2.2+cu121, torchvision)\n   - `family-llm-cu121` (vllm, llama-cpp-python, accelerate)\n   - `family-vision-cu121` (opencv-python-headless, onnxruntime-gpu)\n   - `legacy-py310-cpu` (only for remaining legacy agents)\n2. **Multi-Stage Pattern**: All service images must use builder + runtime stages (Debian slim + tini).\n3. **Reproducibility**: Pin all apt and pip deps; pip runs with `--require-hashes`. Publish wheels/locks to GH Packages.\n4. **Tagging Scheme**: `ghcr.io/<org>/<family>:YYYYMMDD-<git_sha>`; GPU variants embed CUDA version (e.g., `family-torch-cu121`).\n5. **Hardware-Aware Defaults**: Bake `/etc/machine-profile.json` during build via `--build-arg MACHINE={mainpc|pc2}` with keys:\n   - `GPU_VISIBLE_DEVICES` (default 0)\n   - `TORCH_CUDA_ALLOC_CONF` (mainpc: `max_split_size_mb:64`, pc2: `max_split_size_mb:32`)\n   - `OMP_NUM_THREADS` (mainpc: 16, pc2: 4)\n   - `UVICORN_WORKERS` (mainpc: 32, pc2: 8)\n   - `MODEL_EVICT_THRESHOLD_PCT` (mainpc: 90, pc2: 70)\n6. **CUDA Baseline**: All GPU images use CUDA 12.1; set `TORCH_CUDA_ARCH_LIST=\"89;86\"` to cover 4090 (SM 8.9) and 3060 (SM 8.6).\n7. **Security Posture**: Minimal apt, `apt-get clean`, non-root runtime with numeric UID:GID `10001:10001`, and `tini` as PID 1; optionally enforce read-only rootfs.\n8. **Wheel Cache**: Use `--mount=type=cache,target=/root/.cache/pip` to accelerate builds.\n9. **Registry Cache**: Enable buildx cache to/from GHCR: `type=registry,ref=ghcr.io/<org>/cache`.\n10. **Verification**: Ensure images pushed to GHCR with correct tags. For PC2 rollout, verify NVIDIA driver ≥ 535.\n11. **Layer Ordering**: Dockerfiles follow `OS → core libs → Python deps → app code → assets`; verify during review.\n\n**Concluding Step: Phase Completion Protocol**\n1. **Review**: `python3 todo_manager.py show docker_blueprint_actionable_20250811`\n2. **Done**:   `python3 todo_manager.py done docker_blueprint_actionable_20250811 1`\n\n──────────────────────────────────\nIMPORTANT NOTE: Foundational images must be reproducible (hash-locked), hardware-aware, multi-stage, non-root with `tini` (UID:GID 10001:10001), and correctly tagged.",
        "done": false
      },
      {
        "text": "PHASE 2: DEPENDENCY AUDIT & SPECIALIZED GPU IMAGE REFINEMENT\n\n**Explanations:**\nPrecisely add only required system libs to GPU families (torch/vision) derived from static analysis and `ldd` to avoid CPU image bloat.\n\n**Technical Artifacts / Tasks:**\n1. **Static Scan**: Analyze Python imports for audio/vision code paths (ffmpeg, libpulse, libgl1, etc.).\n2. **Binary Inspection**: Run `ldd` on native `.so` artifacts to enumerate system dependencies.\n3. **Targeted Augmentation**: Update `family-torch-cu121` and/or `family-vision-cu121` Dockerfiles with the minimal apt packages required; do not touch CPU-only families.\n4. **Rebuild & Push**: Rebuild affected images with new date tags following the tagging scheme.\n\n**Concluding Step: Phase Completion Protocol**\n1. **Review**: `python3 todo_manager.py show docker_blueprint_actionable_20250811`\n2. **Done**:   `python3 todo_manager.py done docker_blueprint_actionable_20250811 2`\n\n──────────────────────────────────\nIMPORTANT NOTE: Add only strictly required libraries to maintain minimal layers and avoid cross-family contamination.",
        "done": false
      },
      {
        "text": "PHASE 3: IMPLEMENT CI/CD AUTOMATION PIPELINE\n\n**Explanations:**\nAutomate builds via GitHub Actions with registry caching, security scanning, SBOMs, and size budgets.\n\n**Technical Artifacts / Tasks:**\n1. **Matrix Builds**: Configure matrix across families (`base`, `web`, `torch`, `llm`, `vision`, `legacy`) and machines (`mainpc`, `pc2`).\n2. **Build Cache**: Enable buildx registry cache to/from GHCR.\n3. **Security Scanning**: Integrate Trivy; fail on HIGH/CRITICAL; allowlist by SBOM digest when necessary.\n4. **SBOM**: Generate and upload SBOMs as CI artifacts.\n5. **GHCR Quota**: Add GHCR cleanup job to manage cache quota.\n6. **Image Budgets**: Enforce size budgets (CPU ≈100 MB, GPU ≈3 GB); fail CI if exceeded.\n7. **Size Reduction Target**: Track baseline single-stage sizes and enforce ≥ 40% median reduction via multi-stage builds; fail CI if target missed.\n8. **Tagging Guard**: Validate tag format `YYYYMMDD-<git_sha>` and CUDA suffix for GPU families.\n\n**Concluding Step: Phase Completion Protocol**\n1. **Review**: `python3 todo_manager.py show docker_blueprint_actionable_20250811`\n2. **Done**:   `python3 todo_manager.py done docker_blueprint_actionable_20250811 3`\n\n──────────────────────────────────\nIMPORTANT NOTE: CI is the factory floor—security gates, SBOM, strict image-size budgets, and ≥40% median size reduction must pass before migration.",
        "done": false
      },
      {
        "text": "PHASE 4: PHASED SERVICE MIGRATION (CANONICAL DOCKERFILE PATTERNS)\n\n**Explanations:**\nMigrate services using canonical Dockerfile patterns with hardened defaults and health checks, in controlled sub-phases.\n\n**Canonical Patterns (apply to all services):**\n- Multi-stage (builder → runtime).\n- Use pip cache mount `--mount=type=cache,target=/root/.cache/pip`.\n- Non-root runtime (`USER appuser`) with numeric UID:GID `10001:10001`.\n- `tini` as PID 1 via ENTRYPOINT.\n- Enforce `.dockerignore` (exclude `models/`, `data/`, `logs/`, `__pycache__/`).\n- Health endpoint: every HTTP service exposes `/health` returning HTTP 200 and JSON body exactly `{\"status\": \"ok\"}`.\n- Adopt base family per blueprint (CPU vs GPU, web, llm, vision).\n\n**Technical Artifacts / Tasks:**\n1. **Standardize .dockerignore** across repos.\n2. **Enforce non-root & `tini`** in all service images.\n3. **Healthchecks**: Add `HEALTHCHECK CMD curl -sf http://localhost:<port>/health || exit 1`.\n4. **Supervisors**: Verify supervisors auto-pull new tags; document and test `FORCE_IMAGE_TAG`.\n\n**Sub-Phase 4.1 (Core Infrastructure):**\n- `ServiceRegistry`, `SystemDigitalTwin`, `UnifiedSystemAgent`, `SelfHealingSupervisor`, `MemoryFusionHub`, `ModelOpsCoordinator`, `AffectiveProcessingCenter`\n\n**Sub-Phase 4.2 (Group A):**\n- `RealTimeAudioPipeline`, `UnifiedObservabilityCenter`, `CodeGenerator`, `PredictiveHealthMonitor`, `Executor`, `TinyLlamaServiceEnhanced`, `SmartHomeAgent`, `CrossMachineGPUScheduler`, `ChainOfThoughtAgent`, `CognitiveModelAgent`, `FaceRecognitionAgent`, `LearningOpportunityDetector`, `LearningManager`, `ActiveLearningMonitor`, `IntentionValidatorAgent`, `NLUAgent`, `AdvancedCommandHandler`, `ChitchatAgent`, `FeedbackHandler`, `Responder`, `DynamicIdentityAgent`, `EmotionSynthesisAgent`, `STTService`, `TTSService`, `AudioCapture`, `StreamingSpeechRecognition`, `StreamingTTSAgent`, `ProactiveAgent`, `EmotionEngine`\n\n**Sub-Phase 4.3 (Group B):**\n- `MoodTrackerAgent`, `HumanAwarenessAgent`, `ToneDetector`, `VoiceProfilingAgent`, `EmpathyAgent`, `CloudTranslationService`, `StreamingTranslationProxy`, `ObservabilityDashboardAPI`, `CentralErrorBus`, `RealTimeAudioPipelinePC2`, `TieredResponder`, `AsyncProcessor`, `CacheManager`, `VisionProcessingAgent`, `DreamWorldAgent`, `ResourceManager`, `TaskScheduler`, `AuthenticationAgent`, `UnifiedUtilsAgent`, `ProactiveContextMonitor`, `AgentTrustScorer`, `FileSystemAssistantAgent`, `RemoteConnectorAgent`, `UnifiedWebAgent`, `DreamingModeAgent`, `AdvancedRouter`, `UnifiedObservabilityCenter (pc2)`, `TutoringServiceAgent`, `SpeechRelayService`\n\n**Concluding Step: Phase Completion Protocol**\n1. **Review**: `python3 todo_manager.py show docker_blueprint_actionable_20250811`\n2. **Done**:   `python3 todo_manager.py done docker_blueprint_actionable_20250811 4`\n\n──────────────────────────────────\nIMPORTANT NOTE: Coordinate deployments to minimize downtime; verify health endpoints and supervisor behavior during cutovers.",
        "done": false
      },
      {
        "text": "PHASE 5: OBSERVABILITY & TRACEABILITY INTEGRATION\n\n**Explanations:**\nEnsure startup reporting of SBOM and Git SHA to the observability center to guarantee traceability.\n\n**Technical Artifacts / Tasks:**\n1. Modify service entrypoints to emit SBOM + Git SHA to `UnifiedObservabilityCenter` at startup.\n2. Verify logs/dashboard receive startup reports after deploy.\n\n**Concluding Step: Phase Completion Protocol**\n1. **Review**: `python3 todo_manager.py show docker_blueprint_actionable_20250811`\n2. **Done**:   `python3 todo_manager.py done docker_blueprint_actionable_20250811 5`\n\n──────────────────────────────────\nIMPORTANT NOTE: Traceability is non-negotiable for production-grade debugging and security.",
        "done": false
      },
      {
        "text": "PHASE 6: FINALIZE ROLLBACK PROCEDURES & DOCUMENTATION\n\n**Explanations:**\nDocument and validate the safety net for rapid, controlled reversions, including explicit risk register fallbacks.\n\n**Technical Artifacts / Tasks:**\n1. Tag last-known-good images with `-prev`.\n2. Create `ROLLBACK_PROCEDURE.md` runbook; include steps using `FORCE_IMAGE_TAG`.\n3. Add risk fallbacks from the blueprint:\n   - R1: If PC2 NVIDIA driver < 535 or CUDA 12.1 mismatch, re-tag GPU images to `-cu118` branch and redeploy.\n   - R2: Plan and track migration of remaining Py 3.10 agents to 3.11 by Q4 2025 (document inventory and cutover plan).\n   - R4: If Trivy produces false-positive HIGH/CRITICAL at SBOM digest level, temporarily downgrade policy to WARN while adding precise allowlist entries.\n4. Final system review: all services healthy, reporting, and communicating.\n\n**Concluding Step: Phase Completion Protocol**\n1. **Review**: `python3 todo_manager.py show docker_blueprint_actionable_20250811`\n2. **Done**:   `python3 todo_manager.py done docker_blueprint_actionable_20250811 6`\n\n──────────────────────────────────\nIMPORTANT NOTE: A documented and tested rollback path with explicit risk fallbacks is critical to operational readiness.",
        "done": false
      }
    ],
    "status": "in_progress",
    "created": "2025-08-11T19:15:00+08:00",
    "updated": "2025-08-11T19:34:00+08:00"
  }
]

