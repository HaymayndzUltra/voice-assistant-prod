[
  {
    "id": "20250807_apc_implementation",
    "description": "Action plan to implement the Affective Processing Center (APC), unifying seven legacy agents into a modular, DAG-based service for real-time emotional context analysis and synthesis.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nThis initial step contains the user manual for this task plan. It outlines the commands to interact with the plan and the critical safety workflow that must be followed for all subsequent phases.\n\n**Technical Artifacts:**\n**I. CORE BEHAVIORAL MANDATES**\n*   **Execute Serially:** You must execute the phases in the prescribed order. Do not skip phases.\n*   **Verify Each Step:** After completing a phase, verify its success before marking it as 'done'.\n*   **Consult Source:** This plan is an interpretation of the source document. If any ambiguity arises, the source document is the ground truth.\n\n**II. HOW TO USE THIS TASK PLAN**\n*   **To Show the Plan:** `python3 todo_manager.py show 20250807_apc_implementation`\n*   **To Mark a Phase Done:** `python3 todo_manager.py done 20250807_apc_implementation <phase_number>` (e.g., `... done 20250807_apc_implementation 0`)\n\n**Concluding Step: Update Plan Status**\nTo officially conclude this setup phase and update the plan's state, run the following commands. This ensures the task manager knows you are ready to proceed to the first technical phase.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_apc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_apc_implementation 0`\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating manual for the entire plan. Understanding these protocols is mandatory before proceeding to Phase 1. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 1: Project Scaffolding & Dependencies\n\n**Explanations:**\nThis phase involves creating the directory structure for the Affective Processing Center, copying essential resiliency modules, and setting up the Python environment with all required dependencies.\n\n**Technical Artifacts / Tasks:**\n**I. Create Directory Structure:**\nCreate the following directory and file layout. Empty `__init__.py` files should be created in each subdirectory.\n```\naffective_processing_center/\n├── __init__.py\n├── app.py\n├── config/\n│   ├── __init__.py\n│   ├── default.yaml\n│   ├── main_pc.yaml\n│   └── pc2.yaml\n├── core/\n│   ├── __init__.py\n│   ├── dag_executor.py, fusion.py, cache.py, telemetry.py, schemas.py, errors.py\n├── modules/\n│   ├── __init__.py\n│   ├── tone.py, mood.py, empathy.py, voice_profile.py, human_awareness.py, synthesis.py\n├── transport/\n│   ├── __init__.py\n│   ├── zmq_pub.py, zmq_req.py\n├── resiliency/\n│   ├── __init__.py\n│   ├── circuit_breaker.py, bulkhead.py\n├── tests/\n│   └── ...\n├── requirements.txt\n└── README.md\n```\n\n**II. Copy Resiliency Utilities:**\nCopy the canonical `bulkhead.py` and `circuit_breaker.py` modules into `affective_processing_center/resiliency/`.\n\n**III. Populate `requirements.txt`:**\nAdd the following dependencies to `affective_processing_center/requirements.txt`.\n```\nnumpy==1.26.4\ntorch==2.3.0\ntorchaudio==2.3.0\nlibrosa==0.10.2\npyzmq==26.0.3\npydantic==1.10.13\nprometheus-client==0.20.0\ntenacity==8.2.3\nfasttext-wheel==0.9.2\ntransformers==4.41.2\nsentence-transformers==3.2.1\nscikit-learn==1.5.0\n```\n\n**IV. Install Dependencies:**\nRun `pip install -r affective_processing_center/requirements.txt`.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_apc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_apc_implementation 1`\n\n──────────────────────────────────\nIMPORTANT NOTE: A correct project structure and environment are critical for all subsequent development. Verify that all files are in the correct locations and all dependencies are installed without errors before proceeding.",
        "done": true
      },
      {
        "text": "PHASE 2: Configuration & Core Schemas\n\n**Explanations:**\nDefine the application's configuration schema in `default.yaml` and implement the Pydantic data models that will be used for messaging and internal data structures.\n\n**Technical Artifacts / Tasks:**\n**I. Define Configuration Schema (`config/default.yaml`):**\nPopulate `affective_processing_center/config/default.yaml` with the following content.\n```yaml\ntitle: AffectiveProcessingCenterConfig\nversion: 1.0\n\npipeline:\n  enabled_modules:\n    - tone\n    - mood\n    - empathy\n    - voice_profile\n    - human_awareness\n  fusion:\n    algorithm: \"weighted_ensemble\"\n    weights:\n      tone: 0.20\n      mood: 0.25\n      empathy: 0.20\n      voice_profile: 0.15\n      human_awareness: 0.20\n\naudio:\n  sample_rate: 16000\n  frame_ms: 40\n  device: \"${AUDIO_DEVICE:default}\"\n\nmodels:\n  tone:\n    model_name: \"facebook/wav2vec2-base\"\n  mood:\n    model_path: \"/models/mood-bert\"\n  empathy:\n    model_name: \"sentence-transformers/all-mpnet-base-v2\"\n  voice_profile:\n    embedding_dim: 512\n  synthesis:\n    prosody_model: \"/models/prosody-taco.pt\"\n\nresources:\n  device: \"cuda\"\n  max_concurrent_gpu_tasks: 4\n\noutput:\n  zmq_pub_port: 5591\n  topic: \"affect\"\n\nresilience:\n  circuit_breaker:\n    failure_threshold: 4\n    reset_timeout: 20\n  bulkhead:\n    max_concurrent: 8\n    max_queue_size: 32\n```\n\n**II. Implement Pydantic Schemas (`core/schemas.py`):**\nDefine the Pydantic models for message payloads, such as `EmotionalContext`, `AudioChunk`, and `Transcript`.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_apc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_apc_implementation 2`\n\n──────────────────────────────────\nIMPORTANT NOTE: The configuration and data schemas are the blueprint for the application's behavior and data flow. Ensure the YAML is valid and the Pydantic models are correctly defined.",
        "done": true
      },
      {
        "text": "PHASE 3: Core Logic Implementation (DAG, Modules, Fusion)\n\n**Explanations:**\nImplement the core architecture of the APC. This includes the feature cache, the base module interface, all individual processing modules, the fusion layer, and the DAG executor that orchestrates them.\n\n**Technical Artifacts / Tasks:**\n**I. Implement Feature Cache (`core/cache.py`):**\nCreate the `EmbeddingCache` using an LRU (Least Recently Used) strategy to store and retrieve features, preventing redundant computations.\n\n**II. Implement Module Interface and Concrete Modules (`modules/`):**\nDefine the `BaseModule` abstract class that all processing modules will inherit from. Then, implement each module (tone, mood, empathy, etc.) with its specific model and logic.\n```python\nclass BaseModule(ABC):\n    requires: List[str] = []\n    provides: str\n\n    @abstractmethod\n    async def process(self, payload: Payload, cache: EmbeddingCache) -> ModuleOutput: ...\n```\n\n**III. Implement Fusion Layer (`core/fusion.py`):**\nImplement the fusion algorithm specified in the config. Start with the `WeightedFusion` class.\n```python\nclass WeightedFusion:\n    def __init__(self, weights: Dict[str, float]):\n        self.weights = weights\n\n    def combine(self, results: Dict[str, np.ndarray]) -> EmotionalContext:\n        # ... implementation ...\n```\n\n**IV. Implement DAG Executor (`core/dag_executor.py`):**\nCreate the `DAGExecutor` class. It will build a dependency graph of the enabled modules and execute them in parallel where possible.\n```python\nclass DAGExecutor:\n    def __init__(self, modules: Dict[str, BaseModule], fusion: Fusion, cache: EmbeddingCache):\n        # ... implementation ...\n\n    async def run(self, input_: AudioChunk | Transcript) -> EmotionalContext:\n        # ... implementation ...\n```\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_apc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_apc_implementation 3`\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the most complex logic. The correct implementation of the DAG executor and the module dependency system is critical for the entire service to function correctly and efficiently.",
        "done": true
      },
      {
        "text": "PHASE 4: Transport Layer Implementation\n\n**Explanations:**\nImplement the ZeroMQ interfaces for broadcasting the fused Emotional Context Vector (ECV) and handling on-demand requests for emotion synthesis.\n\n**Technical Artifacts / Tasks:**\n**I. Implement ECV Publisher (`transport/zmq_pub.py`):**\nCreate a `ZmqPublisher` class that binds to a PUB socket on port 5591. It will broadcast the ECV results from the DAG executor.\n\n**II. Implement Synthesis Server (`transport/zmq_req.py`):**\nCreate a ZMQ REP server that listens for on-demand synthesis requests on port 5706. It will take text and an emotion, call the `synthesis` module, and return the resulting WAV bytes.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_apc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_apc_implementation 4`\n\n──────────────────────────────────\nIMPORTANT NOTE: The transport layer defines the service's public contract. Ensure the ZMQ sockets are configured correctly and use the Pydantic schemas for message validation to maintain compatibility with downstream agents.",
        "done": true
      },
      {
        "text": "PHASE 5: Application Bootstrap & Entry-point\n\n**Explanations:**\nCreate the main application entry-point (`app.py`) that loads configuration, initializes all core components (cache, modules, fusion, executor), and starts the main processing loop.\n\n**Technical Artifacts / Tasks:**\n**I. Implement `app.py`:**\nThe script must perform the following actions in order:\n1.  Use `UnifiedConfigLoader` to load configuration.\n2.  Initialize the `EmbeddingCache`.\n3.  Dynamically load the enabled modules from the `modules/` directory.\n4.  Build the `Fusion` instance based on the config.\n5.  Instantiate the `DAGExecutor` with all the components.\n6.  Set up a ZMQ SUB socket to subscribe to input from RTAP (e.g., transcripts on port 6553).\n7.  Create a main `run_apc` loop that receives input, passes it to the `executor.run()`, and publishes the result.\n8.  Implement graceful shutdown logic.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_apc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_apc_implementation 5`\n\n──────────────────────────────────\nIMPORTANT NOTE: The bootstrap process is critical for service stability. Ensure all components are initialized in the correct order and that the main loop handles errors and shutdown signals gracefully.",
        "done": true
      },
      {
        "text": "PHASE 6: Testing & Performance Validation\n\n**Explanations:**\nConduct comprehensive testing to ensure the service is correct, performant, and robust. This includes unit tests for individual modules and load tests for the entire system.\n\n**Technical Artifacts / Tasks:**\n**I. Unit Tests:**\nWrite and pass `pytest` unit tests for each module in `modules/` using small, fixed audio and text inputs. Test the cache and fusion logic in isolation.\n\n**II. Load & Latency Testing:**\n*   **Load Test:** Subject the service to 200 ECV requests per second.\n*   **Latency Benchmark:** Measure the end-to-end latency from input receipt to ECV publication. The target is a p95 latency of < 60 ms.\n\n**III. Static Analysis:**\nRun `mypy --strict` and `ruff` to ensure code quality and type safety.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_apc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_apc_implementation 6`\n\n──────────────────────────────────\nIMPORTANT NOTE: Rigorous testing is essential for a complex system like the APC. Do not proceed to deployment without passing all unit tests and meeting the specified performance targets.",
        "done": true
      },
      {
        "text": "PHASE 7: Final Verification, Deployment & Decommissioning\n\n**Explanations:**\nPerform the final pre-production checks, containerize and deploy the service, and transition downstream agents before decommissioning the seven legacy systems.\n\n**Technical Artifacts / Tasks:**\n**I. Dockerize Application:**\nCreate a `Dockerfile` using a CUDA base image. Configure it to share the GPU with other services like the ModelOps Coordinator, for example by setting `CUDA_MPS_ACTIVE_THREAD_PERCENTAGE`.\n\n**II. Execute Final Verification Gate:**\n*   **Accuracy:** Compare the generated ECV against a ground-truth dataset. Target a Pearson correlation of r ≥ 0.85 versus the legacy system.\n*   **Latency:** Confirm end-to-end audio → ECV p95 latency is < 70 ms.\n*   **GPU Utilization:** Ensure GPU usage is ≤ 60% under a 100 rps load.\n*   **Stability:** Run an 8-hour soak test and verify memory growth is < 3% with no uncaught exceptions.\n*   **Failover:** Test that killing and restarting the process is handled gracefully by downstream consumers.\n*   **Security:** Verify ZMQ sockets are bound to localhost or use CURVE encryption in production.\n\n**III. Deploy & Decommission:**\n1.  Deploy one instance per GPU on the cluster.\n2.  Confirm downstream agents are correctly consuming the ECV from the new APC.\n3.  Once stability is confirmed, safely decommission the seven superseded emotion-related agents.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_apc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_apc_implementation 7`\n\n──────────────────────────────────\nIMPORTANT NOTE: This is the final gate before the project is considered complete. Be methodical and rigorous during the verification and deployment process. Successful completion of this phase means the APC is production-ready.",
        "done": true
      }
    ],
    "status": "completed",
    "created": "2024-05-24T14:15:00Z",
    "updated": "2025-08-08T06:03:51.006838+08:00"
  }
]