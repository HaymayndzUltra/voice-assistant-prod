[
  {
    "id": "20250807_rtap_implementation",
    "description": "Action plan to implement the Real-Time Audio Pipeline (RTAP), merging six legacy agents into a single, ultra-low-latency service with a target latency of ≤ 150 ms.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nThis initial step contains the user manual for this task plan. It outlines the commands to interact with the plan and the critical safety workflow that must be followed for all subsequent phases.\n\n**Technical Artifacts:**\n**I. CORE BEHAVIORAL MANDATES**\n*   **Execute Serially:** You must execute the phases in the prescribed order. Do not skip phases.\n*   **Verify Each Step:** After completing a phase, verify its success before marking it as 'done'.\n*   **Consult Source:** This plan is an interpretation of the source document. If any ambiguity arises, the source document is the ground truth.\n\n**II. HOW TO USE THIS TASK PLAN**\n*   **To Show the Plan:** `python3 todo_manager.py show 20250807_rtap_implementation`\n*   **To Mark a Phase Done:** `python3 todo_manager.py done 20250807_rtap_implementation <phase_number>` (e.g., `... done 20250807_rtap_implementation 0`)\n\n**Concluding Step: Update Plan Status**\nTo officially conclude this setup phase and update the plan's state, run the following commands. This ensures the task manager knows you are ready to proceed to the first technical phase.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_rtap_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_rtap_implementation 0`\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating manual for the entire plan. Understanding these protocols is mandatory before proceeding to Phase 1. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 1: Project Scaffolding & Dependencies\n\n**Explanations:**\nThis phase involves creating the directory structure for the Real-Time Audio Pipeline, copying essential resiliency modules, and setting up the Python environment with all required dependencies.\n\n**Technical Artifacts / Tasks:**\n**I. Create Directory Structure:**\nCreate the following directory and file layout. Empty `__init__.py` files should be created in each subdirectory.\n```\nreal_time_audio_pipeline/\n├── __init__.py\n├── app.py\n├── config/\n│   ├── __init__.py\n│   ├── default.yaml\n│   ├── main_pc.yaml\n│   └── pc2.yaml\n├── core/\n│   ├── __init__.py\n│   ├── pipeline.py\n│   ├── stages/\n│   │   ├── __init__.py\n│   │   ├── capture.py, preprocess.py, wakeword.py, stt.py, language.py, utils.py\n│   ├── buffers.py\n│   └── telemetry.py\n├── transport/\n│   ├── __init__.py\n│   ├── zmq_pub.py\n│   └── ws_server.py\n├── resiliency/\n│   ├── __init__.py\n│   ├── circuit_breaker.py\n│   └── bulkhead.py\n├── proto/\n│   └── transcript.proto\n├── requirements.txt\n└── README.md\n```\n\n**II. Copy Resiliency Utilities:**\nCopy the canonical `bulkhead.py` and `circuit_breaker.py` modules into `real_time_audio_pipeline/resiliency/`.\n\n**III. Populate `requirements.txt`:**\nAdd the following dependencies to `real_time_audio_pipeline/requirements.txt`.\n```\nnumpy==1.26.4\nsounddevice==0.4.7\npyzmq==26.0.3\nwebrtcvad==2.0.10\npvporcupine==2.3.1\nwhisper-timestamped==1.14\nfasttext-wheel==0.9.2\ntorch==2.3.0\ntenacity==8.2.3\npydantic==1.10.13\nfastapi==0.111.0\nuvicorn==0.29.0\nprometheus-client==0.20.0\n```\n\n**IV. Install Dependencies:**\nRun `pip install -r real_time_audio_pipeline/requirements.txt`.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_rtap_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_rtap_implementation 1`\n\n──────────────────────────────────\nIMPORTANT NOTE: A correct project structure and environment are critical for all subsequent development. Verify that all files are in the correct locations and all dependencies are installed without errors before proceeding.",
        "done": true
      },
      {
        "text": "PHASE 2: Configuration & Core Buffer Implementation\n\n**Explanations:**\nDefine the application's configuration schema and implement the core zero-copy ring buffer that will be used for efficient data hand-off between pipeline stages.\n\n**Technical Artifacts / Tasks:**\n**I. Define Configuration Schema (`config/default.yaml`):**\nPopulate `real_time_audio_pipeline/config/default.yaml` with the following content.\n```yaml\ntitle: RealTimeAudioPipelineConfig\nversion: 1.0\n\naudio:\n  sample_rate: 16000\n  frame_ms: 20\n  channels: 1\n  device: \"${AUDIO_DEVICE:default}\"\n  ring_buffer_size_ms: 4000\n\nwakeword:\n  model_path: \"/models/porcupine/wake.ppn\"\n  sensitivity: 0.55\n\npreprocess:\n  denoise: true\n  vad_aggressiveness: 2\n\nstt:\n  model_name: \"whisper-base\"\n  device: \"cuda\"\n  compute_dtype: \"float16\"\n  beam_size: 5\n\nlanguage:\n  sentiment: true\n  fasttext_model: \"/models/lid.176.bin\"\n\noutput:\n  zmq_pub_port_events: 6552\n  zmq_pub_port_transcripts: 6553\n  websocket_port: 5802\n\nresilience:\n  circuit_breaker:\n    failure_threshold: 3\n    reset_timeout: 15\n  bulkhead:\n    max_concurrent: 8\n    max_queue_size: 32\n```\n\n**II. Implement Ring Buffer (`core/buffers.py`):**\nImplement the `RingBuffer` class using `collections.deque` for efficient, bounded, pre-allocated NumPy buffer management.\n```python\nclass RingBuffer:\n    def __init__(self, max_frames: int, frame_size: int):\n        self.buffer = deque(maxlen=max_frames)\n        ...\n\n    def write(self, frame: np.ndarray): ...\n    def read_all(self) -> np.ndarray: ...\n```\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_rtap_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_rtap_implementation 2`\n\n──────────────────────────────────\nIMPORTANT NOTE: The configuration and the ring buffer are foundational to the entire pipeline's performance and stability. Ensure the buffer logic is correct and tested before building the stages that depend on it.",
        "done": true
      },
      {
        "text": "PHASE 3: Core Pipeline & Stage Implementation\n\n**Explanations:**\nImplement the heart of the RTAP: the master state-machine and the individual asynchronous coroutine stages for audio capture, preprocessing, wake-word detection, STT, and language analysis.\n\n**Technical Artifacts / Tasks:**\n**I. Implement Pipeline State Machine (`core/pipeline.py`):**\nCreate the `AudioPipeline` class to manage the overall state (IDLE, LISTENING, PROCESSING, EMIT) and orchestrate the lifecycle of the stage tasks.\n```python\nclass AudioPipeline:\n    def __init__(self, cfg: Config):\n        self.cfg = cfg\n        self.state = State.IDLE\n        self.buffer = RingBuffer(...)\n        self.tasks: List[asyncio.Task] = []\n\n    async def start(self):\n        await self._spawn_tasks()\n        await self._state_loop()\n    ...\n```\n\n**II. Implement Stage Coroutines (`core/stages/*.py`):**\nImplement each processing stage as a separate, long-running coroutine that communicates via `asyncio.Queue`s or shared buffers.\n*   `capture.py`: Use `sounddevice` to capture audio and write to the ring buffer.\n*   `wakeword.py`: Read from the buffer and use `pvporcupine` to detect the wake-word, changing the pipeline state.\n*   `preprocess.py`: Perform VAD, denoising, and resampling.\n*   `stt.py`: Run Whisper inference, potentially in a `ThreadPoolExecutor` to avoid blocking the event loop.\n*   `language.py`: Run fastText or other language analysis on the transcript.\n\n**III. Implement Telemetry (`core/telemetry.py`):**\nDefine Prometheus counters for key metrics like frames processed, wake-word hits, and histograms for end-to-end pipeline latency.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_rtap_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_rtap_implementation 3`\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the most complex logic. The interaction between the async stages is critical for meeting the low-latency budget. Test each stage in isolation before integrating it into the main pipeline.",
        "done": true
      },
      {
        "text": "PHASE 4: Transport Layer Implementation\n\n**Explanations:**\nImplement the external interfaces for publishing events and transcripts, including ZeroMQ PUB sockets and an optional FastAPI WebSocket server for browser-based clients.\n\n**Technical Artifacts / Tasks:**\n**I. Implement ZMQ Publishers (`transport/zmq_pub.py`):**\nCreate a `ZmqPublisher` class that starts two PUB sockets on the configured ports (6552 for events, 6553 for transcripts). It should consume from an async generator provided by the pipeline.\n\n**II. Implement WebSocket Server (`transport/ws_server.py`):**\nUsing FastAPI, create a WebSocket endpoint at `/stream`. This server will also consume from the pipeline's async generator and push real-time transcript chunks to connected clients.\n\n**III. Define Transcript Schema:**\nUse a Pydantic model to define the structure of the JSON transcripts published on the ZMQ socket and WebSocket.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_rtap_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_rtap_implementation 4`\n\n──────────────────────────────────\nIMPORTANT NOTE: The transport layer is the public API of the service. Ensure that data serialization is efficient and the sockets are configured correctly to prevent becoming a performance bottleneck.",
        "done": true
      },
      {
        "text": "PHASE 5: Application Bootstrap & Entry-point\n\n**Explanations:**\nCreate the main application entry-point (`app.py`) that ties everything together: configuration loading, model warm-up, and concurrent startup of the pipeline and transport layers.\n\n**Technical Artifacts / Tasks:**\n**I. Implement `app.py`:**\nThe script must perform the following actions:\n1.  Use `UnifiedConfigLoader` to load configuration.\n2.  Implement an `async def initialize_and_run(cfg)` function.\n3.  Inside this function, warm-up the STT and wake-word models.\n4.  Instantiate the `AudioPipeline`, `ZmqPublisher`, and `WebSocketServer`.\n5.  Use `asyncio.gather` to run the `pipeline.start()`, `zmq_pub.start()`, and `ws_server.serve()` coroutines concurrently.\n6.  Implement graceful shutdown logic to cancel all tasks, close the sound device, and flush any remaining data.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_rtap_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_rtap_implementation 5`\n\n──────────────────────────────────\nIMPORTANT NOTE: The bootstrap process is critical for service stability. Model warm-up is essential to avoid a long delay on the first request, and graceful shutdown prevents resource leaks.",
        "done": true
      },
      {
        "text": "PHASE 6: Testing & Profiling\n\n**Explanations:**\nConduct comprehensive testing to ensure the pipeline is correct, meets its strict latency budget, and is performant under load.\n\n**Technical Artifacts / Tasks:**\n**I. Unit Tests:**\nWrite and pass `pytest` unit tests for critical components:\n*   Verify the ring buffer's wraparound behavior.\n*   Test the wake-word engine's false-positive rate to ensure it's < 1%.\n\n**II. Latency & Performance Testing:**\n*   **Latency Test:** Record a 30-second audio clip and measure the end-to-end latency from the first audio sample to the final transcript publication. Ensure the mean is < 120 ms.\n*   **Profiling:** Use `py-spy` to profile the running application. Confirm CPU usage is < 20% per core and GPU utilization is stable.\n\n**III. Static Analysis:**\nRun static analysis tools and ensure they pass without warnings.\n*   `mypy --strict`\n*   `ruff`\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_rtap_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_rtap_implementation 6`\n\n──────────────────────────────────\nIMPORTANT NOTE: Meeting the ≤ 150 ms p95 latency budget is the primary goal of this project. Rigorous testing and profiling are non-negotiable. Do not proceed to deployment without passing these checks.",
        "done": true
      },
      {
        "text": "PHASE 7: Final Verification, Deployment & Decommissioning\n\n**Explanations:**\nPerform the final pre-production checks, containerize and deploy the service, and transition downstream agents to the new pipeline before decommissioning the legacy systems.\n\n**Technical Artifacts / Tasks:**\n**I. Dockerize Application:**\nCreate a `Dockerfile` for the service. Ensure it handles audio device access correctly, for example by using `--device /dev/snd` or host networking with ALSA passthrough.\n\n**II. Review Risk Mitigation Checklist:**\nConfirm that mitigations are in place for all identified risks (e.g., buffer overflow, model load delays, GPU starvation, memory leaks).\n\n**III. Execute Final Verification Gate:**\n*   **Latency Benchmark:** Verify end-to-end latency is < 150 ms p95.\n*   **Accuracy Regression:** Ensure Word Error Rate (WER) is ≤ the legacy pipeline and sentiment accuracy is within ±1%.\n*   **Stress Test:** Run with 2 hours of continuous audio. Verify zero unhandled exceptions and memory growth < 5%.\n*   **Failover Test:** Kill the primary pipeline and ensure the hot standby instance takes over correctly.\n*   **Security Check:** Confirm WebSocket is protected and ZMQ sockets are bound to localhost.\n\n**IV. Deploy & Decommission:**\n1.  Deploy one instance on `main_pc` and an optional hot standby on `pc2`.\n2.  Verify downstream agents continue to function correctly with the new pipeline's output on port 6553.\n3.  Once stability is confirmed, safely decommission the six superseded agents.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_rtap_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_rtap_implementation 7`\n\n──────────────────────────────────\nIMPORTANT NOTE: This is the final gate before the project is considered complete. Be methodical and rigorous during the verification and deployment process. Successful completion of this phase means the RTAP is production-ready.",
        "done": false
      }
    ],
    "status": "in_progress",
    "created": "2024-05-24T14:15:00Z",
    "updated": "2025-08-08T04:35:47.139170+08:00"
  }
]