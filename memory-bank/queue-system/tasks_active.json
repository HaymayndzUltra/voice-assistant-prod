[
  {
    "id": "central_error_bus_setup",
    "description": "Action plan to set up the Central Error Bus service, including scaffolding files, running tests, building a Docker image, and integrating it into both MainPC and PC2 configurations.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nThis initial step contains the user manual for this task plan. It outlines the commands to interact with the plan and the critical safety workflow that must be followed for all subsequent phases.\n\n**Technical Artifacts:**\n**I. CORE BEHAVIORAL MANDATES (FOR THE EXECUTING AI - READ FIRST)**\n1.  **Validate Assumptions:** Before starting, validate your assumptions about the task using the provided details.\n2.  **Clarify Ambiguity:** If information is ambiguous or missing, seek clarification before proceeding.\n3.  **Highlight Conflicts:** If you detect errors or conflicts in the data, highlight them immediately and suggest alternatives.\n4.  **Explain Rationale:** During execution, explain the rationale for each step taken.\n5.  **Review Before Submission:** Before submitting the final output, review the entire process to correct any errors or flawed assumptions.\n\n**II. HOW TO USE THIS TASK PLAN (COMMANDS & PROTOCOL)**\n\n1.  **COMMANDS:**\n    *   **TO VIEW DETAILS:** `python3 todo_manager.py show central_error_bus_setup`\n    *   **TO MARK AS DONE:** `python3 todo_manager.py done central_error_bus_setup <step_number>`\n\n2.  **WORKFLOW & SAFETY PROTOCOL (CRUCIAL):**\n    *   **FOCUS ON CURRENT STEP:** In each Phase, always read and understand the `IMPORTANT NOTE` first.\n    *   **REVIEW-CONFIRM-PROCEED LOOP:** After completing a Phase, review your work and the next Phase. If your confidence score is below 90%, REPEAT the review.\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating manual for the entire plan. Understanding these protocols is mandatory before proceeding to Phase 2. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      },
      {
        "text": "PHASE 2: Central Error Bus Setup\n\n**Explanations:**\nThis phase executes the one-shot script to create, configure, and test the new ZeroMQ-based Central Error Bus. It involves scaffolding the service directory, running tests, building a Docker image, and patching the startup configurations for both MainPC and PC2.\n\n**Technical Artifacts / Tasks:**\n\n**1. Scaffold Service Directory & Files (1/8):**\nCreate the directory structure and populate it with the Python source, Dockerfile, requirements, README, and test file.\n\n```bash\nset -euo pipefail\nROOT=\"$(pwd)\"\n\necho \"🔧 1/8  Scaffolding service directory...\"\nSVC=\"services/central_error_bus\"\nmkdir -p \"$SVC\" tests\n\ncat >\"$SVC/requirements.txt\"<<'REQ'\npyzmq>=25.1.2\nprometheus-client>=0.20.0\nuvloop>=0.19.0\nREQ\n\ncat >\"$SVC/Dockerfile\"<<'DOCK'\nFROM python:3.10-slim-bullseye\nENV PYTHONUNBUFFERED=1\nRUN apt-get update && apt-get install -y python3-pip && rm -rf /var/lib/apt/lists/*\nCOPY requirements.txt /tmp/\nRUN pip3 install --no-cache-dir -r /tmp/requirements.txt\nCOPY . /app\nWORKDIR /app\nCMD [\"python3\", \"error_bus.py\"]\nDOCK\n\ncat >\"$SVC/error_bus.py\"<<'PY'\n\"\"\"\nCentral Error Bus\n-----------------\n• SUB socket (ipc:///tmp/agent_errors) – agents send JSON error events\n• PUB socket (tcp://*:7150)          – broadcasts to any subscribers\n• Prometheus counter at :9105/metrics\n\"\"\"\nimport asyncio, json, os, signal, zmq, zmq.asyncio\nfrom prometheus_client import start_http_server, Counter\n\nPORT          = int(os.getenv(\"ERROR_BUS_PORT\", \"7150\"))\nSUB_ENDPOINT  = os.getenv(\"SUB_ENDPOINT\", \"ipc:///tmp/agent_errors\")\nPUB_ENDPOINT  = f\"tcp://*:{PORT}\"\n\nERROR_CNT = Counter(\"error_events_total\", \"Error events\", [\"source\"])\n\nctx  = zmq.asyncio.Context()\nsub = ctx.socket(zmq.SUB); sub.bind(SUB_ENDPOINT); sub.setsockopt_string(zmq.SUBSCRIBE, \"\")\npub = ctx.socket(zmq.PUB); pub.bind(PUB_ENDPOINT)\n\nasync def forward():\n    while True:\n        raw = await sub.recv()\n        try:\n            msg = json.loads(raw)\n            ERROR_CNT.labels(msg.get(\"agent\", \"unknown\")).inc()\n        except Exception:\n            msg = {\"raw\": raw.decode(errors=\"ignore\")}\n            ERROR_CNT.labels(\"malformed\").inc()\n        await pub.send_json(msg)\n\ndef main() -> None:\n    start_http_server(9105)\n    loop = asyncio.get_event_loop()\n    loop.add_signal_handler(signal.SIGINT, loop.stop)\n    loop.add_signal_handler(signal.SIGTERM, loop.stop)\n    loop.run_until_complete(forward())\n\nif __name__ == \"__main__\":\n    main()\nPY\n\ncat >\"$SVC/README.md\"<<'MD'\n# Central Error Bus\n\nZeroMQ-based PUB/SUB service that gathers structured error events from all\nagents (via IPC) and re-broadcasts them to any subscribers. Exposes Prometheus\nmetrics on `9105/metrics`.\nMD\n\ncat >\"tests/test_error_bus_import.py\"<<'PYT'\ndef test_import():\n    import importlib\n    importlib.import_module(\"services.central_error_bus.error_bus\")\nPYT\n```\n\n**2. Run Smoke Test (2/8):**\nInstall pytest and run a simple import test to ensure the file structure is correct.\n\n```bash\necho \"🧪 2/8  Installing pytest & running smoke test...\"\npython3 -m pip install --quiet pytest\npytest -q\n```\n\n**3. Build Docker Image (3/8):**\nBuild the Docker image for the service as a smoke test.\n\n```bash\nSVC=\"services/central_error_bus\"\necho \"🐳 3/8  Building Docker image (smoke)…\"\ndocker build -t central_error_bus:dev \"$SVC\"\n```\n\n**4. Update MainPC Startup Config (4/8):**\nPatch the `startup_config.yaml` for MainPC to include the new error bus agent.\n\n```bash\necho \"🗂 4/8  Updating MainPC startup_config.yaml…\"\npython3 - <<'PY'\nimport yaml, pathlib, textwrap\nCFG = pathlib.Path(\"main_pc_code/config/startup_config.yaml\")\ndata = yaml.safe_load(CFG.read_text())\n\nagent = \"CentralErrorBus\"\nagent_def = {\n    \"script_path\": \"services/central_error_bus/error_bus.py\",\n    \"port\": \"${PORT_OFFSET}+7150\",\n    \"health_check_port\": \"${PORT_OFFSET}+8150\",\n    \"required\": True,\n    \"dependencies\": []\n}\n\n# place inside foundation_services (or create if missing)\nfoundation = data.setdefault(\"agent_groups\", {}).setdefault(\"foundation_services\", {})\nif agent not in foundation:\n    foundation[agent] = agent_def\n\n# docker group\ndg = data.setdefault(\"docker_groups\", {})\ndg.setdefault(\"error_bus\", {\n    \"description\": \"Centralised error event bus\",\n    \"agents\": [agent]\n})\nCFG.write_text(textwrap.dedent(yaml.dump(data, sort_keys=False)))\nprint(\"MainPC config patched ✔\")\nPY\n```\n\n**5. Update PC2 Startup Config (5/8):**\nPatch the `startup_config.yaml` for PC2 to include the new error bus service.\n\n```bash\necho \"🗂 5/8  Updating PC2 startup_config.yaml…\"\npython3 - <<'PY'\nimport yaml, pathlib, textwrap, sys, json\nCFG = pathlib.Path(\"pc2_code/config/startup_config.yaml\")\ndata = yaml.safe_load(CFG.read_text())\n\nagent = \"CentralErrorBus\"\nagent_def = {\n    \"name\": agent,\n    \"script_path\": \"services/central_error_bus/error_bus.py\",\n    \"host\": \"0.0.0.0\",\n    \"port\": \"${PORT_OFFSET}+7150\",\n    \"health_check_port\": \"${PORT_OFFSET}+8150\",\n    \"required\": True,\n    \"dependencies\": []\n}\nsvc_list = data.setdefault(\"pc2_services\", [])\nif not any(s.get(\"name\") == agent for s in svc_list):\n    svc_list.insert(0, agent_def)  # put near top for infra init\n\n# docker group\ndg = data.setdefault(\"docker_groups\", {})\ndg.setdefault(\"error_bus\", {\n    \"description\": \"Centralised error event bus\",\n    \"agents\": [agent]\n})\nCFG.write_text(textwrap.dedent(yaml.dump(data, sort_keys=False)))\nprint(\"PC2 config patched ✔\")\nPY\n```\n\n**6. YAML Validity Check (6/8):**\nVerify that both modified configuration files are still valid YAML.\n\n```bash\necho \"📜 6/8  YAML validity check...\"\npython3 - <<'PY'\nimport yaml, pathlib\nfor p in [\"main_pc_code/config/startup_config.yaml\",\n          \"pc2_code/config/startup_config.yaml\"]:\n    yaml.safe_load(pathlib.Path(p).read_text())\nprint(\"Both YAML configs valid ✔\")\nPY\n```\n\n**7. Format Code (7/8):**\nRun code formatters (`isort`, `black`) on the new service code if they are available.\n\n```bash\necho \"🧼 7/8  Formatting (isort + black, if available)…\"\npython3 - <<'PY'\nimport shutil, subprocess, sys, pathlib\nif shutil.which(\"isort\"):\n    subprocess.run([\"isort\", \"services/central_error_bus\", \"-q\"])\nif shutil.which(\"black\"):\n    subprocess.run([\"black\", \"services/central_error_bus\", \"-q\"])\nPY || true\n```\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase modifies configuration files for two separate systems (MainPC and PC2). Carefully execute each step in order and verify its output. Ensure both YAML configs are valid before considering the phase complete. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      }
    ],
    "status": "in_progress",
    "created": "2024-05-24T12:05:00Z",
    "updated": "2024-05-24T12:05:00Z"
  }
]