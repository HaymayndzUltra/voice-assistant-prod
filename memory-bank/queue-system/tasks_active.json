[
  {
    "id": "tutoring_agents_merge_v2",
    "description": "Action plan to set up the workspace environment, then merge legacy tutoring agents into a single `TutoringServiceAgent`, refactor the PC2 configuration file, and run verification tests.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nThis initial step contains the user manual for this task plan. It outlines the commands to interact with the plan and the critical safety workflow that must be followed for all subsequent phases.\n\n**Technical Artifacts:**\n**I. CORE BEHAVIORAL MANDATES (FOR THE EXECUTING AI - READ FIRST)**\n1.  **Validate Assumptions:** Before starting, validate your assumptions about the task using the provided details.\n2.  **Clarify Ambiguity:** If information is ambiguous or missing, seek clarification before proceeding.\n3.  **Highlight Conflicts:** If you detect errors or conflicts in the data, highlight them immediately and suggest alternatives.\n4.  **Explain Rationale:** During execution, explain the rationale for each step taken.\n5.  **Review Before Submission:** Before submitting the final output, review the entire process to correct any errors or flawed assumptions.\n\n**II. HOW TO USE THIS TASK PLAN (COMMANDS & PROTOCOL)**\n\n1.  **COMMANDS:**\n    *   **TO VIEW DETAILS:** `python3 todo_manager.py show tutoring_agents_merge_v2`\n    *   **TO MARK AS DONE:** `python3 todo_manager.py done tutoring_agents_merge_v2 <step_number>`\n\n2.  **WORKFLOW & SAFETY PROTOCOL (CRUCIAL):**\n    *   **FOCUS ON CURRENT STEP:** In each Phase, always read and understand the `IMPORTANT NOTE` first.\n    *   **REVIEW-CONFIRM-PROCEED LOOP:** After completing a Phase, review your work and the next Phase. If your confidence score is below 90%, REPEAT the review.\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating manual for the entire plan. Understanding these protocols is mandatory before proceeding to Phase 1. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      },
      {
        "text": "PHASE 1: Workspace & Environment Setup\n\n**Explanations:**\nInihahanda ng phase na ito ang iyong local workspace. Kabilang dito ang pag-update ng system packages, pag-install ng tamang Python version, pag-create ng isang isolated virtual environment, at pag-install ng mga pangunahing dependencies na kakailanganin para sa mga susunod na hakbang.\n\n**Technical Artifacts / Tasks:**\n\n**1. I-update ang System at Mag-install ng Python venv:**\nSiguraduhing up-to-date ang iyong system at naka-install ang `venv` package para sa iyong Python version.\n```bash\nsudo apt update\nsudo apt install python3.13-venv python3.13-full\n# Palitan ang python3.13 base sa version mo; pwede rin python3-venv lang\n```\n\n**2. Gumawa at I-activate ang Virtual Environment:**\nLilikha ito ng isang `venv` folder sa iyong kasalukuyang directory at ia-activate ito para maging isolated ang iyong mga dependencies.\n```bash\n# Gumawa ng bagong virtual environment sa workspace\npython3 -m venv venv\n\n# Activate ang virtual environment\nsource venv/bin/activate\n# Makikita mo (venv) sa simula ng prompt kapag naka-activate\n```\n\n**3. I-upgrade ang Pip at I-install ang Core Tools:**\nI-install ang mga mahahalagang Python packages na gagamitin sa buong proseso.\n```bash\n# I-upgrade ang pip at install ang mga kinakailangang packages\npip install --upgrade pip setuptools wheel\npip install grpcio-tools pytest\n```\n\n──────────────────────────────────\nIMPORTANT NOTE: Ang phase na ito ay kritikal. Ang lahat ng susunod na phase ay nakadepende sa tamang pagkaka-setup ng environment na ito. Siguraduhing naka-activate ang virtual environment (`source venv/bin/activate`) bago magpatuloy sa susunod na hakbang. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      },
      {
        "text": "PHASE 2: Tutoring Agents Merge\n\n**Explanations:**\nThis phase executes a one-shot script to consolidate the `TutorAgent` and `TutoringAgent` into a single, unified `TutoringServiceAgent`. It involves copying the new implementation, performing a complex refactoring of the PC2 startup configuration, and running multiple checks to ensure system integrity.\n\n**Technical Artifacts / Tasks:**\n\n**1. Copy Unified Agent Implementation (1/7):**\nCopy the backup implementation of the new agent to its final destination.\n\n```bash\necho \"📁 1/7  Copying unified agent implementation...\"\nSRC=\"pc2_code/agents/backups/tutoring_service_agent.py\"\nDST=\"pc2_code/agents/TutoringServiceAgent.py\"\ncp \"$SRC\" \"$DST\"\n```\n\n**2. Refactor PC2 Startup Configuration (2/7):**\nExecute a Python script to modify `pc2_code/config/startup_config.yaml`. This script will remove old agent entries, add the new one, update dependencies across all other services, and adjust the Docker group.\n\n```bash\necho \"🗂 2/7  Refactoring pc2 startup_config.yaml...\"\npython3 - <<'PY'\nimport yaml, pathlib, textwrap, re, sys\n\nCFG = pathlib.Path(\"pc2_code/config/startup_config.yaml\")\ndata = yaml.safe_load(CFG.read_text())\n\n# 2-A  Remove TutorAgent & TutoringAgent from pc2_services list\nold_names = {\"TutorAgent\", \"TutoringAgent\"}\nsvc_list = data.get(\"pc2_services\", [])\nsvc_list = [svc for svc in svc_list if svc.get(\"name\") not in old_names]\n\n# 2-B  Add TutoringServiceAgent (if not yet present)\nagent_name = \"TutoringServiceAgent\"\nif not any(s.get(\"name\") == agent_name for s in svc_list):\n    svc_list.append({\n        \"name\": agent_name,\n        \"script_path\": \"pc2_code/agents/TutoringServiceAgent.py\",\n        \"host\": \"0.0.0.0\",\n        \"port\": \"${PORT_OFFSET}+7108\",\n        \"health_check_port\": \"${PORT_OFFSET}+8108\",\n        \"required\": True,\n        \"dependencies\": [\"MemoryOrchestratorService\"]\n    })\ndata[\"pc2_services\"] = svc_list\n\n# 2-C  Sweep through every service’s dependencies and\n#      replace TutorAgent / TutoringAgent with new name.\nfor svc in data[\"pc2_services\"]:\n    deps = svc.get(\"dependencies\", [])\n    svc[\"dependencies\"] = [\n        agent_name if d in old_names else d for d in deps\n    ]\n\n# 2-D  Update docker_groups.tutoring_cpu\ndg = data.setdefault(\"docker_groups\", {})\ntgrp = dg.setdefault(\"tutoring_cpu\", {\n    \"description\": \"Tutoring and educational agents (CPU-bound)\",\n    \"agents\": []\n})\nagents = set(tgrp.get(\"agents\", [])) - old_names\nagents.add(agent_name)\ntgrp[\"agents\"] = sorted(agents)\n\nCFG.write_text(textwrap.dedent(yaml.dump(data, sort_keys=False)))\nprint(\"startup_config.yaml patched ✔\")\nPY\n```\n\n**3. Run Import Test (3/7):**\nPerform a direct import test on the new agent file to ensure it's syntactically valid and contains the expected class.\n\n```bash\necho \"🧪 3/7  Import test for TutoringServiceAgent...\"\npython3 - <<'PY'\nimport importlib.util, pathlib, sys\npath = pathlib.Path(\"pc2_code/agents/TutoringServiceAgent.py\")\nspec = importlib.util.spec_from_file_location(\"TutoringServiceAgent\", path)\nmodule = importlib.util.module_from_spec(spec)\nspec.loader.exec_module(module)\nassert hasattr(module, \"TutoringServiceAgent\") or hasattr(module, \"TutorAgent\"), \\\n       \"Agent class not found\"\nprint(\"Import OK ✔\")\nPY\n```\n\n**4. Remove Stale Files (4/7):**\nClean up any lingering `.pyc` build artifacts.\n\n```bash\necho \"🧹 4/7  Removing stale files (if any build artefacts)…\"\nfind pc2_code/agents -name \"*.pyc\" -delete\n```\n\n**5. YAML Validity Check (5/7):**\nValidate that the heavily modified `startup_config.yaml` is still a valid YAML file.\n\n```bash\necho \"📜 5/7  YAML validity check...\"\npython3 - <<'PY'\nimport yaml, pathlib\nyaml.safe_load(pathlib.Path(\"pc2_code/config/startup_config.yaml\").read_text())\nprint(\"startup_config.yaml valid YAML ✔\")\nPY\n```\n\n**6. Run Pytest Stub (6/7):**\nCreate and run a minimal pytest test case for the new agent.\n\n```bash\necho \"🧪 6/7  Running minimal pytest stub...\"\npython3 -m pip install --quiet pytest\ncat > tests/test_tutoring_service_import.py <<'PYT'\ndef test_import():\n    import importlib.util, pathlib\n    p = pathlib.Path(\"pc2_code/agents/TutoringServiceAgent.py\")\n    spec = importlib.util.spec_from_file_location(\"TutoringServiceAgent\", p)\n    m = importlib.util.module_from_spec(spec); spec.loader.exec_module(m)\nPYT\npytest -q\n```\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase performs a significant refactoring of a critical configuration file (`pc2_code/config/startup_config.yaml`). It is crucial to verify the output of step 2 and the success of the YAML validity check in step 5. Any failure here could destabilize the PC2 system. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      }
    ],
    "status": "in_progress",
    "created": "2024-05-24T12:20:00Z",
    "updated": "2024-05-24T12:20:00Z"
  }
]