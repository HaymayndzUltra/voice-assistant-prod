[
  {
    "id": "20240524_agent_migration_plan",
    "description": "Action plan to migrate monolithic Docker Compose services into individual, containerized agent services.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nThis initial step contains the user manual for this task plan. It outlines the commands to interact with the plan and the critical safety workflow that must be followed for all subsequent phases.\n\n**Technical Artifacts:**\n**HOW TO USE THIS TASK PLAN (COMMANDS & PROTOCOL)**\n\n**I. COMMANDS:**\n1.  **TO VIEW DETAILS:** `python3 todo_manager.py show 20240524_agent_migration_plan`\n2.  **TO MARK AS DONE:** `python3 todo_manager.py done 20240524_agent_migration_plan <step_number>`\n\n**II. WORKFLOW & SAFETY PROTOCOL (CRUCIAL):**\n1.  **FOCUS ON CURRENT STEP:** In each Phase, always read and understand the `IMPORTANT NOTE` first.\n2.  **REVIEW-CONFIRM-PROCEED LOOP:** After completing a Phase, review your work and the next Phase. If your confidence score is below 90%, REPEAT the review.\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating manual for the entire plan. Understanding these protocols is mandatory before proceeding to Phase 1. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 1: Initial Analysis and Information Gathering\n\n**Explanations:**\nThe first step is to gather all necessary information from the existing grouped `docker-compose.yml` files. This involves validating file paths and extracting specific configuration details for each agent slated for migration. This data will be the foundation for the entire migration process.\n\n**Technical Artifacts / Tasks:**\n1.  **Validate Paths:** Confirm that all of the following `docker-compose.yml` files exist in the `/workspace` directory:\n    - `/workspace/docker/infra_core/docker-compose.yml`\n    - `/workspace/docker/coordination/docker-compose.yml`\n    - `/workspace/docker/memory_stack/docker-compose.yml`\n    - `/workspace/docker/language_stack/docker-compose.yml`\n    - `/workspace/docker/reasoning_gpu/docker-compose.yml`\n    - `/workspace/docker/learning_gpu/docker-compose.yml`\n    - `/workspace/docker/vision_gpu/docker-compose.yml`\n    - `/workspace/docker/speech_gpu/docker-compose.yml`\n    - `/workspace/docker/translation_services/docker-compose.yml`\n    - `/workspace/docker/emotion_system/docker-compose.yml`\n    - `/workspace/docker/utility_cpu/docker-compose.yml`\n    - `/workspace/docker/observability/docker-compose.yml`\n\n2.  **Extract Agent Information:** For each agent in the confirmed list, meticulously extract the following details from its current `docker-compose.yml` file:\n    - Current `command` used in the compose file.\n    - Current `ports` mappings.\n    - Current `environment` variables.\n    - Current `depends_on` dependencies.\n\n3.  **Consolidate Findings:** Store the extracted information in a structured format (e.g., a temporary JSON or YAML file) for easy access by the automation script in a later phase.\n\n──────────────────────────────────\nIMPORTANT NOTE: The accuracy of the data extracted in this phase is critical. Errors or omissions here will cascade and cause failures in subsequent steps. Double-check all extracted commands, ports, and environment variables against the source files. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 2: Define Standardized Agent Structure and Templates\n\n**Explanations:**\nThis phase establishes the standardized file structure and templates that will be used for every new individual agent container. This ensures consistency and simplifies the automation process.\n\n**Technical Artifacts / Tasks:**\n1.  **Define Individual Directory Structure:** For each agent, the target structure will be:\n    ```\n    /workspace/docker/AGENT_NAME/\n    ├── Dockerfile\n    ├── requirements.txt\n    └── docker-compose.yml\n    ```\n\n2.  **Finalize Dockerfile Template:** The following `Dockerfile` template must be used for every agent. This template will be populated by the automation script.\n    ```dockerfile\n    FROM python:3.10-slim\n    RUN apt-get update && apt-get install -y --no-install-recommends curl gcc build-essential && rm -rf /var/lib/apt/lists/*\n    COPY requirements.txt /tmp/\n    RUN pip install --no-cache-dir -r /tmp/requirements.txt\n    COPY main_pc_code /app/main_pc_code\n    COPY common /app/common\n    COPY common_utils /app/common_utils\n    WORKDIR /app\n    ENV PYTHONPATH=/app\n    HEALTHCHECK CMD curl -f http://localhost:${HEALTH_PORT}/health || exit 1\n    CMD [\"python\", \"-m\", \"main_pc_code.agents.AGENT_NAME\"]\n    ```\n\n──────────────────────────────────\nIMPORTANT NOTE: The Dockerfile template is standardized. Ensure it is saved correctly and is accessible to the automation script. Any changes to this template will affect all 47 agents, so it must be finalized before proceeding. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 3: Develop Automation Scripts for Migration\n\n**Explanations:**\nWith the data gathered and templates defined, the next step is to create the automation scripts that will perform the migration. This involves a script to extract agent-specific Python requirements and a main script to orchestrate the entire migration.\n\n**Technical Artifacts / Tasks:**\n1.  **Create Requirements Extraction Script:**\n    - Create the file: `/workspace/scripts/extract_individual_requirements.py`\n    - The script must be designed to scan an agent's source file (e.g., `/workspace/main_pc_code/agents/AGENT_NAME.py`) and extract only the Python `import` statements used by that specific agent to generate a minimal `requirements.txt`.\n\n2.  **Create Main Migration Script:**\n    - Create the file: `/workspace/scripts/migrate_to_individual_containers.py`\n    - This script will be the core of the automation. It should:\n        a. Read the consolidated agent data from Phase 1.\n        b. Iterate through each agent on the migration list.\n        c. Create the individual directory structure (`/workspace/docker/AGENT_NAME/`).\n        d. Run `extract_individual_requirements.py` for the agent and save the output to the new `requirements.txt`.\n        e. Create the `Dockerfile` from the template, substituting the correct `AGENT_NAME`.\n        f. Generate the individual `docker-compose.yml` using the extracted port, environment, and dependency information.\n\n──────────────────────────────────\nIMPORTANT NOTE: The logic in these scripts is complex. Test the scripts' functionality, especially file I/O and string replacement, thoroughly before executing them on the entire agent list. A bug in the main script could create 47 incorrect directories. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 4: Pilot Migration and Testing\n\n**Explanations:**\nBefore migrating all 47 agents, a pilot run will be conducted on a small, representative subset of agents. This allows for testing the entire automated workflow and identifying any issues in a controlled manner.\n\n**Technical Artifacts / Tasks:**\n1.  **Select Pilot Agents:** The following agents will be used for the initial test run:\n    - `service_registry_agent` (simple, core dependency)\n    - `system_digital_twin` (simple, core dependency)\n    - `request_coordinator` (complex, multiple dependencies)\n\n2.  **Execute Migration for Pilot Agents:** Run the `migrate_to_individual_containers.py` script, configured to only process the three pilot agents.\n\n3.  **Build and Test:**\n    - Manually build the Docker images for the three pilot agents.\n    - Use their individual `docker-compose.yml` files to launch them.\n    - Verify they start correctly, that health checks pass, and that they function as expected. Pay close attention to the `request_coordinator` to ensure its dependencies are handled correctly.\n\n4.  **Review and Refine:** Analyze the results. If any issues arise in the generated files, builds, or container execution, go back to Phase 3 to debug and refine the automation scripts. Repeat this pilot phase until the process is flawless.\n\n──────────────────────────────────\nIMPORTANT NOTE: This is the critical validation step. Do not proceed to the full-scale migration until the pilot agents can be migrated, built, and run successfully without any manual intervention or corrections. A successful pilot is the gate to the final phase. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 5: Full-Scale Migration and Final Deliverables\n\n**Explanations:**\nWith the automation scripts tested and validated, this final phase involves executing the migration for all remaining agents and producing the final project deliverables.\n\n**Technical Artifacts / Tasks:**\n1.  **Execute Full Migration:** Run the `migrate_to_individual_containers.py` script for all 47 agents listed in the project scope.\n\n2.  **Generate Master Compose File:** Create the final `docker-compose.individual.yml` file in `/workspace/`. This file should contain service definitions for all 47 migrated agents, allowing them to be orchestrated together.\n\n3.  **Create Build Script:** Create a shell script named `build_individual_agents.sh`. This script should iterate through all `/workspace/docker/AGENT_NAME/` directories and run `docker build` for each one, appropriately tagging the resulting images.\n\n4.  **Generate Size Comparison Report:**\n    - Measure the total size of the original, grouped Docker images.\n    - Measure the total size of the 47 new, individual Docker images.\n    - Create a report comparing the two, noting the overall size difference.\n\n5.  **Final Verification:** As a final check, use the `docker-compose.individual.yml` to launch a subset of interdependent services to ensure the entire system can still communicate and function correctly.\n\n──────────────────────────────────\nIMPORTANT NOTE: This is the final execution phase. Ensure you have sufficient disk space for the new directories and Docker images. The creation of the final deliverables marks the completion of the project. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      }
    ],
    "status": "completed",
    "created": "2024-05-24T12:00:00Z",
    "updated": "2025-08-06T02:59:31.665888+08:00"
  }
]