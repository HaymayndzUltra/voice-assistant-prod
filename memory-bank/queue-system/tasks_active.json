[
    {
      "id": "ux_first_actionable_20250116",
      "description": "Actionable plan for UX requirements implementation (A-H) followed by system integration, addressing conflicts and adding missing features.",
      "todos": [
        {
          "text": "PHASE 0: SETUP & CONFLICT RESOLUTION\n\n**Explanations:** Fix the two identified conflicts before starting implementation. Remove duplicate `/metrics` endpoint at line 1464 in app.py (keep line 943 version). Remove basic `SessionState` from handlers.py and use only `EnhancedSessionState` from session_manager.py. Document all UX requirements (A-H) and create backup of current working implementation.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 0\n```\n\nIMPORTANT NOTE: These conflicts must be resolved first to prevent runtime errors. The duplicate endpoint will cause FastAPI to fail on startup.",
          "done": true
        },
        {
          "text": "PHASE 1: STATE MACHINE IMPLEMENTATION\n\n**Explanations:** Implement document capture state machine in EnhancedSessionState supporting SEARCHING→LOCKED→COUNTDOWN→CAPTURED→CONFIRM→FLIP-TO-BACK→BACK-SEARCHING→COMPLETE states. Add current_side tracking (front/back), front_captured/back_captured flags, and state transition methods. Ensure each state change emits proper telemetry events.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 1\n```\n\nIMPORTANT NOTE: State machine is the foundation for all UX flows. Must support both front and back document capture with proper transitions.",
          "done": true
        },
        {
          "text": "PHASE 2: TIMING METADATA & ANIMATION SUPPORT\n\n**Explanations:** Add timing metadata to all API responses for frontend animation synchronization. Implement support for: capture.flash_check (120-180ms+250ms), transition.card_flip_y (350-450ms), stepper.advance_front_done (200ms), back.frame_pulse (3×300ms), countdown.ring (600ms), extraction.skeleton_fields (<500ms). Add these as configurable thresholds in threshold_manager.py.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 2\n```\n\nIMPORTANT NOTE: All timing values must be returned in API responses so frontend can synchronize animations. Cancel-on-jitter must respond in <50ms.",
          "done": true
        },
        {
          "text": "PHASE 3: TAGALOG MICROCOPY SUPPORT\n\n**Explanations:** Implement all Tagalog-first microcopy in API responses. Add message templates: \"Steady lang… kukunin na\" (LOCKED), \"Harap OK ✅\" (front captured), \"Likod naman. I-frame ang barcode/QR kung meron\" (flip prompt), \"Bawas glare / Ayusin sa loob ng frame / Hawak nang steady\" (quality hints), \"Gumalaw—subukan ulit\" (cancel), \"Likod OK ✅ — Tinitingnan ang detalye…\" (back captured). Support message localization.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 3\n```\n\nIMPORTANT NOTE: All user-facing messages must be in Tagalog by default with English fallback. Messages must be returned in API responses for frontend display.",
          "done": true
        },
        {
          "text": "PHASE 4: OCR EXTRACTION WITH CONFIDENCE SCORES\n\n**Explanations:** Integrate evidence_extractor.py with face scan flow. Enhance extraction to return confidence scores per field (Name: 0.94, DOB: 0.89, etc.). Implement color coding logic: Green ≥0.9, Amber 0.75-0.89, Red <0.75. Add extraction to burst_eval handler for back-side processing. Ensure extraction completes within 4s (p50) to 6s (p95) from CAPTURED state.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 4\n```\n\nIMPORTANT NOTE: Extraction must include confidence scores for each field and support streaming updates via EXTRACT_START/RESULT events.",
          "done": true
        },
        {
          "text": "PHASE 5: REAL-TIME STREAMING IMPLEMENTATION\n\n**Explanations:** Implement WebSocket endpoint at /ws/extraction/{session_id} for real-time extraction updates. Add Server-Sent Events fallback at /api/v1/kyc/extraction/stream/{session_id}. Stream extraction progress with field-by-field updates including confidence scores. Implement extraction.skeleton_fields with shimmer placeholder support. Ensure <500ms initial response.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 5\n```\n\nIMPORTANT NOTE: Streaming must support multiple concurrent sessions and provide real-time field updates as extraction progresses.",
          "done": true
        },
        {
          "text": "PHASE 6: ENHANCED QUALITY GATES & CANCEL-ON-JITTER\n\n**Explanations:** Implement instant cancel-on-jitter during countdown when quality gates fail: focus <7.0, motion >0.4, corners <0.95, glare >3.5%. Response time must be <50ms from detection. Add countdown.cancel_reason to telemetry. Implement error prompts for partial_document, low_res, blur_high conditions. Support single-tap recapture flow.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 6\n```\n\nIMPORTANT NOTE: Cancel detection must be instant to prevent shaky frame captures. Must include clear Tagalog error messages.",
          "done": true
        },
        {
          "text": "PHASE 7: FRONT/BACK CAPTURE FLOW\n\n**Explanations:** Implement complete front/back document flow. Add \"Harap OK\" badge trigger after front capture, automatic stepper advance animation support, flip-to-back transition triggers, back-side guidance with \"I-frame ang barcode/QR\" hint, barcode/MRZ detection that delays countdown until decode_conf ≥0.95, and \"Likod OK\" confirmation. Track both sides separately.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 7\n```\n\nIMPORTANT NOTE: Back-side capture must guide users to capture document, not selfie. Completion rate for back step must be ≥95%.",
          "done": true
        },
        {
          "text": "PHASE 8: TELEMETRY FOR UX EVENTS\n\n**Explanations:** Implement all UX telemetry events: capture.lock_open, countdown.start, countdown.cancel_reason, capture.done_front, transition.front_to_back, capture.done_back, extraction.fields_confidence_avg, time_to_fields_ms. Add event timing data, state transition tracking, and quality metrics. Enable real-time tuning based on telemetry.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 8\n```\n\nIMPORTANT NOTE: All telemetry must include precise timing data for performance analysis and UX optimization.",
          "done": true
        },
        {
          "text": "PHASE 9: ACCESSIBILITY & REDUCE MOTION SUPPORT\n\n**Explanations:** Implement accessibility features: detect OS 'Reduce Motion' setting, provide alternative timing hints (replace flip with 200ms crossfade), disable haptic feedback when accessibility is on, ensure all visual feedback has text alternatives, support screen reader captions, maintain ≥44×44 touch target sizing hints. Add accessibility flags to API responses.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 9\n```\n\nIMPORTANT NOTE: Backend must detect accessibility settings and provide appropriate alternative responses for reduced motion mode.",
          "done": true
        },
        {
          "text": "PHASE 10: UX ACCEPTANCE TESTING\n\n**Explanations:** Validate all acceptance criteria: Front→Back completion rate ≥95%, countdown visible ≥600ms, cancel-on-jitter <50ms response, extraction latency p50≤4s/p95≤6s, comprehension test (9/10 users understand flow). Verify all parity checklist items: lock+green corners, shutter flash, stepper advance, flip animation support, barcode assist, real-time confidences.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 10\n```\n\nIMPORTANT NOTE: Must pass ALL acceptance criteria and parity checklist items. Generate detailed UX metrics report.",
          "done": true
        },
        {
          "text": "PHASE 11: SYSTEM INTEGRATION ANALYSIS\n\n**Explanations:** Now that UX is complete, begin integration plan. Map overlaps between our face modules and existing KYC modules. Document which modules to merge (pad_scorer vs pad_detector), which to keep separate (session_manager, challenge_generator), and which to enhance (evidence_extractor). Create dependency graph.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 11\n```\n\nIMPORTANT NOTE: This begins the code integration phase AFTER UX requirements are fully implemented and tested.",
          "done": true
        },
        {
          "text": "PHASE 12: DEDUPLICATION & MERGE\n\n**Explanations:** Merge duplicate functionality: Combine PAD detection (pad_detector.py + pad_scorer.py → enhanced_pad_detector.py), consolidate face analysis (geometry.py + quality_analyzer.py → enhanced_quality_analyzer.py), unify metrics (metrics.py + telemetry.py → unified_metrics.py). Preserve best features from both implementations.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 12\n```\n\nIMPORTANT NOTE: Run comparison tests after each merge to ensure no functionality is lost during consolidation.",
          "done": true
        },
        {
          "text": "PHASE 13: BIOMETRIC & EXTRACTION INTEGRATION\n\n**Explanations:** Connect existing face_matcher.py with session management for unified decision making. Link biometric matching to session state, add TAR@FAR calculations, integrate match scores into decision logic. Ensure evidence_extractor.py is fully integrated with burst evaluation pipeline.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 13\n```\n\nIMPORTANT NOTE: Biometric integration must maintain accuracy targets while supporting all UX flows.",
          "done": true
        },
        {
          "text": "PHASE 14: API CONSOLIDATION\n\n**Explanations:** Create unified API structure: merge face scan endpoints under /api/v1/kyc/face/*, standardize all response formats, ensure consistent error handling, add security middleware for CORS and rate limiting, update OpenAPI documentation. Maintain backward compatibility for existing endpoints.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 14\n```\n\nIMPORTANT NOTE: API consolidation must not break any existing integrations. All endpoints must follow consistent patterns.",
          "done": true
        },
        {
          "text": "PHASE 15: FINAL CLEANUP & DOCUMENTATION\n\n**Explanations:** Remove duplicate modules, reorganize code into appropriate directories, update all import paths, enhance README with UX implementation details, create migration guide showing before/after changes, document all timing values, state transitions, telemetry events, and API changes. Archive replaced modules.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show ux_first_actionable_20250116\npython3 todo_manager.py done ux_first_actionable_20250116 15\n```\n\nIMPORTANT NOTE: Documentation must be comprehensive enough for new developers to understand both UX requirements and technical implementation.",
          "done": false
        }
      ],
      "status": "in_progress",
      "created": "2025-01-16T16:45:00+08:00",
      "updated": "2025-08-16T23:16:19.435003+08:00"
    }
  ]