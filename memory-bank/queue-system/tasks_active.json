[
  {
    "id": "speech_relay_and_final_docs",
    "description": "Action plan to set up the Speech Relay Service on PC2 and to perform final project documentation for all preceding phases (1-7).",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nThis initial step contains the user manual for this task plan. It outlines the commands to interact with the plan and the critical safety workflow that must be followed for all subsequent phases.\n\n**Technical Artifacts:**\n**I. CORE BEHAVIORAL MANDATES (FOR THE EXECUTING AI - READ FIRST)**\n1.  **Validate Assumptions:** Before starting, validate your assumptions about the task using the provided details.\n2.  **Clarify Ambiguity:** If information is ambiguous or missing, seek clarification before proceeding.\n3.  **Highlight Conflicts:** If you detect errors or conflicts in the data, highlight them immediately and suggest alternatives.\n4.  **Explain Rationale:** During execution, explain the rationale for each step taken.\n5.  **Review Before Submission:** Before submitting the final output, review the entire process to correct any errors or flawed assumptions.\n6.  **STOP ON ERROR (CRUCIAL):** If any command or step results in an error, **STOP IMMEDIATELY**. Do not proceed to the next step. Analyze the error, apply a fix, and re-run the failed step until it succeeds before continuing.\n\n**II. HOW TO USE THIS TASK PLAN (COMMANDS & PROTOCOL)**\n\n1.  **COMMANDS:**\n    *   **TO VIEW DETAILS:** `python3 todo_manager.py show speech_relay_and_final_docs`\n    *   **TO MARK AS DONE:** `python3 todo_manager.py done speech_relay_and_final_docs <step_number>`\n\n2.  **WORKFLOW & SAFETY PROTOCOL (CRUCIAL):**\n    *   **FOCUS ON CURRENT STEP:** In each Phase, always read and understand the `IMPORTANT NOTE` first.\n    *   **REVIEW-CONFIRM-PROCEED LOOP:** After completing a Phase, review your work and the next Phase. If your confidence score is below 90%, REPEAT the review.\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating manual for the entire plan. Understanding these protocols is mandatory before proceeding to Phase 7. **If you encounter any errors, do not proceed. Fix the issue before moving to the next step.** Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      },
      {
        "text": "PHASE 7: Speech Relay Service (PC2)\n\n**Explanations:**\nThis phase executes a one-shot script to create the `SpeechRelayService` on PC2. This gRPC service is responsible for forwarding speech-trigger events from the Vision/Dream agents on PC2 to the `StreamingTTSAgent` on MainPC.\n\n**Technical Artifacts / Tasks:**\n\n**1. Scaffold Service Directory (1/8):**\n```bash\necho \"🔧 1/8  Scaffolding service directory…\"\nSVC=\"services/speech_relay\"\nmkdir -p \"$SVC\" tests\n\ncat >\"$SVC/requirements.txt\"<<'REQ'\ngrpcio>=1.63.0\ngrpcio-tools>=1.63.0\nprometheus-client>=0.20.0\nuvloop>=0.19.0\nREQ\n\ncat >\"$SVC/Dockerfile\"<<'DOCK'\nFROM python:3.10-slim-bullseye\nENV PYTHONUNBUFFERED=1\nCOPY requirements.txt /tmp/\nRUN pip3 install --no-cache-dir -r /tmp/requirements.txt\nCOPY . /app\nWORKDIR /app\nCMD [\"python3\",\"relay.py\"]\nDOCK\n\ncat >\"$SVC/relay.proto\"<<'PROTO'\nsyntax = \"proto3\";\n\nservice SpeechRelay {\n  rpc Forward (SpeechRequest) returns (Ack);\n}\n\nmessage SpeechRequest {\n  string payload = 1;   // raw JSON from VisionProcessingAgent\n}\n\nmessage Ack {\n  bool ok = 1;\n}\nPROTO\n\ncat >\"$SVC/relay.py\"<<'PY'\n\"\"\"\nSpeech Relay Service\n--------------------\nForwards speech-trigger events from PC2 (Vision/Dream agents) to\nMainPC StreamingTTSAgent via gRPC.  Exposes Prometheus metrics.\n\"\"\"\nimport asyncio, os, logging, grpc\nfrom prometheus_client import start_http_server, Counter\nimport relay_pb2 as pb\nimport relay_pb2_grpc as pb_grpc\n\nlogging.basicConfig(level=logging.INFO)\nLOG = logging.getLogger(\"speech-relay\")\n\nDOWNSTREAM = os.getenv(\"MAINPC_TTS_ENDPOINT\", \"mainpc:5562\")\nMETRICS_PORT = int(os.getenv(\"METRICS_PORT\", \"9109\"))\nRELAY_PORT   = int(os.getenv(\"RELAY_PORT\", \"7130\"))\n\nTX = Counter(\"speech_relay_messages_total\", \"Msgs relayed\")\n\nclass RelayServicer(pb_grpc.SpeechRelayServicer):\n    async def Forward(self, request: pb.SpeechRequest, ctx):\n        TX.inc()\n        # forward to MainPC TTS\n        async with grpc.aio.insecure_channel(DOWNSTREAM) as ch:\n            stub = pb_grpc.SpeechRelayStub(ch)\n            await stub.Forward(request)\n        return pb.Ack(ok=True)\n\nasync def serve():\n    server = grpc.aio.server()\n    pb_grpc.add_SpeechRelayServicer_to_server(RelayServicer(), server)\n    server.add_insecure_port(f\"[::]:{RELAY_PORT}\")\n    await server.start()\n    LOG.info(\"Speech Relay listening on :%s → %s\", RELAY_PORT, DOWNSTREAM)\n    await server.wait_for_termination()\n\nif __name__ == \"__main__\":\n    # Prometheus\n    start_http_server(METRICS_PORT)\n    asyncio.run(serve())\nPY\n```\n\n**2. Generate gRPC Stubs (2/8):**\n```bash\necho \"📜 2/8  Generating gRPC stubs…\"\npython3 -m grpc_tools.protoc -I\"$SVC\" \\\n  --python_out=\"$SVC\" --grpc_python_out=\"$SVC\" \"$SVC/relay.proto\"\n```\n\n**3. Run Unit-Test (3/8):**\n```bash\necho \"🧪 3/8  Unit-test (import)…\"\npython3 -m pip install --quiet pytest\ncat > tests/test_speech_relay_import.py <<'PYT'\ndef test_import():\n    import importlib; importlib.import_module(\"services.speech_relay.relay\")\nPYT\npytest -q\n```\n\n**4. Docker Build Smoke-Test (4/8):**\n```bash\necho \"🐳 4/8  Docker build smoke-test…\"\ndocker build -t speech_relay:dev \"$SVC\"\n```\n\n**5. Update PC2 Startup Configuration (5/8):**\n```bash\necho \"🗂 5/8  Updating PC2 startup_config.yaml…\"\npython3 - <<'PY'\nimport yaml, pathlib, textwrap\nCFG = pathlib.Path(\"pc2_code/config/startup_config.yaml\")\ndata = yaml.safe_load(CFG.read_text())\n\nagent = \"SpeechRelayService\"\nsvc_def = {\n    \"name\": agent,\n    \"script_path\": \"services/speech_relay/relay.py\",\n    \"host\": \"0.0.0.0\",\n    \"port\": \"${PORT_OFFSET}+7130\",\n    \"health_check_port\": \"${PORT_OFFSET}+8130\",\n    \"required\": True,\n    \"dependencies\": [\"VisionProcessingAgent\", \"StreamingTTSAgent\"]\n}\nsvc_list = data.setdefault(\"pc2_services\", [])\nif not any(s.get(\"name\") == agent for s in svc_list):\n    svc_list.append(svc_def)\n\n# docker_groups update – vision_dream_gpu\ndg = data.setdefault(\"docker_groups\", {})\nvg = dg.setdefault(\"vision_dream_gpu\", {\n    \"description\": \"GPU-intensive vision processing and dream world services\",\n    \"agents\": []\n})\nif agent not in vg[\"agents\"]:\n    vg[\"agents\"].append(agent)\n\nCFG.write_text(textwrap.dedent(yaml.dump(data, sort_keys=False)))\nprint(\"pc2 startup_config.yaml patched ✔\")\nPY\n```\n\n**6. YAML Validity Check (6/8):**\n```bash\necho \"📜 6/8  YAML validity check…\"\npython3 - <<'PY'\nimport yaml, pathlib\nyaml.safe_load(pathlib.Path(\"pc2_code/config/startup_config.yaml\").read_text())\nprint(\"startup_config.yaml valid YAML ✔\")\nPY\n```\n\n**7. Optional Formatting (7/8):**\n```bash\necho \"🧼 7/8  Optional formatting (isort + black)…\"\npython3 - <<'PY'\nimport shutil, subprocess\nt=\"services/speech_relay\"\nif shutil.which(\"isort\"): subprocess.run([\"isort\",t,\"-q\"])\nif shutil.which(\"black\"): subprocess.run([\"black\",t,\"-q\"])\nPY || true\n```\n\n──────────────────────────────────\nIMPORTANT NOTE: This service acts as a bridge between PC2 and MainPC. Its functionality depends on the `MAINPC_TTS_ENDPOINT` environment variable being correctly set to reach the `StreamingTTSAgent`. A failure here will break the Vision-to-Speech pipeline. **If you encounter any errors, do not proceed. Fix the issue before moving to the next step.** Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 8: Final Documentation & Project Wrap-up\n\n**Explanations:**\nThis is the final phase to ensure the entire project (Phases 1-7) is well-documented, maintainable, and the knowledge is preserved. This involves reviewing all changes and creating comprehensive documentation.\n\n**Technical Artifacts / Tasks:**\n*   **Review all created/modified files** from Phase 1 to Phase 7 to ensure consistency and correctness.\n*   **Update the main project `README.md`** to include descriptions of all new services:\n    *   Cross-Machine GPU Scheduler\n    *   Central Error Bus\n    *   Streaming Translation Proxy\n    *   Tutoring Service Agent (Unified)\n    *   Observability Dashboard (UI + API)\n    *   Self-Healing Supervisor\n    *   Speech Relay Service\n*   **Create or update architecture diagrams** to show how these new services interact with each other and with existing components on both MainPC and PC2.\n*   **Document all changes made to configuration files** (`main_pc_code/config/startup_config.yaml` and `pc2_code/config/startup_config.yaml`), explaining the new agent groups and docker groups.\n*   **Write a summary of the final system state**, including a list of all running services, their ports, and their primary responsibilities.\n*   **Collate all \"Known Issues\"** identified in previous phases (e.g., Docker permissions, Node.js vulnerabilities) into a single section in the main project documentation for future work.\n\n──────────────────────────────────\nIMPORTANT NOTE: This is the concluding step of the entire project. Its purpose is to ensure the system is understandable and maintainable for the future. Do not consider the project complete until this documentation is written and verified for accuracy. **If you encounter any errors, do not proceed. Fix the issue before moving to the next step.** Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      }
    ],
    "status": "in_progress",
    "created": "2024-05-24T12:35:00Z",
    "updated": "2025-08-07T18:48:12.235988+08:00"
  }
]