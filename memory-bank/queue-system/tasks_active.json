[
  {
    "id": "20250807_uoc_implementation",
    "description": "Master implementation plan for the Unified Observability Center (UOC), an event-driven system built on OpenTelemetry and NATS to provide unified monitoring, alerting, and self-healing.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nThis initial step contains the user manual for this task plan. It outlines the commands to interact with the plan and the critical safety workflow that must be followed for all subsequent phases.\n\n**Technical Artifacts:**\n**I. CORE BEHAVIORAL MANDATES**\n*   **Execute Serially:** You must execute the phases in the prescribed order. Do not skip phases.\n*   **Verify Each Step:** After completing a phase, verify its success before marking it as 'done'.\n*   **Consult Source:** This plan is an interpretation of the source document. If any ambiguity arises, the source document is the ground truth.\n\n**II. HOW TO USE THIS TASK PLAN**\n*   **To Show the Plan:** `python3 todo_manager.py show 20250807_uoc_implementation`\n*   **To Mark a Phase Done:** `python3 todo_manager.py done 20250807_uoc_implementation <phase_number>` (e.g., `... done 20250807_uoc_implementation 0`)\n\n**Concluding Step: Update Plan Status**\nTo officially conclude this setup phase and update the plan's state, run the following commands. This ensures the task manager knows you are ready to proceed to the first technical phase.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_uoc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_uoc_implementation 0`\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating manual for the entire plan. Understanding these protocols is mandatory before proceeding to Phase 1. Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      },
      {
        "text": "PHASE 1: Project Scaffolding & Dependencies\n\n**Explanations:**\nThis phase involves creating the directory structure for the Unified Observability Center, copying essential resiliency modules, and setting up the Python environment with all required dependencies.\n\n**Technical Artifacts / Tasks:**\n**I. Create Directory Structure:**\nCreate the following directory and file layout.\n```\nunified_observability_center/\n├── __init__.py\n├── app.py\n├── config/\n│   ├── default.yaml\n│   ├── main_pc.yaml\n│   └── pc2.yaml\n├── core/\n│   ├── kernel.py, collector_manager.py, storage.py, alert_engine.py, healing_engine.py, telemetry.py, schemas.py\n├── plugins/\n│   ├── prometheus_scrape.py, otlp_grpc_receiver.py, zmq_subscriber.py, docker_stats.py, custom_gpu.py\n├── api/\n│   ├── rest.py, graphql.py\n├── bus/\n│   ├── nats_client.py, topics.py\n├── dashboards/\n│   └── grafana_provisioning/\n├── resiliency/\n│   ├── circuit_breaker.py, bulkhead.py\n├── requirements.txt\n└── README.md\n```\n\n**II. Populate `requirements.txt`:**\nAdd the following dependencies to `unified_observability_center/requirements.txt`.\n```\nopentelemetry-api==1.25.0\nopentelemetry-sdk==1.25.0\nopentelemetry-exporter-otlp==1.25.0\nasync-nats==0.25.0\nPyYAML==6.0.1\nprometheus-client==0.20.0\nhttpx==0.27.0\nfastapi==0.111.0\nuvicorn==0.29.0\npydantic==1.10.13\nvictoriametrics-client==0.2.3\ndocker==7.0.0\nprophet==1.1.5\ntenacity==8.2.3\n```\n\n**III. Install Dependencies:**\nRun `pip install -r unified_observability_center/requirements.txt`.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_uoc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_uoc_implementation 1`\n\n──────────────────────────────────\nIMPORTANT NOTE: A correct project structure and environment are critical for all subsequent development. Verify that all files are in the correct locations and all dependencies are installed without errors before proceeding.",
        "done": false
      },
      {
        "text": "PHASE 2: Configuration & Core Infrastructure\n\n**Explanations:**\nDefine the application's configuration schema and implement the core infrastructure components: the NATS JetStream client for the event bus and the storage facade for abstracting the time-series database and log store.\n\n**Technical Artifacts / Tasks:**\n**I. Define Configuration Schema (`config/default.yaml`):**\nPopulate `unified_observability_center/config/default.yaml` with the following content.\n```yaml\ntitle: UnifiedObservabilityCenterConfig\nversion: 1.0\n\nnats:\n  url: \"nats://nats:4222\"\n  subjects:\n    metrics: \"telemetry.metrics\"\n    logs: \"telemetry.logs\"\n    traces: \"telemetry.traces\"\n    alerts: \"telemetry.alerts\"\n    actions: \"telemetry.actions\"\n\nstorage:\n  metrics:\n    type: \"victoriametrics\"\n    url: \"http://vmselect:8481\"\n    retention_days: 30\n  logs:\n    type: \"loki\"\n    url: \"http://loki:3100\"\n    retention_days: 14\n  traces:\n    type: \"otlp\"\n    url: \"http://jaeger:4318\"\n\ncollectors:\n  enabled:\n    - prometheus_scrape\n    - otlp_grpc_receiver\n    - zmq_subscriber\n    - docker_stats\n    - custom_gpu\n  scrape_interval_seconds: 15\n\nalerting:\n  rules_path: \"/etc/uoc/rules/*.yaml\"\n  evaluation_interval_seconds: 30\n\nhealing:\n  playbooks_path: \"/etc/uoc/playbooks\"\n  default_cooldown_seconds: 300\n  actions_topic: \"telemetry.actions\"\n\napi:\n  rest_port: 9100\n  graphql_port: 9101\n\nresilience:\n  circuit_breaker:\n    failure_threshold: 5\n    reset_timeout: 15\n  bulkhead:\n    max_concurrent: 64\n    max_queue_size: 256\n\nha:\n  cluster_name: \"uoc-cluster\"\n  election_ttl: 10\n```\n\n**II. Implement NATS Client (`bus/nats_client.py`):**\nCreate a wrapper for the `async-nats` library to handle connections and publishing/subscribing to the topics defined in the configuration.\n\n**III. Implement Storage Facade (`core/storage.py`):**\nCreate a `StorageFacade` class with a unified API (`write_metrics`, `write_logs`, `query_range`) that internally uses clients for VictoriaMetrics and Loki. Wrap calls with the CircuitBreaker pattern.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_uoc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_uoc_implementation 2`\n\n──────────────────────────────────\nIMPORTANT NOTE: The NATS event bus and the storage facade are the foundational pillars of the UOC. Ensure they are robust and correctly configured before building the logic that relies on them.",
        "done": false
      },
      {
        "text": "PHASE 3: Core Logic & Engine Implementation\n\n**Explanations:**\nImplement the core business logic of the UOC, including the plug-in collectors, the alert engine for rule evaluation, the healing engine for remediation, and the kernel to orchestrate them.\n\n**Technical Artifacts / Tasks:**\n**I. Implement Collectors (`plugins/`):**\nDevelop the plug-in collectors as specified in the config (`prometheus_scrape`, `otlp_grpc_receiver`, etc.). Each collector should gather data and publish OpenTelemetry records to the appropriate NATS subject.\n\n**II. Implement Collector Manager (`core/collector_manager.py`):**\nCreate the `CollectorManager` to dynamically load, start, and stop the enabled collector plug-ins.\n\n**III. Implement Alert Engine (`core/alert_engine.py`):**\nDevelop the engine to parse rule files, periodically query the storage facade, evaluate conditions (including Prophet-based anomaly detection), and publish alert objects to the NATS bus.\n\n**IV. Implement Healing Engine (`core/healing_engine.py`):**\nCreate the engine to subscribe to the alerts subject, map alerts to remediation playbooks, and execute them in a guarded thread. It must respect cooldowns to prevent thrashing.\n\n**V. Implement Kernel (`core/kernel.py`):**\nBuild the `Kernel` class to initialize and manage the lifecycle of the bus, storage, managers, and engines. It will also handle the leader election logic.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_uoc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_uoc_implementation 3`\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the primary intelligence of the UOC. Pay close attention to the event-driven flow: collectors publish data, the alert engine consumes it to create alerts, and the healing engine consumes alerts to take action.",
        "done": false
      },
      {
        "text": "PHASE 4: API Layer & Dashboard Provisioning\n\n**Explanations:**\nImplement the external interfaces for querying data and viewing system status, including the FastAPI REST API and provisioning for Grafana dashboards.\n\n**Technical Artifacts / Tasks:**\n**I. Implement REST API (`api/rest.py`):**\nUsing FastAPI, create the REST server. Expose endpoints for `/health`, `/metrics`, `/query`, `/alerts`, and `/actions`. Enforce authentication using OAuth2 bearer tokens.\n\n**II. Implement GraphQL API (`api/graphql.py`):**\n(Optional) Implement the GraphQL endpoint for flexible querying by dashboards.\n\n**III. Provision Grafana Dashboards (`dashboards/grafana_provisioning/`):**\nCreate JSON dashboard definitions for key system metrics, SLOs, and alert statuses. These will be automatically provisioned when Grafana starts.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_uoc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_uoc_implementation 4`\n\n──────────────────────────────────\nIMPORTANT NOTE: The API and dashboards are the primary human interfaces to the UOC. Ensure they are secure, intuitive, and provide clear insights into the system's health.",
        "done": false
      },
      {
        "text": "PHASE 5: Application Bootstrap & High Availability\n\n**Explanations:**\nCreate the main application entry-point (`app.py`) that ties everything together and implement the high-availability (HA) mechanism using leader election.\n\n**Technical Artifacts / Tasks:**\n**I. Implement `app.py`:**\nThe script must perform the following actions:\n1.  Load configuration using `UnifiedConfigLoader`.\n2.  Initialize the `Kernel`.\n3.  Start the collector manager, API servers, and all engines.\n4.  Initiate the leader election process. The leader will be responsible for running exclusive tasks like alert evaluation and healing actions.\n5.  Implement graceful shutdown logic to close connections and ensure a clean exit.\n\n**II. Configure Docker Compose for HA:**\nCreate a `docker-compose.ha.yaml` file to run the complete stack locally, including a 3-node NATS cluster and multiple `uoc-core` instances to test the HA setup.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_uoc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_uoc_implementation 5`\n\n──────────────────────────────────\nIMPORTANT NOTE: The bootstrap process and HA logic are critical for the UOC's resilience. Thoroughly test the leader election and failover mechanisms to prevent any gaps in monitoring or alerting.",
        "done": false
      },
      {
        "text": "PHASE 6: Testing & Performance Validation\n\n**Explanations:**\nConduct comprehensive testing to ensure the service is correct, performant, and robust. This includes unit tests, integration tests with live containers, and high-volume load tests.\n\n**Technical Artifacts / Tasks:**\n**I. Unit & Integration Tests:**\nWrite `pytest` tests for individual components. Use `testcontainers` to spin up ephemeral NATS and VictoriaMetrics instances for realistic integration testing.\n\n**II. Load Testing:**\nUse a tool like `k6` to push a high volume of metrics (target: 100k metrics/s) to the collectors. Measure the P99 ingest delay and ensure it is ≤ 50 ms.\n\n**III. CI/CD Pipeline:**\nSet up a CI/CD pipeline (e.g., GitHub Actions) that automatically runs linting, type checking, tests, and builds/pushes Docker images on every commit.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_uoc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_uoc_implementation 6`\n\n──────────────────────────────────\nIMPORTANT NOTE: Rigorous, automated testing is non-negotiable for a critical system like the UOC. Ensure the test suite covers functionality, performance, and resilience.",
        "done": false
      },
      {
        "text": "PHASE 7: Final Verification, Deployment & Operations\n\n**Explanations:**\nPerform the final pre-production checks, deploy the service to Kubernetes, and establish operational procedures like backups and disaster recovery.\n\n**Technical Artifacts / Tasks:**\n**I. Execute Final Verification Checklist:**\n*   **HA Failover:** Manually kill the leader instance; verify that a standby promotes within 5 seconds.\n*   **End-to-End Latency:** Trigger a metric breach and confirm an alert is received via webhook in < 10 seconds.\n*   **Healing Test:** Simulate a container crash and verify the healing engine recovers it successfully.\n*   **Retention Test:** Confirm that data older than the configured retention period is automatically purged from storage.\n*   **Security Scan:** Run a container vulnerability scan (e.g., Trivy) and ensure no critical CVEs are present.\n\n**II. Deploy to Kubernetes:**\nDeploy the entire stack to a Kubernetes cluster. Use a Deployment strategy with `maxUnavailable: 0` for rolling updates to prevent alerting gaps.\n\n**III. Configure Backups:**\nSet up nightly snapshots for VictoriaMetrics (using `vmbackup`) and configure Loki's `boltdb-shipper` to back up indexes to object storage (e.g., S3).\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed, run the following commands to mark this phase as done and prepare for the next one.\n*   **Review Plan Details:** `python3 todo_manager.py show 20250807_uoc_implementation`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 20250807_uoc_implementation 7`\n\n──────────────────────────────────\nIMPORTANT NOTE: This is the final gate before the UOC is considered production-ready. Be methodical during verification and deployment. Successful completion of this phase means the UOC is the new, resilient nervous system for the entire architecture.",
        "done": false
      }
    ],
    "status": "in_progress",
    "created": "2024-05-24T14:15:00Z",
    "updated": "2024-05-24T14:15:00Z"
  }
]