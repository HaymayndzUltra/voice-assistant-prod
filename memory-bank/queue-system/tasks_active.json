[
  {
    "id": "2024_remediation_plan",
    "description": "A prioritized, phased plan to investigate and remediate critical and high-priority issues identified in the system, including service discovery failures, protocol mismatches, and deprecated component usage.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nThis initial phase establishes the operational guidelines for executing this plan. It contains mandatory behavioral principles for the AI agent and the specific commands needed to interact with the to-do list manager. Completing this phase signifies that you have read and understood the protocol.\n\n**Technical Artifacts / Tasks:**\n**I. CORE BEHAVIORAL MANDATES (FOR THE EXECUTING AI - READ FIRST)**\n1.  **Validate Assumptions:** Before executing any command, especially those involving file modifications or service restarts, validate that the state of the system matches the assumptions in the plan.\n2.  **Clarify Ambiguity:** If any step is unclear or lacks specific details (e.g., an exact port number, a configuration key), you MUST ask for clarification before proceeding.\n3.  **Report Progress Incrementally:** After completing each major task within a phase, provide a brief status update.\n\n**II. HOW TO USE THIS TASK PLAN (COMMANDS & PROTOCOL)**\n1.  **COMMANDS:**\n    *   **TO VIEW DETAILS:** `python3 todo_manager.py show 2024_remediation_plan`\n    *   **TO MARK AS DONE:** `python3 todo_manager.py done 2024_remediation_plan <step_number>` (e.g., `... done 2024_remediation_plan 0` for this phase)\n\n**Concluding Step: Update Plan Status**\nTo officially conclude this setup phase and acknowledge understanding of the protocol, execute the following commands.\n*   **Review Plan Details:** `python3 todo_manager.py show 2024_remediation_plan`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 2024_remediation_plan 0`\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating manual for the entire plan. Do not skip it. Successful execution of subsequent phases depends on adhering to the protocols defined here.",
        "done": true
      },
      {
        "text": "PHASE 1: P0 BLOCKERS\n\n**Explanations:**\nThis phase addresses critical system blockers that cause major service failures. The highest priority is to restore core functionality related to Text-to-Speech (TTS), Speech Recognition (SSR), and the emotion processing pipeline.\n\n**Technical Artifacts / Tasks:**\n**Task 1: Standardize TTS service name to \"StreamingTTSAgent\"**\n*   **Root Cause:** The service registry is case-sensitive. The service registered as \"StreamingTtsAgent\" while consumers looked for both \"StreamingTtsAgent\" and \"StreamingTTSAgent\". This was missed due to a lack of central constants for service names and missing tests for uniform naming.\n*   **Blast Radius:** Intermittent TTS failures in the Responder and StreamingInterruptHandler, leading to a degraded user experience.\n*   **Approach:** Change registration in `main_pc_code/agents/streaming_tts_agent.py` and all lookups to the exact name \"StreamingTTSAgent\". Introduce a `ServiceNames` constants module and replace all literal strings. Add a post-register self-check where the agent retrieves its own key from the registry.\n*   **Verification:** A unit test for registry round-trip passes. A `grep` command confirms no instances of \"StreamingTtsAgent\" remain. An end-to-end test with the Responder successfully synthesizes speech.\n\n**Task 2: Migrate SSR to ModelOpsCoordinator (remove RequestCoordinator)**\n*   **Root Cause:** The StreamingSpeechRecognition (SSR) agent still discovers and connects to the \"RequestCoordinator\" via ZMQ REQ, which has been decommissioned and replaced by the ModelOpsCoordinator (MOC) using gRPC/REST. This was missed due to a partial migration with no feature-flag fallback and no test to block references to the old coordinator.\n*   **Blast Radius:** Routing fails, causing back-pressure on the audio pipeline and degraded latency/availability for speech recognition.\n*   **Approach:** Replace the \"RequestCoordinator\" discovery logic with a client for the MOC (using gRPC on port 7212 or REST on port 8008). Remove the old ZMQ REQ code path. Implement retry/backoff logic and health checks against the MOC.\n*   **Verification:** Unit/integration tests pass with a mocked MOC. A `grep` command confirms no \"RequestCoordinator\" references exist in the codebase.\n\n**Task 3: Converge emotion pipeline to APC and restore compatibility**\n*   **Root Cause:** Legacy consumers expect a single-frame JSON from the PUB/SUB system, while the new Affective Processing Center (APC) publishes a multipart message `[topic, JSON]` with a different schema. This was missed because there were no contract/integration tests for the PUB/SUB message framing.\n*   **Blast Radius:** Affects `MoodTrackerAgent` and `EmpathyAgent`, leading to dropped frames or mis-parsed payloads, resulting in an inconsistent emotional state representation in the system.\n*   **Approach:** Update legacy consumers (`MoodTrackerAgent`, `EmpathyAgent`) to handle ZMQ SUB multipart messages. They should subscribe to the APC topic (e.g., \"affect\") and parse the JSON from the second frame using the `EmotionalContext` schema fields. Optionally, add an APC compatibility façade that republishes messages in the old `EmotionEngine`-style format during the transition.\n*   **Verification:** An integration test confirms that when APC publishes an `EmotionalContext` message, both agents correctly update their state. Schema tests for `EmotionalContext` are added. A `grep` command shows no \"emotional_state_update\" checks remain in the consumers.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed and verified, update the plan status.\n*   **Review Plan Details:** `python3 todo_manager.py show 2024_remediation_plan`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 2024_remediation_plan 1`\n\n──────────────────────────────────\nIMPORTANT NOTE: These tasks are interdependent and address the most critical failures. Verify each fix with its end-to-end test before proceeding to the next task in this phase.",
        "done": true
      },
      {
        "text": "PHASE 2: P1 HIGH PRIORITY\n\n**Explanations:**\nThis phase tackles high-impact architectural issues related to cross-host communication and observability, which can lead to unreliable behavior and conflicting system actions.\n\n**Technical Artifacts / Tasks:**\n**Task 1: Rewire PC2 RemoteConnectorAgent to MOC**\n*   **Root Cause:** The `RemoteConnectorAgent` on PC2 uses the legacy MMA protocol (REQ/REP for \"check_model\" on ports 5555/5556), while the new ModelOpsCoordinator (MOC) uses a different contract on different ports. This was missed due to a lag in the PC2 migration and the absence of a compatibility shim.\n*   **Blast Radius:** Model availability and GPU placement decisions are unreliable, leading to potential task failures and suboptimal resource utilization.\n*   **Approach:** Implement a MOC REST/gRPC client in the `RemoteConnectorAgent` for model status checks. Remove the legacy \"check_model\" REQ/REP logic and the subscription to the old status PUB. If necessary, create a temporary shim that maps \"check_model\" calls to the new MOC API during the transition.\n*   **Verification:** Unit tests with a stubbed MOC pass. A `grep` command shows no legacy MMA semantics remain. A smoke test on PC2 validates that model availability is correctly reported via the MOC.\n\n**Task 2: Centralize on UOC; retire ObservabilityHub; retarget dashboard**\n*   **Root Cause:** Both the legacy `ObservabilityHub` and the new `UnifiedObservabilityCenter` (UOC) are active. The main dashboard still proxies the legacy hub's `/metrics` endpoint. This was missed due to a phased migration that lacked a clear convergence gate.\n*   **Blast Radius:** Metrics are split, and alerts can be conflicting. Self-healing and health monitoring systems may take duplicate or conflicting actions.\n*   **Approach:** Point the `services/obs_dashboard_api` to the UOC's `/metrics` endpoint, providing the required auth token via an environment variable. Disable the `ObservabilityHub` in `main_pc_code/config/startup_config.yaml`. Modify the `PredictiveHealthMonitor` to read analytics from the UOC instead of recomputing them, or disable its overlapping logic.\n*   **Verification:** The dashboard successfully proxies metrics from the UOC. The startup configuration confirms `ObservabilityHub` is disabled. Duplication in the `PredictiveHealthMonitor` is removed, and alerts are consistent.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed and verified, update the plan status.\n*   **Review Plan Details:** `python3 todo_manager.py show 2024_remediation_plan`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 2024_remediation_plan 2`\n\n──────────────────────────────────\nIMPORTANT NOTE: Changes in this phase affect core system observability and resource management. Monitor system health and alert dashboards closely after each change is deployed.",
        "done": true
      },
      {
        "text": "PHASE 3: P2 STABILITY & CLEANUP\n\n**Explanations:**\nThis phase focuses on improving system stability by removing deprecated components, resolving functional overlaps, and cleaning up legacy code paths.\n\n**Technical Artifacts / Tasks:**\n**Task 1: Make RTAP authoritative; gate/disable legacy streaming_* agents**\n*   **Context:** The `RealTimeAudioPipeline` (RTAP) is active, but legacy streaming agents are still present, creating a risk of duplicate audio streams and port contention.\n*   **Approach:** Implement a feature flag to disable the legacy audio capture, preprocessing, and STT agents when RTAP is active. Remove any conflicting service bindings and port usage.\n*   **Verification:** System monitoring shows no port contention. End-to-end audio flow is verified to pass exclusively through RTAP. The startup configuration no longer launches the legacy agents.\n\n**Task 2: Remove deprecated VRAMOptimizerAgent usage**\n*   **Context:** References to the deprecated `VRAMOptimizerAgent` were not found in the current branch but should be verified in deployment branches.\n*   **Approach:** Perform a repo-wide verification for any `optimize_vram` calls or imports. Delete any dead code paths. If the functionality is still required in specific deployment branches, add a forwarder to the `ModelOpsCoordinator`'s `OptimizeVRAM` function.\n*   **Verification:** A CI pre-check is added that fails on any new references to the deprecated agent. All related tests are updated or removed.\n\n**Task 3: Harmonize ResourceManager with MOC**\n*   **Context:** The `ResourceManager` on PC2 has decision-making logic that overlaps with the `ModelOpsCoordinator`'s responsibility for GPU scheduling.\n*   **Approach:** Delegate all GPU scheduling decisions to the MOC. Limit the `ResourceManager`'s role to telemetry and health gating. Document the new API boundaries between the two components.\n*   **Verification:** Unit tests confirm that the `ResourceManager` correctly delegates to the MOC. A `grep` command shows no standalone GPU reconciliation logic remains outside of telemetry.\n\n**Task 4: Minor legacy cleanup**\n*   **Context:** Several minor legacy issues remain, including incorrect metrics paths, duplicate log rotation, and dead code from disabled features.\n*   **Approach:** Update the `PredictiveHealthMonitor`'s metrics path from `/metrics` to `/prometheus` or the correct UOC endpoint. Prune the `UnifiedUtilsAgent`'s log rotation logic if a side-car container is already handling it. Remove fallback import statements related to the disabled `SessionMemoryAgent`.\n*   **Verification:** Linting and `grep` checks are clean. The metrics scraping job passes. No fallback import warnings appear in the logs.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed and verified, update the plan status.\n*   **Review Plan Details:** `python3 todo_manager.py show 2024_remediation_plan`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 2024_remediation_plan 3`\n\n──────────────────────────────────\nIMPORTANT NOTE: The cleanup tasks in this phase are crucial for reducing technical debt and simplifying future development. Verify that no regressions are introduced after removing legacy code.",
        "done": false
      },
      {
        "text": "PHASE 4: CROSS-CUTTING SAFEGUARDS\n\n**Explanations:**\nThis final phase implements permanent, automated safeguards in the CI/CD pipeline to prevent the recurrence of the issues fixed in previous phases. This is a proactive measure to ensure long-term system health.\n\n**Technical Artifacts / Tasks:**\n**Task 1: Implement Contract Tests**\n*   **Approach:** Add contract tests to the CI pipeline that validate PUB/SUB message framing and the `EmotionalContext` schema between the APC and its consumers. The build should fail if the contract is broken.\n\n**Task 2: Implement Discovery Constants**\n*   **Approach:** Create a single source of truth (e.g., a constants module) for all service names. Refactor the codebase to use these constants instead of string literals. Add a static check to the CI pipeline to enforce this rule.\n\n**Task 3: Implement Migration Gates**\n*   **Approach:** Add a CI check that fails the build if any code references deprecated components like the `RequestCoordinator`, legacy MMA semantics, or incorrect service registry keys.\n\n**Concluding Step: Update Plan Status**\nAfter all technical tasks in this phase are successfully completed and verified, update the plan status.\n*   **Review Plan Details:** `python3 todo_manager.py show 2024_remediation_plan`\n*   **Mark This Phase as Complete:** `python3 todo_manager.py done 2024_remediation_plan 4`\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase does not fix existing bugs but prevents future ones. Its successful completion is measured by the successful integration of these new checks into the main development branch.",
        "done": false
      }
    ],
    "status": "in_progress",
    "created": "2024-05-24T12:00:00Z",
    "updated": "2025-08-09T22:55:45.022211+08:00"
  }
]