[
  {
    "id": "docker_arch_blueprint_dual_machine_4090_3060_actionable_20250817",
    "description": "Actionable plan compiled from FINAL Docker Architecture Blueprint (Dual-Machine 4090 + 3060) (memory-bank/plan/organize.md).",
    "status": "in_progress",
    "created": "2025-08-17T12:00:00+08:00",
    "updated": "2025-08-17T12:00:00+08:00",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:** This plan operationalizes the approved Docker Architecture Blueprint into actionable phases with reproducible builds, GPU/CPU separation, and CI/CD hardening.\n\n**Command Preview:**\n```bash\npython3 plan_next.py\npython3 plain_hier.py <task_id ReplaceAll>\n```\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> 0\n```\nIMPORTANT NOTE:\n- Work only from the frozen organizer; no silent version/toolchain changes.\n- No direct writes to queue/state files by the agent; JSON is provided for the operator to place.\n- GPU baseline: CUDA 12.1; Torch 2.2.2+cu121; TORCH_CUDA_ARCH_LIST=\"89;86\".\n- All images are non-root with tini (PID 1); Python 3.11 primary; legacy 3.10 only where specified.\n- Tagging: ghcr.io/<org>/<family>:YYYYMMDD-<git_sha>; registry cache enabled; Trivy fails on HIGH/CRITICAL.\n- Every HTTP service exposes /health → JSON {status:\"ok\"} with HTTP 200.",
        "done": false
      },
      {
        "text": "PHASE 1: Build & push functional-family base images\n\n**Explanations:** Create and push the canonical image families to GHCR with pinned, reproducible layers and multi-stage builds.\n\n**Command Preview:**\n```bash\nexport DATE=$(date +%Y%m%d) && export GIT_SHA=$(git rev-parse --short HEAD)\n# CPU families\ndocker buildx build --push --platform linux/amd64 \\\n  -t ghcr.io/<org>/base-python:${DATE}-${GIT_SHA} -f dockerfiles/base-python.Dockerfile .\ndocker buildx build --push --platform linux/amd64 \\\n  -t ghcr.io/<org>/family-web:${DATE}-${GIT_SHA} -f dockerfiles/family-web.Dockerfile .\n# GPU families (CUDA 12.1)\ndocker buildx build --push --platform linux/amd64 \\\n  --build-arg TORCH_CUDA_ARCH_LIST=\"89;86\" \\\n  -t ghcr.io/<org>/family-torch-cu121:${DATE}-${GIT_SHA} -f dockerfiles/family-torch-cu121.Dockerfile .\ndocker buildx build --push --platform linux/amd64 \\\n  -t ghcr.io/<org>/family-vision-cu121:${DATE}-${GIT_SHA} -f dockerfiles/family-vision-cu121.Dockerfile .\ndocker buildx build --push --platform linux/amd64 \\\n  -t ghcr.io/<org>/family-llm-cu121:${DATE}-${GIT_SHA} -f dockerfiles/family-llm-cu121.Dockerfile .\n# Legacy\ndocker buildx build --push --platform linux/amd64 \\\n  -t ghcr.io/<org>/legacy-py310-cpu:${DATE}-${GIT_SHA} -f dockerfiles/legacy-py310-cpu.Dockerfile .\n```\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> 1\n```\nIMPORTANT NOTE:\n- Use multi-stage (builder/runtime), Debian slim, tini, non-root UID:GID 10001:10001.\n- pip with --require-hashes; apt minimal and cleaned; wheel cache mount.\n- Tag scheme and GHCR are mandatory; builds must be reproducible.",
        "done": false
      },
      {
        "text": "PHASE 2: Dependency audit for Audio/Vision GPU stacks\n\n**Explanations:** Enumerate required system libs (e.g., ffmpeg, libpulse) and add only to GPU families that need them.\n\n**Command Preview:**\n```bash\n# Static enumerate Python wheels\npip install pip-audit && pip-audit --strict\n# Shared object dependency inspection\npython - <<'PY'\nimport importlib, sys\nmods = [\"torch\",\"torchaudio\",\"opencv\",\"onnxruntime\",\"sounddevice\",\"pyaudio\"]\nfor m in mods:\n    try:\n        mod = importlib.import_module(m)\n        print(m, getattr(mod, \"__file__\", \"n/a\"))\n    except Exception as e:\n        print(\"ERR\", m, e, file=sys.stderr)\nPY\n# ldd examples (adjust paths from the printout)\nldd /usr/local/lib/python3.11/site-packages/torchaudio/lib/*.so | sort -u\nldd /usr/local/lib/python3.11/site-packages/cv2/*.so | sort -u\n```\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> 2\n```\nIMPORTANT NOTE:\n- Add system libs only to family-torch-cu121 or family-vision-cu121 if required; CPU images stay minimal.\n- Keep pinned versions; preserve image size targets (CPU ≈100 MB, GPU ≈3 GB).",
        "done": false
      },
      {
        "text": "PHASE 3: CI pipeline — build matrix, cache, Trivy, SBOM\n\n**Explanations:** Extend GitHub Actions to build families across machines, use registry cache, and enforce security gates.\n\n**Command Preview:**\n```yaml\nname: docker-families\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        family: [base-python, family-web, family-torch-cu121, family-vision-cu121, family-llm-cu121, legacy-py310-cpu]\n    steps:\n      - uses: actions/checkout@v4\n      - uses: docker/setup-buildx-action@v3\n      - run: echo \"DATE=$(date +%Y%m%d)\" >> $GITHUB_ENV\n      - run: echo \"GIT_SHA=${GITHUB_SHA::7}\" >> $GITHUB_ENV\n      - run: |\n          docker buildx build --push \\\n            --cache-to=type=registry,ref=ghcr.io/<org>/cache,mode=max \\\n            --cache-from=type=registry,ref=ghcr.io/<org>/cache \\\n            -t ghcr.io/<org>/${{ matrix.family }}:${DATE}-${GIT_SHA} \\\n            -f dockerfiles/${{ matrix.family }}.Dockerfile .\n      - uses: aquasecurity/trivy-action@0.20.0\n        with:\n          image-ref: ghcr.io/<org>/${{ matrix.family }}:${{ env.DATE }}-${{ env.GIT_SHA }}\n          ignore-unfixed: true\n          severity: HIGH,CRITICAL\n          exit-code: '1'\n      - run: syft ghcr.io/<org>/${{ matrix.family }}:${DATE}-${GIT_SHA} -o spdx-json > sbom-${{ matrix.family }}.json\n      - uses: actions/upload-artifact@v4\n        with: { name: sboms, path: sbom-*.json }\n```\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> 3\n```\nIMPORTANT NOTE:\n- Use --cache-to/from type=registry; Trivy must fail build on HIGH/CRITICAL.\n- SBOMs are generated and uploaded; tags must match YYYYMMDD-<git_sha>.",
        "done": false
      },
      {
        "text": "PHASE 4: Service migration — Core Infra (Phase 1)\n\n**Explanations:** Repoint core infra services (e.g., ServiceRegistry, SystemDigitalTwin, UnifiedSystemAgent, UnifiedObservabilityCenter, CentralErrorBus) to new images.\n\n**Command Preview:**\n```yaml\nservices:\n  service_registry:\n    image: ghcr.io/<org>/family-web:${DATE}-${GIT_SHA}\n    ports: [\"7200:7200\",\"8200:8200\"]\n    healthcheck: { test: [\"CMD\",\"curl\",\"-sf\",\"http://localhost:8200/health\"], interval: \"10s\", timeout: \"2s\", retries: 5 }\n    user: \"10001:10001\"\n```\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> 4\n```\nIMPORTANT NOTE:\n- Ensure /health endpoints return 200 with {status:\"ok\"}.\n- Enforce non-root runtime; supervisors pull newly tagged images.",
        "done": false
      },
      {
        "text": "PHASE 5: Service migration — GPU services on MainPC (Phase 2)\n\n**Explanations:** Roll out GPU services (e.g., ModelOpsCoordinator, AffectiveProcessingCenter, RealTimeAudioPipeline, TinyLlamaServiceEnhanced) on the 4090 machine.\n\n**Command Preview:**\n```yaml\nservices:\n  model_ops_coordinator:\n    image: ghcr.io/<org>/family-llm-cu121:${DATE}-${GIT_SHA}\n    environment:\n      - TORCH_CUDA_ARCH_LIST=89\n      - GPU_VISIBLE_DEVICES=0\n    deploy: { resources: { reservations: { devices: [{ capabilities: [\"gpu\"] }] } } }\n    healthcheck: { test: [\"CMD\",\"curl\",\"-sf\",\"http://localhost:8212/health\"], interval: \"10s\", timeout: \"2s\", retries: 5 }\n```\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> 5\n```\nIMPORTANT NOTE:\n- Use CUDA 12.1 images; set MACHINE=mainpc if baked; arch list 89.\n- Verify NVIDIA driver ≥ 535 (Risk R1) prior to rollout.",
        "done": false
      },
      {
        "text": "PHASE 6: Service migration — CPU services on PC2 (Phase 3)\n\n**Explanations:** Roll out CPU services on the 3060 machine (e.g., TieredResponder, AsyncProcessor, CacheManager, etc.).\n\n**Command Preview:**\n```yaml\nservices:\n  tiered_responder:\n    image: ghcr.io/<org>/base-cpu-pydeps:${DATE}-${GIT_SHA}\n    user: \"10001:10001\"\n    healthcheck: { test: [\"CMD\",\"curl\",\"-sf\",\"http://localhost:8100/health\"], interval: \"10s\", timeout: \"2s\", retries: 5 }\n```\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> 6\n```\nIMPORTANT NOTE:\n- Keep images trimmed and pinned; do not introduce GPU-only deps to CPU families.\n- Respect port mappings from §F of the organizer.",
        "done": false
      },
      {
        "text": "PHASE 7: Observability integration — SBOM + Git SHA emission at startup\n\n**Explanations:** Each service emits image SBOM and Git SHA to UnifiedObservabilityCenter on startup.\n\n**Command Preview:**\n```bash\n#!/usr/bin/env bash\nset -euo pipefail\nSBOM=$(syft packages dir:/ -o spdx-json | gzip -c | base64 -w0)\ncurl -sS -X POST http://observability:9007/ingest/image \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"service\\\":\\\"$SERVICE_NAME\\\",\\\"image\\\":\\\"$IMAGE_REF\\\",\\\"git_sha\\\":\\\"$GIT_SHA\\\",\\\"sbom\\\":\\\"$SBOM\\\"}\"\nexec /usr/bin/tini -- \"$@\"\n```\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> 7\n```\nIMPORTANT NOTE:\n- SBOM format: SPDX JSON; compress+base64 if needed for transport.\n- Endpoint must be resilient; failures should not prevent service start.",
        "done": false
      },
      {
        "text": "PHASE 8: Rollback procedure — -prev tags and pinning\n\n**Explanations:** Maintain previous images with -prev tag and allow forced pinning via FORCE_IMAGE_TAG.\n\n**Command Preview:**\n```bash\n# Tag previous image and roll back\ndocker pull ghcr.io/<org>/family-llm-cu121:${DATE}-${GIT_SHA_PREV}\ndocker tag ghcr.io/<org>/family-llm-cu121:${DATE}-${GIT_SHA_PREV} ghcr.io/<org>/family-llm-cu121:${DATE}-${GIT_SHA}-prev\ndocker push ghcr.io/<org>/family-llm-cu121:${DATE}-${GIT_SHA}-prev\n# Supervisor pin\nexport FORCE_IMAGE_TAG=${DATE}-${GIT_SHA}-prev\n```\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> 8\n```\nIMPORTANT NOTE:\n- Use -prev tags to keep last-known-good; document the exact tag used.\n- If CI security gates block rollout (Trivy), coordinate temporary downgrade to WARN per R4 only if risk-accepted.",
        "done": false
      }
    ]
  }
]