[
  {
    "id": "post_environment_validation_and_testing",
    "description": "A comprehensive action plan for post-environment setup tasks, including Docker builds, comprehensive testing, code quality checks, and configuration validation.",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nThis initial step contains the user manual for this task plan. It outlines the commands to interact with the plan and the critical safety workflow that must be followed for all subsequent phases.\n\n**Technical Artifacts:**\n**I. CORE BEHAVIORAL MANDATES (FOR THE EXECUTING AI - READ FIRST)**\n1.  **Validate Assumptions:** Before starting, validate your assumptions about the task using the provided details.\n2.  **Clarify Ambiguity:** If information is ambiguous or missing, seek clarification before proceeding.\n3.  **Highlight Conflicts:** If you detect errors or conflicts in the data, highlight them immediately and suggest alternatives.\n4.  **Explain Rationale:** During execution, explain the rationale for each step taken.\n5.  **Review Before Submission:** Before submitting the final output, review the entire process to correct any errors or flawed assumptions.\n6.  **STOP ON ERROR (CRUCIAL):** If any command or step results in an error, **STOP IMMEDIATELY**. Do not proceed to the next step. Analyze the error, apply a fix, and re-run the failed step until it succeeds before continuing.\n\n**II. HOW TO USE THIS TASK PLAN (COMMANDS & PROTOCOL)**\n\n1.  **COMMANDS:**\n    *   **TO VIEW DETAILS:** `python3 todo_manager.py show post_environment_validation_and_testing`\n    *   **TO MARK AS DONE:** `python3 todo_manager.py done post_environment_validation_and_testing <step_number>`\n\n2.  **WORKFLOW & SAFETY PROTOCOL (CRUCIAL):**\n    *   **FOCUS ON CURRENT STEP:** In each Phase, always read and understand the `IMPORTANT NOTE` first.\n    *   **REVIEW-CONFIRM-PROCEED LOOP:** After completing a Phase, review your work and the next Phase. If your confidence score is below 90%, REPEAT the review.\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating manual for the entire plan. Understanding these protocols is mandatory before proceeding to Phase 1. **If you encounter any errors, do not proceed. Fix the issue before moving to the next step.** Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": true
      },
      {
        "text": "PHASE 1: Docker-Related Tasks (Priority: HIGH)\n\n**Explanations:**\nThis phase focuses on setting up and verifying the Docker environment. It includes starting the Docker daemon, testing previously skipped image builds, and running containers to confirm they are operational.\n\n**Technical Artifacts / Tasks:**\n**1. Start Docker and Configure Permissions:**\n```bash\nsudo systemctl start docker\nsudo usermod -aG docker $USER\n```\n\n**2. Test Skipped Docker Builds:**\n```bash\ndocker build -t obs_dashboard_api:dev services/obs_dashboard_api/\ndocker build -t self_healing_supervisor:dev services/self_healing_supervisor/\n```\n\n**3. Run and Verify Test Containers:**\n```bash\ndocker run -d --name obs_dashboard_api_test -p 8001:8001 obs_dashboard_api:dev\ndocker run -d --name self_healing_test -v /var/run/docker.sock:/var/run/docker.sock self_healing_supervisor:dev\n```\n\n**4. Verify Container Health and Logs:**\n```bash\ncurl http://localhost:8001/health\ndocker logs obs_dashboard_api_test\ndocker logs self_healing_test\n```\n\n──────────────────────────────────\nIMPORTANT NOTE: The `usermod` command requires you to log out and log back in for the group changes to take effect. The `self_healing_test` container requires access to `/var/run/docker.sock`. **If you encounter any errors, do not proceed. Fix the issue before moving to the next step.** Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      },
      {
        "text": "PHASE 2: Configuration Validation (Priority: HIGH)\n\n**Explanations:**\nThis phase validates that all YAML configuration files are syntactically correct after previous modifications and tests the environment variable expansion mechanism.\n\n**Technical Artifacts / Tasks:**\n**1. Validate All YAML Configs:**\n```python\nimport yaml\nconfigs = [\n    'main_pc_code/config/startup_config.yaml',\n    'pc2_code/config/startup_config.yaml'\n]\nfor config_path in configs:\n    with open(config_path, 'r') as f:\n        yaml.safe_load(f)\n    print(f'✅ {config_path} is valid YAML')\n```\n\n**2. Test PORT_OFFSET Variable Expansion:**\n```bash\nexport PORT_OFFSET=7000\npython3 -c \"\nimport os\nprint(f'PORT_OFFSET={os.getenv(\\\"PORT_OFFSET\\\")}')\n# Test that your system properly expands \\${PORT_OFFSET}+7108 to 14108\n\"\n```\n\n──────────────────────────────────\nIMPORTANT NOTE: A failure in this phase indicates a critical error in the startup configurations. It must be resolved before any services can be expected to run correctly. **If you encounter any errors, do not proceed. Fix the issue before moving to the next step.** Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      },
      {
        "text": "PHASE 3: Comprehensive Testing (Priority: HIGH)\n\n**Explanations:**\nThis phase performs in-depth testing at the code level. It involves installing all necessary dependencies, running full import tests, validating configuration loading within the agents, and executing the full pytest suite.\n\n**Technical Artifacts / Tasks:**\n**1. Install Missing Dependencies:**\n```bash\npip install fastapi uvicorn aiohttp docker pyyaml pydantic psutil prometheus-client python-dotenv requests\n```\n\n**2. Run Full Import Tests:**\n```bash\npython3 -c \"from services.obs_dashboard_api.server import app; print('✅ ObservabilityDashboardAPI imports successfully')\"\npython3 -c \"import services.self_healing_supervisor.supervisor; print('✅ SelfHealingSupervisor imports successfully')\"\npython3 -c \"from pc2_code.agents.TutoringServiceAgent import TutoringServiceAgent; print('✅ TutoringServiceAgent imports successfully')\"\n```\n\n**3. Test Configuration Loading:**\n```python\nfrom pc2_code.agents.TutoringServiceAgent import TutoringServiceAgent\nagent = TutoringServiceAgent()\nprint(f'TutoringServiceAgent configured: {agent.host}:{agent.port}')\nassert agent.port != 5604, 'Port should not be default 5604'\nprint('✅ Configuration loading works correctly')\n```\n\n**4. Run Pytest Suite:**\n```bash\npytest tests/test_obs_dashboard_api_import.py -v\npytest tests/test_self_healer_import.py -v\npytest tests/test_tutoring_service_import.py -v\n```\n\n──────────────────────────────────\nIMPORTANT NOTE: These tests verify that the Python code is functional and correctly configured. A failure here points to issues in the code or its dependencies. **If you encounter any errors, do not proceed. Fix the issue before moving to the next step.** Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      },
      {
        "text": "PHASE 4: Integration Testing (Priority: HIGH)\n\n**Explanations:**\nThis phase tests how the different services work together. It involves starting services in the correct dependency order and testing their API endpoints to ensure they are communicating correctly.\n\n**Technical Artifacts / Tasks:**\n**1. Test Services Together (Conceptual):**\nStart ObservabilityHub first, then TutoringServiceAgent, then SelfHealingSupervisor. Verify they can communicate (check logs for connection messages).\n\n**2. Test Health Endpoints:**\n```bash\ncurl http://localhost:8108/health  # TutoringServiceAgent health\ncurl http://localhost:8001/health  # ObservabilityDashboardAPI health\ncurl http://localhost:9008/health  # SelfHealingSupervisor health (if accessible)\n```\n\n**3. Test Metrics Proxy Endpoint:**\n```bash\ncurl http://localhost:8001/metrics/raw\n```\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase requires services to be running. Failures here often indicate networking issues, incorrect dependencies in the config files, or port conflicts. **If you encounter any errors, do not proceed. Fix the issue before moving to the next step.** Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      },
      {
        "text": "PHASE 5: Code Quality & Formatting (Priority: MEDIUM)\n\n**Explanations:**\nThis phase ensures the new and modified code adheres to project formatting standards using `black` and `isort`.\n\n**Technical Artifacts / Tasks:**\n**1. Install Formatters:**\n```bash\npip install black isort\n```\n\n**2. Format New Services and Modified Agent:**\n```bash\nblack services/obs_dashboard_api/ --line-length 88\nisort services/obs_dashboard_api/ --profile black\nblack services/self_healing_supervisor/ --line-length 88\nisort services/self_healing_supervisor/ --profile black\nblack pc2_code/agents/TutoringServiceAgent.py --line-length 88\nisort pc2_code/agents/TutoringServiceAgent.py --profile black\n```\n\n──────────────────────────────────\nIMPORTANT NOTE: This is a non-critical but important step for maintaining code consistency. Run this after all functional tests have passed. **If you encounter any errors, do not proceed. Fix the issue before moving to the next step.** Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      },
      {
        "text": "PHASE 6: React Frontend Tasks (Priority: MEDIUM)\n\n**Explanations:**\nThis phase addresses the front-end dashboard. It involves fixing security vulnerabilities, verifying the build process, and outlining the next steps for UI development.\n\n**Technical Artifacts / Tasks:**\n**1. Navigate to Dashboard and Fix Issues:**\n```bash\ncd dashboard\nnpm audit fix\nnpm run build\nnpm start\n```\n\n**2. Next Steps (Manual Task):**\n- Add API integration to connect to the FastAPI backend.\n- Create charts/graphs for metrics visualization.\n- Add error handling and loading states.\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase requires a Node.js environment. The `npm audit fix` command will attempt to resolve reported vulnerabilities. `npm start` will launch a development server. **If you encounter any errors, do not proceed. Fix the issue before moving to the next step.** Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      },
      {
        "text": "PHASE 7: Final Monitoring & Validation (Priority: MEDIUM)\n\n**Explanations:**\nThis final phase is a checklist to ensure no issues were missed, such as port conflicts or resource problems, and to summarize the system's state.\n\n**Technical Artifacts / Tasks:**\n**1. Check for Port Conflicts:**\n```bash\nnetstat -tulpn | grep -E \"(7108|8001|7009|8108|9007|9008)\"\n```\n\n**2. Monitor System Resources (Manual Task):**\nUse tools like `htop` or `docker stats` to monitor resource usage.\n\n**3. Final Deployment Checklist Review (Manual Task):**\n- ✅ Dependencies installed\n- ✅ Docker daemon running\n- ✅ Docker images built\n- ✅ Services import correctly\n- ✅ Configs validate\n- ✅ TutoringServiceAgent port correct\n- ✅ Health endpoints respond\n- ✅ React app builds\n- ✅ No port conflicts\n- ✅ Code formatted\n\n──────────────────────────────────\nIMPORTANT NOTE: This is the final sign-off phase. Address any remaining issues from the checklist, especially the \"Known Issues\" like Docker permissions and Node.js vulnerabilities. **If you encounter any errors, do not proceed. Fix the issue before moving to the next step.** Do not proceed until the current step is complete. Before moving forward, review the completed step and the next one. Repeat the review if your confidence score is below 90%.",
        "done": false
      }
    ],
    "status": "in_progress",
    "created": "2024-05-24T12:30:00Z",
    "updated": "2025-08-07T10:12:11.761041+08:00"
  }
]