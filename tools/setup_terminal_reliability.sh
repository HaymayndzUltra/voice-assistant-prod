#!/bin/bash
set -e

echo "üîß Setting up Terminal Session Reliability"
echo "=========================================="

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo "üìÇ Project root: $PROJECT_ROOT"
echo "üõ†Ô∏è Tools directory: $SCRIPT_DIR"

# 1. Make scripts executable
echo ""
echo "1Ô∏è‚É£ Making scripts executable..."
chmod +x "$SCRIPT_DIR/terminal_health_monitor.py"
chmod +x "$SCRIPT_DIR/safe_terminal_ops.py"
echo "‚úÖ Scripts are now executable"

# 2. Test Python dependencies
echo ""
echo "2Ô∏è‚É£ Checking Python dependencies..."
python3 -c "import psutil" 2>/dev/null || {
    echo "‚ö†Ô∏è  psutil not found, installing..."
    pip3 install psutil || {
        echo "‚ùå Failed to install psutil. Please install manually: pip3 install psutil"
        exit 1
    }
}
echo "‚úÖ Python dependencies OK"

# 3. Test basic functionality
echo ""
echo "3Ô∏è‚É£ Testing terminal health monitor..."
if python3 "$SCRIPT_DIR/terminal_health_monitor.py" --check; then
    echo "‚úÖ Terminal health monitor working"
else
    echo "‚ùå Terminal health monitor failed"
fi

# 4. Create aliases in bashrc if not exists
echo ""
echo "4Ô∏è‚É£ Setting up bash aliases..."
BASHRC="$HOME/.bashrc"
ALIAS_BLOCK="
# Terminal Session Reliability - Auto-generated
export TERM_HEALTH_CHECK=1
export PYTHONUNBUFFERED=1
export TIMEOUT_CMD_DEFAULT=30
export TIMEOUT_GIT=60
export TIMEOUT_PYTHON=300

alias health-check='python3 $SCRIPT_DIR/terminal_health_monitor.py --check'
alias health-cleanup='python3 $SCRIPT_DIR/terminal_health_monitor.py --cleanup'
alias safe-run='python3 $SCRIPT_DIR/safe_terminal_ops.py'
alias monitor-terminal='python3 $SCRIPT_DIR/terminal_health_monitor.py --monitor'

# Auto cleanup on shell exit
trap 'python3 $SCRIPT_DIR/terminal_health_monitor.py --cleanup 2>/dev/null || true' EXIT
"

if ! grep -q "Terminal Session Reliability" "$BASHRC" 2>/dev/null; then
    echo "$ALIAS_BLOCK" >> "$BASHRC"
    echo "‚úÖ Added aliases to $BASHRC"
else
    echo "‚ö†Ô∏è  Aliases already exist in $BASHRC"
fi

# 5. Create monitoring service script
echo ""
echo "5Ô∏è‚É£ Creating monitoring service..."
MONITOR_SCRIPT="$HOME/.local/bin/monitor-terminal.sh"
mkdir -p "$(dirname "$MONITOR_SCRIPT")"

cat > "$MONITOR_SCRIPT" << EOF
#!/bin/bash
# Terminal Session Monitoring Service
# Auto-generated by setup_terminal_reliability.sh

LOG_FILE="\$HOME/terminal-monitor.log"
HEALTH_SCRIPT="$SCRIPT_DIR/terminal_health_monitor.py"

echo "\$(date): Terminal monitoring started" >> "\$LOG_FILE"

while true; do
    if python3 "\$HEALTH_SCRIPT" --check >> "\$LOG_FILE" 2>&1; then
        echo "\$(date): Health check passed" >> "\$LOG_FILE"
    else
        echo "\$(date): Health check failed, running cleanup..." >> "\$LOG_FILE"
        python3 "\$HEALTH_SCRIPT" --cleanup >> "\$LOG_FILE" 2>&1
    fi
    sleep 300  # Check every 5 minutes
done
EOF

chmod +x "$MONITOR_SCRIPT"
echo "‚úÖ Created monitoring service at $MONITOR_SCRIPT"

# 6. Create WSL config recommendation
echo ""
echo "6Ô∏è‚É£ WSL2 Configuration recommendations..."
WSL_CONFIG_PATH="$HOME/.wslconfig"
if [ ! -f "$WSL_CONFIG_PATH" ]; then
    cat > "$WSL_CONFIG_PATH" << 'EOF'
[wsl2]
memory=4GB
processors=2
swap=1GB

# Performance settings
vmIdleTimeout=60000

# Network settings  
networkingMode=mirrored
EOF
    echo "‚úÖ Created WSL2 config at $WSL_CONFIG_PATH"
else
    echo "‚ö†Ô∏è  WSL2 config already exists at $WSL_CONFIG_PATH"
fi

# 7. Test the setup
echo ""
echo "7Ô∏è‚É£ Testing complete setup..."
echo "Testing health check alias..."
if bash -c "source $BASHRC && health-check" 2>/dev/null; then
    echo "‚úÖ Health check alias working"
else
    echo "‚ö†Ô∏è  Health check alias needs manual verification"
fi

# 8. Create quick recovery script
echo ""
echo "8Ô∏è‚É£ Creating emergency recovery script..."
RECOVERY_SCRIPT="$SCRIPT_DIR/emergency_recovery.sh"
cat > "$RECOVERY_SCRIPT" << EOF
#!/bin/bash
# Emergency Terminal Recovery Script
echo "üö® Emergency Terminal Recovery"
echo "=============================="

echo "1. Resetting terminal state..."
stty sane 2>/dev/null || true
reset 2>/dev/null || true
clear 2>/dev/null || true

echo "2. Killing hanging processes..."
pkill -f "python.*smoke_test" 2>/dev/null || true
pkill -f "python.*auto_import" 2>/dev/null || true
pkill -f "git" 2>/dev/null || true

echo "3. Cleaning up zombie processes..."
python3 "$SCRIPT_DIR/terminal_health_monitor.py" --cleanup 2>/dev/null || true

echo "4. Testing session health..."
if python3 "$SCRIPT_DIR/terminal_health_monitor.py" --check 2>/dev/null; then
    echo "‚úÖ Recovery successful"
    exit 0
else
    echo "‚ùå Recovery failed - manual intervention needed"
    echo "Try: wsl --shutdown && wsl"
    exit 1
fi
EOF
chmod +x "$RECOVERY_SCRIPT"
echo "‚úÖ Created emergency recovery script at $RECOVERY_SCRIPT"

# 9. Summary and next steps
echo ""
echo "üéâ Terminal Reliability Setup Complete!"
echo "======================================"
echo ""
echo "üìã What was installed:"
echo "  ‚Ä¢ Health monitoring tools"
echo "  ‚Ä¢ Safe operation wrappers"  
echo "  ‚Ä¢ Bash aliases and environment variables"
echo "  ‚Ä¢ Monitoring service script"
echo "  ‚Ä¢ Emergency recovery script"
echo ""
echo "üöÄ Next steps:"
echo "  1. Restart your terminal or run: source ~/.bashrc"
echo "  2. Test with: health-check"
echo "  3. For emergencies: $RECOVERY_SCRIPT"
echo "  4. Start monitoring: $MONITOR_SCRIPT &"
echo ""
echo "üìö Documentation: $SCRIPT_DIR/TERMINAL_SESSION_RELIABILITY_GUIDE.md"
echo ""
echo "üîß Available commands:"
echo "  health-check          - Check terminal health"
echo "  health-cleanup        - Clean up session"
echo "  safe-run \"command\"    - Run command safely"
echo "  monitor-terminal      - Start continuous monitoring"
echo ""
echo "‚ö†Ô∏è  For immediate effect, run: source ~/.bashrc" 