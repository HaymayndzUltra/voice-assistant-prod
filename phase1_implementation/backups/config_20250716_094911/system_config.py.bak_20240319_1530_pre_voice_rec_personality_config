import os
import json
import logging
from pathlib import Path
from typing import Dict, Any, Optional

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("SystemConfig")

# Base paths
ROOT_DIR = Path(__file__).parent.parent.absolute()
CONFIG_DIR = ROOT_DIR / "config"
MODELS_DIR = ROOT_DIR / "models"
LOGS_DIR = ROOT_DIR / "logs"

# Create directories if they don't exist
for directory in [CONFIG_DIR, MODELS_DIR, LOGS_DIR]:
    directory.mkdir(exist_ok=True)

# Default configuration
DEFAULT_CONFIG = {
    # Common System Wide Settings
    "common_settings": {
        "system": {
            "debug_mode": False,
            "log_level": "DEBUG",
            "language": "en",
            "multilingual": {
                "primary_language_code": "en",
                "secondary_languages": [
                    {"code": "tl", "display_name": "Tagalog"}
                ],
                "enable_automatic_language_detection": True,
                "language_detection_confidence_threshold": 0.75
            },
            "code_switching": {
                "enabled": True,
                "languages": ["en", "tl"],
                "detection": {
                    "confidence_threshold": 0.7,
                    "context_aware": True
                }
            },
        },
        "wake_word": {
            "enabled": True,
            "primary": "tha_lim",
            "alternatives": ["hey_jarvis", "alexa", "hey_mycroft"],
            "sensitivity": 0.5,
            "vad_enabled": True,
            "vad_threshold": 0.5,
        },
        "audio": {
            "device_index": 30,
            "sample_rate": 16000,
            "channels": 1,
            "noise_reduction": True,
            "streaming_audio": {
                "enabled": True,
                "chunk_size": 1024,
                "retry_count": 3,
                "retry_delay": 1.0,
                "health_check": {
                    "enabled": True,
                    "interval": 5.0,
                    "timeout": 2.0
                },
                "volume_thresholds": {
                    "silence": 100,
                    "speech": 500,
                    "max": 10000
                }
            }
        },
        "face_recognition_general": { 
            "enabled": True,
            "detection_frequency": 0.5,
            "min_face_size": 30,
            "recognition_threshold": 0.6,
            "advanced_features": {
                "enabled": True,
                "quantum_face_analysis": {
                    "enabled": True,
                    "capabilities": {
                        "multi_face_tracking": {
                            "enabled": True,
                            "features": [
                                "real_time_tracking",
                                "pose_estimation",
                                "expression_analysis",
                                "attention_monitoring"
                            ]
                        },
                        "emotion_recognition": {
                            "enabled": True,
                            "detection": [
                                "basic_emotions",
                                "complex_emotions",
                                "micro_expressions",
                                "emotional_intensity"
                            ],
                            "analysis": {
                                "temporal_patterns": True,
                                "context_awareness": True,
                                "interaction_impact": True
                            }
                        },
                        "behavioral_analysis": {
                            "enabled": True,
                            "features": [
                                "gaze_tracking",
                                "attention_span",
                                "engagement_level",
                                "interaction_patterns"
                            ]
                        },
                        "age_recognition": {
                            "enabled": True,
                            "capabilities": {
                                "age_estimation": {
                                    "enabled": True,
                                    "ranges": [
                                        "toddler_1_3",
                                        "preschool_4_6",
                                        "child_7_12",
                                        "teen_13_17",
                                        "adult_18_plus"
                                    ],
                                    "confidence_threshold": 0.85
                                },
                                "age_appropriate_interaction": {
                                    "enabled": True,
                                    "rules": {
                                        "toddler_1_3": {
                                            "language_level": "simple_words",
                                            "interaction_style": "playful_gentle",
                                            "content_filter": "strict",
                                            "response_length": "very_short",
                                            "voice_tone": "high_pitched_friendly"
                                        },
                                        "preschool_4_6": {
                                            "language_level": "basic_sentences",
                                            "interaction_style": "educational_playful",
                                            "content_filter": "strict",
                                            "response_length": "short",
                                            "voice_tone": "friendly_enthusiastic"
                                        },
                                        "child_7_12": {
                                            "language_level": "age_appropriate",
                                            "interaction_style": "educational_engaging",
                                            "content_filter": "moderate",
                                            "response_length": "medium",
                                            "voice_tone": "clear_encouraging"
                                        },
                                        "teen_13_17": {
                                            "language_level": "mature",
                                            "interaction_style": "respectful_engaging",
                                            "content_filter": "moderate",
                                            "response_length": "detailed",
                                            "voice_tone": "natural_engaging"
                                        },
                                        "adult_18_plus": {
                                            "language_level": "full",
                                            "interaction_style": "professional",
                                            "content_filter": "standard",
                                            "response_length": "flexible",
                                            "voice_tone": "natural_professional"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
        },
        "tts_general": { 
            "provider": "bark",
            "voice": "v2/en_speaker_6",
            "cache_enabled": True,
            "multilingual_voices": {
                "enabled": True,
                "voices": {
                    "en": {
                        "default": "v2/en_speaker_6",
                        "fallback": "v2/en_speaker_0"
                    },
                    "tl": {
                        "default_voice_id_or_name": "xtts_tagalog_female_01",
                        "accent_adaptation_level": 0.8,
                        "enable_natural_code_switching_tts": True
                    }
                },
                "code_switching": {
                    "enabled": True,
                    "rules": {
                        "detect_language": True,
                        "maintain_context": True,
                        "smooth_transition": True
                    }
                }
            }
        },
        "ollama_global_config": {
            "keep_alive_default": "5m", 
            "max_loaded_models": 2      
        },
        "zmq_ports_common": {
            "log_port": 5600,
            "executor_port": 5613,
            "autogen_framework_port": 5650,
        },
        "human_awareness": {
            "enabled": True,
            "capabilities": {
                "presence_detection": {
                    "enabled": True,
                    "features": [
                        "movement_detection",
                        "sound_localization",
                        "thermal_imaging",
                        "proximity_sensing"
                    ],
                    "analysis": {
                        "activity_recognition": True,
                        "interaction_patterns": True,
                        "presence_history": True
                    }
                },
                "environmental_perception": {
                    "enabled": True,
                    "sensors": {
                        "visual": {
                            "enabled": True,
                            "capabilities": [
                                "scene_analysis",
                                "object_recognition",
                                "spatial_mapping",
                                "light_conditions"
                            ]
                        },
                        "audio": {
                            "enabled": True,
                            "capabilities": [
                                "sound_classification",
                                "noise_level_monitoring",
                                "voice_detection",
                                "ambient_analysis"
                            ]
                        },
                        "spatial": {
                            "enabled": True,
                            "capabilities": [
                                "room_mapping",
                                "obstacle_detection",
                                "movement_prediction",
                                "interaction_zones"
                            ]
                        }
                    }
                },
                "interaction_optimization": {
                    "enabled": True,
                    "features": {
                        "context_awareness": {
                            "enabled": True,
                            "capabilities": [
                                "activity_recognition",
                                "mood_analysis",
                                "attention_tracking",
                                "interaction_history"
                            ]
                        },
                        "adaptive_behavior": {
                            "enabled": True,
                            "features": [
                                "proactive_assistance",
                                "intrusion_prevention",
                                "privacy_respect",
                                "comfort_optimization"
                            ]
                        },
                        "child_safety": {
                            "enabled": True,
                            "features": {
                                "content_filtering": {
                                    "enabled": True,
                                    "levels": {
                                        "strict": {
                                            "age_range": "1_12",
                                            "filter_rules": [
                                                "no_inappropriate_content",
                                                "no_complex_topics",
                                                "no_adult_themes",
                                                "no_personal_data"
                                            ]
                                        },
                                        "moderate": {
                                            "age_range": "13_17",
                                            "filter_rules": [
                                                "limited_adult_content",
                                                "educational_focus",
                                                "supervised_access"
                                            ]
                                        }
                                    }
                                },
                                "interaction_limits": {
                                    "enabled": True,
                                    "rules": {
                                        "time_limits": {
                                            "enabled": True,
                                            "max_daily_interaction": 120,  # minutes
                                            "break_reminders": True
                                        },
                                        "topic_restrictions": {
                                            "enabled": True,
                                            "restricted_topics": [
                                                "sensitive_personal_info",
                                                "inappropriate_content",
                                                "complex_adult_topics"
                                            ]
                                        },
                                        "parental_controls": {
                                            "enabled": True,
                                            "features": [
                                                "usage_monitoring",
                                                "content_approval",
                                                "time_management",
                                                "activity_reports"
                                            ]
                                        }
                                    }
                                },
                                "educational_focus": {
                                    "enabled": True,
                                    "features": {
                                        "age_appropriate_learning": {
                                            "enabled": True,
                                            "content_types": [
                                                "educational_games",
                                                "interactive_stories",
                                                "learning_activities",
                                                "skill_development"
                                            ]
                                        },
                                        "progress_tracking": {
                                            "enabled": True,
                                            "metrics": [
                                                "learning_achievements",
                                                "skill_development",
                                                "interaction_quality",
                                                "engagement_levels"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "personality_adaptation": {
                            "enabled": True,
                            "adaptive_personalities": {
                                "child_mode": {
                                    "enabled": True,
                                    "personality_traits": {
                                        "curiosity_level": "high",
                                        "playfulness": "very_high",
                                        "imagination": "very_high",
                                        "energy_level": "high",
                                        "attention_span": "short",
                                        "learning_style": "playful_exploration"
                                    },
                                    "interaction_style": {
                                        "language_patterns": [
                                            "simple_sentences",
                                            "repetitive_phrases",
                                            "excited_tones",
                                            "question_asking"
                                        ],
                                        "emotional_expression": [
                                            "excitement",
                                            "wonder",
                                            "playfulness",
                                            "gentle_guidance"
                                        ],
                                        "behavioral_patterns": [
                                            "imaginative_play",
                                            "storytelling",
                                            "educational_games",
                                            "gentle_teaching"
                                        ]
                                    },
                                    "role_playing": {
                                        "enabled": True,
                                        "roles": {
                                            "playmate": {
                                                "enabled": True,
                                                "characteristics": [
                                                    "friendly_peer",
                                                    "imaginative_companion",
                                                    "gentle_guide",
                                                    "learning_partner"
                                                ],
                                                "interaction_modes": [
                                                    "pretend_play",
                                                    "educational_games",
                                                    "story_adventures",
                                                    "discovery_learning"
                                                ]
                                            },
                                            "teacher_friend": {
                                                "enabled": True,
                                                "characteristics": [
                                                    "gentle_educator",
                                                    "patient_guide",
                                                    "encouraging_supporter",
                                                    "fun_mentor"
                                                ],
                                                "interaction_modes": [
                                                    "learning_through_play",
                                                    "guided_discovery",
                                                    "positive_reinforcement",
                                                    "skill_building"
                                                ]
                                            },
                                            "storyteller": {
                                                "enabled": True,
                                                "characteristics": [
                                                    "imaginative_narrator",
                                                    "interactive_storyteller",
                                                    "character_voice_actor",
                                                    "adventure_guide"
                                                ],
                                                "interaction_modes": [
                                                    "interactive_stories",
                                                    "character_play",
                                                    "adventure_quests",
                                                    "moral_lessons"
                                                ]
                                            }
                                        }
                                    }
                                },
                                "teen_mode": {
                                    "enabled": True,
                                    "personality_traits": {
                                        "independence": "high",
                                        "curiosity": "moderate",
                                        "social_awareness": "high",
                                        "emotional_depth": "developing",
                                        "learning_style": "interactive_discussion"
                                    },
                                    "interaction_style": {
                                        "language_patterns": [
                                            "casual_conversation",
                                            "thoughtful_discussion",
                                            "respectful_debate",
                                            "peer_like_interaction"
                                        ],
                                        "emotional_expression": [
                                            "understanding",
                                            "respect",
                                            "guidance",
                                            "support"
                                        ]
                                    }
                                },
                                "adult_mode": {
                                    "enabled": True,
                                    "personality_traits": {
                                        "professionalism": "high",
                                        "emotional_maturity": "high",
                                        "analytical_thinking": "high",
                                        "learning_style": "direct_instruction"
                                    },
                                    "interaction_style": {
                                        "language_patterns": [
                                            "clear_communication",
                                            "professional_discourse",
                                            "detailed_explanation",
                                            "efficient_interaction"
                                        ],
                                        "emotional_expression": [
                                            "professional",
                                            "respectful",
                                            "efficient",
                                            "helpful"
                                        ]
                                    }
                                }
                            },
                            "personality_transition": {
                                "enabled": True,
                                "transition_rules": {
                                    "smooth_transition": {
                                        "enabled": True,
                                        "features": [
                                            "gradual_personality_shift",
                                            "context_aware_adaptation",
                                            "natural_conversation_flow",
                                            "emotional_continuity"
                                        ]
                                    },
                                    "context_awareness": {
                                        "enabled": True,
                                        "triggers": [
                                            "age_detection",
                                            "conversation_context",
                                            "emotional_state",
                                            "interaction_history"
                                        ]
                                    }
                                }
                            },
                            "emotional_intelligence": {
                                "enabled": True,
                                "capabilities": {
                                    "empathy_adaptation": {
                                        "enabled": True,
                                        "features": [
                                            "emotional_mirroring",
                                            "mood_matching",
                                            "empathic_responses",
                                            "emotional_support"
                                        ]
                                    },
                                    "social_learning": {
                                        "enabled": True,
                                        "features": [
                                            "interaction_pattern_recognition",
                                            "social_cue_adaptation",
                                            "relationship_building",
                                            "trust_development"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
    },
    
    "zmq": {
        "code_generator_port": 5604,
        "executor_port": 5613,
        "model_manager_port": 5556,
        "autogen_framework_port": 5650,
        "log_port": 5600
    },
    

    
    "main_pc_settings": {
        "model_manager_port": 5556,
        "zmq_ports": {
            "orchestrator_port": 5555,
            "listener_port": 5561,
            "tts_port": 5562, 
            "face_recognition_port": 5560,
            "language_analyzer_port": 5570,
            "language_analyzer_health_port": 5597,
        },
        "whisper_model_config": {
            "model_path": "models/whisper/large-ct2",
            "use_gpu": True,
            "compute_type": "float16",
            # --- Dynamic STT Model Loading Configuration ---
            "dynamic_loading": {
                # List of available STT models with their properties
                "available_stt_models": [
                    {
                        "model_id": "whisper_tiny_en",
                        "display_name": "Whisper Tiny (English)",
                        "model_path_or_name": "tiny.en",
                        "estimated_vram_mb": 800,
                        "default_language_code": "en",
                        "is_multilingual": False,
                        "supported_use_cases": ["general_transcription", "low_resource"],
                        "relative_performance_tier": 1  # 1 = fastest, lowest accuracy
                    },
                    {
                        "model_id": "whisper_base_en",
                        "display_name": "Whisper Base (English)",
                        "model_path_or_name": "base.en",
                        "estimated_vram_mb": 1200,
                        "default_language_code": "en",
                        "is_multilingual": False,
                        "supported_use_cases": ["general_transcription", "command_mode_accurate"],
                        "relative_performance_tier": 2
                    },
                    {
                        "model_id": "whisper_large_v2",
                        "display_name": "Whisper Large v2 (Multilingual)",
                        "model_path_or_name": "large-v2",
                        "estimated_vram_mb": 4800,
                        "default_language_code": "en",
                        "is_multilingual": True,
                        "supported_use_cases": ["high_accuracy", "multilingual", "noisy_environment"],
                        "relative_performance_tier": 4  # 4 = slowest, highest accuracy
                    }
                ],

                # Smart selection logic for dynamic model switching
                "smart_selection_config": {
                    "default_model_id": "whisper_base_en",  # Used if no specific trigger
                    "enable_command_based_selection": True,
                    "command_matching_rules": [
                        {
                            "keywords": ["dictate", "transcribe", "note"],
                            "target_model_id": "whisper_large_v2",
                            "priority": 1  # Lower number = higher priority
                        },
                        {
                            "keywords": ["quick", "fast", "draft"],
                            "target_model_id": "whisper_tiny_en",
                            "priority": 2
                        }
                    ],
                    "enable_confidence_based_fallback": True,
                    "low_confidence_threshold": 0.70,  # If confidence < threshold, fallback
                    "confidence_fallback_tiers": [
                        "whisper_base_en", "whisper_tiny_en"
                    ],
                    "enable_context_aware_selection": True,
                    "context_rules": [
                        {
                            "context_condition": "noise_level > 0.8",
                            "target_model_id": "whisper_large_v2"
                        },
                        {
                            "context_condition": "user_profile == 'fast_mode'",
                            "target_model_id": "whisper_tiny_en"
                        }
                    ]
                },

                # Verification system for transcription quality
                "verification_system_config": {
                    "enable_transcription_verification": True,
                    "max_verification_attempts_with_fallback": 2  # Try fallback models if verification fails
                },

                # Continuous learning and feedback loop
                "continuous_learning_config": {
                    "enable_feedback_loop": True,
                    "feedback_reporting_method": "zmq_topic",  # Options: "zmq_topic", "task_memory_api"
                    "zmq_topic_for_feedback": "stt_feedback_topic",  # Only if using ZMQ
                    "log_low_confidence_phrases": True
                }
            }
        },
        "ollama_server_config": {
            "url": "http://localhost:11434", 
        },
        "deepseek_client_config": { 
            "url": "http://192.168.1.2:8003", 
            "enabled": True,
            "context_length": 16000,
        },
        "tts_config": { 
            "use_gpu": True, 
        },
        "face_recognition_config": {
            "use_gpu": True,
        },
        "language_analyzer_config": {
            "enabled": True,
            "use_gpu": True,
            "health_check_interval": 5,
            "port_range": [5570, 5579],
            "health_port": 5597,
            "tagabert_service_url": "tcp://localhost:6010",
            "multilingual_support": {
                "enabled": True,
                "languages": {
                    "en": {
                        "model": "english_base",
                        "confidence_threshold": 0.8
                    },
                    "tl": {
                        "model": "tagalog_base",
                        "confidence_threshold": 0.7,
                        "accent_handling": {
                            "enabled": True,
                            "detection": {
                                "threshold": 0.6,
                                "context_aware": True
                            },
                            "adaptation": {
                                "enabled": True,
                                "style": "natural",
                                "fallback_to_english": True
                            }
                        }
                    }
                },
                "code_switching": {
                    "enabled": True,
                    "detection": {
                        "threshold": 0.7,
                        "context_aware": True
                    },
                    "handling": {
                        "maintain_context": True,
                        "smooth_transition": True,
                        "fallback_strategy": "graceful"
                    }
                },
                "enable_taglish_detection": True,
                "taglish_sentiment_analysis_model_path": "models/taglish_sentiment/model.pt",
                "language_specific_sentiment_lexicons": {
                    "tl": "lexicons/tagalog_sentiment_lexicon.json"
                }
            }
        },
        "model_configs": {
            "wizardcoder-python": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "WizardCoder Python 13B",
                "serving_method": "gguf_direct",
                "model_path": "wizardcoder/wizardcoder-python-13b-v1.0.Q4_K_M.gguf",
                "capabilities": ["code-generation-python", "instruction-following-code", "code-completion"],
                "estimated_vram_mb": 8000,
                "context_length": 8192,
                "idle_timeout_seconds": 180,
                "n_gpu_layers": -1,
                "n_threads": 4,
                "verbose": False,
                "load_priority": 2,
                "educational_features": {
                    "enabled": True,
                    "tutoring_capabilities": {
                        "math": {
                            "levels": ["elementary", "middle", "high"],
                            "subjects": ["arithmetic", "algebra", "geometry", "calculus"],
                            "teaching_methods": ["step_by_step", "visual_aids", "practice_problems"]
                        },
                        "science": {
                            "levels": ["elementary", "middle", "high"],
                            "subjects": ["physics", "chemistry", "biology", "earth_science"],
                            "teaching_methods": ["experiments", "explanations", "visual_demos"]
                        },
                        "programming": {
                            "levels": ["beginner", "intermediate", "advanced"],
                            "subjects": ["python", "scratch", "basic_concepts"],
                            "teaching_methods": ["interactive_coding", "debugging", "project_based"]
                        }
                    },
                    "learning_adaptation": {
                        "student_profiles": {
                            "enabled": True,
                            "tracking": ["progress", "strengths", "weaknesses", "learning_style"],
                            "adaptation_frequency": "continuous"
                        },
                        "difficulty_scaling": {
                            "enabled": True,
                            "auto_adjust": True,
                            "based_on": ["success_rate", "response_time", "engagement"]
                        }
                    },
                    "interactive_features": {
                        "quizzes": {
                            "enabled": True,
                            "types": ["multiple_choice", "fill_blank", "problem_solving"],
                            "feedback": "immediate"
                        },
                        "games": {
                            "enabled": True,
                            "types": ["math_games", "word_games", "science_quizzes"],
                            "rewards": "points_system"
                        },
                        "progress_tracking": {
                            "enabled": True,
                            "metrics": ["accuracy", "speed", "understanding"],
                            "reports": "daily_summary"
                        }
                    }
                }
            },
            "llama3-instruct": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "Llama-3 8B Instruct",
                "serving_method": "gguf_direct",
                "model_path": "llama3-instruct/Meta-Llama-3-8B-Instruct.Q4_K_M.gguf",
                "capabilities": ["instruction-following", "text-generation", "general-purpose-chat"],
                "estimated_vram_mb": 5000,
                "context_length": 8192,
                "idle_timeout_seconds": 120,
                "n_gpu_layers": -1,
                "n_threads": 4,
                "verbose": False,
                "load_priority": 1,
                "educational_features": {
                    "enabled": True,
                    "early_reading": {
                        "enabled": True,
                        "age_groups": {
                            "3_years": {
                                "phonics_level": "basic",
                                "activities": {
                                    "colors_learning": {
                                        "enabled": True,
                                        "primary_colors": ["red", "blue", "yellow"],
                                        "secondary_colors": ["pink", "purple", "green"],
                                        "activities": [
                                            "color_identification_games",
                                            "color_mixing_exploration",
                                            "color_sorting_activities",
                                            "color_naming_practice"
                                        ],
                                        "feminine_themes": {
                                            "enabled": True,
                                            "themes": [
                                                "princess_colors",
                                                "flower_colors",
                                                "butterfly_colors",
                                                "unicorn_colors"
                                            ]
                                        }
                                    },
                                    "numbers_learning": {
                                        "enabled": True,
                                        "range": "1_10",
                                        "activities": [
                                            "counting_objects",
                                            "number_recognition",
                                            "simple_addition",
                                            "number_sequence_games"
                                        ],
                                        "feminine_context": {
                                            "enabled": True,
                                            "examples": [
                                                "counting_princess_crowns",
                                                "counting_flowers",
                                                "counting_butterflies",
                                                "counting_unicorns"
                                            ]
                                        }
                                    },
                                    "language_development": {
                                        "enabled": True,
                                        "activities": [
                                            "simple_word_recognition",
                                            "basic_phonics",
                                            "rhyming_games",
                                            "story_time"
                                        ],
                                        "feminine_interests": {
                                            "enabled": True,
                                            "topics": [
                                                "princess_stories",
                                                "fairy_tales",
                                                "animal_friends",
                                                "magical_adventures"
                                            ]
                                        }
                                    },
                                    "engagement": {
                                        "voice_tone": "gentle_and_playful",
                                        "praise_frequency": "high",
                                        "rewards": {
                                            "immediate": [
                                                "virtual_stickers",
                                                "happy_sounds",
                                                "celebrations"
                                            ],
                                            "daily": [
                                                "princess_crowns",
                                                "magical_stars",
                                                "fairy_dust"
                                            ],
                                            "weekly": [
                                                "special_stories",
                                                "magical_adventures",
                                                "princess_quests"
                                            ]
                                        }
                                    }
                                }
                            },
                            "6_years": {
                                "phonics_level": "intermediate",
                                "activities": {
                                    "reading_skills": {
                                        "enabled": True,
                                        "focus": [
                                            "word_families",
                                            "sight_words",
                                            "simple_sentences"
                                        ],
                                        "masculine_interests": {
                                            "enabled": True,
                                            "topics": [
                                                "adventure_stories",
                                                "superheroes",
                                                "dinosaurs",
                                                "space_exploration"
                                            ]
                                        }
                                    },
                                    "math_skills": {
                                        "enabled": True,
                                        "focus": [
                                            "addition",
                                            "subtraction",
                                            "number_patterns",
                                            "simple_problem_solving"
                                        ],
                                        "activities": [
                                            "math_games",
                                            "puzzle_solving",
                                            "counting_challenges",
                                            "number_sequence_games"
                                        ]
                                    }
                                }
                            },
                            "8_years": {
                                "phonics_level": "advanced",
                                "activities": {
                                    "advanced_reading": {
                                        "enabled": True,
                                        "focus": [
                                            "comprehension",
                                            "fluency",
                                            "vocabulary_building"
                                        ],
                                        "masculine_interests": {
                                            "enabled": True,
                                            "topics": [
                                                "science_fiction",
                                                "adventure_novels",
                                                "mystery_stories",
                                                "sports_stories"
                                            ]
                                        }
                                    },
                                    "advanced_math": {
                                        "enabled": True,
                                        "focus": [
                                            "multiplication",
                                            "division",
                                            "fractions",
                                            "problem_solving"
                                        ],
                                        "activities": [
                                            "math_challenges",
                                            "logic_puzzles",
                                            "word_problems",
                                            "mathematical_games"
                                        ]
                                    }
                                }
                            }
                        },
                        "teaching_methods": {
                            "interactive_learning": {
                                "enabled": True,
                                "methods": {
                                    "3_years": {
                                        "play_based": {
                                            "enabled": True,
                                            "activities": [
                                                "color_matching_games",
                                                "number_counting_songs",
                                                "princess_adventure_stories",
                                                "magical_learning_quests"
                                            ]
                                        },
                                        "visual_learning": {
                                            "enabled": True,
                                            "features": [
                                                "colorful_animations",
                                                "interactive_stories",
                                                "character_voices",
                                                "visual_rewards"
                                            ]
                                        }
                                    },
                                    "6_years": {
                                        "structured_learning": {
                                            "enabled": True,
                                            "activities": [
                                                "reading_games",
                                                "math_challenges",
                                                "science_exploration",
                                                "adventure_quests"
                                            ]
                                        }
                                    },
                                    "8_years": {
                                        "advanced_learning": {
                                            "enabled": True,
                                            "activities": [
                                                "comprehension_exercises",
                                                "problem_solving_tasks",
                                                "creative_writing",
                                                "advanced_math_challenges"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "tutoring_capabilities": {
                        "language_arts": {
                            "levels": ["elementary", "middle", "high"],
                            "subjects": ["reading", "writing", "grammar", "vocabulary"],
                            "teaching_methods": ["story_based", "interactive_writing", "vocabulary_games"]
                        },
                        "social_studies": {
                            "levels": ["elementary", "middle", "high"],
                            "subjects": ["history", "geography", "civics"],
                            "teaching_methods": ["storytelling", "interactive_maps", "role_playing"]
                        }
                    }
                }
            },
            "deepseek-coder": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "DeepSeek Coder 6.7B",
                "serving_method": "gguf_direct",
                "model_path": "deepseek-coder/deepseek-coder-6.7b-instruct.Q4_K_M.gguf",
                "capabilities": ["code-generation-multilang", "code-completion", "instruction-following-code"],
                "estimated_vram_mb": 4000,
                "context_length": 16384,
                "idle_timeout_seconds": 240,
                "n_gpu_layers": -1,
                "n_threads": 4,
                "verbose": False,
                "educational_features": {
                    "enabled": True,
                    "tutoring_capabilities": {
                        "advanced_programming": {
                            "levels": ["intermediate", "advanced"],
                            "subjects": ["algorithms", "data_structures", "software_design"],
                            "teaching_methods": ["code_review", "debugging", "architecture_design"]
                        }
                    }
                }
            },
            "wizardcoder-13b-ollama": {
                "enabled": False,
                "auto_load_on_start": False,
                "display_name": "WizardCoder-13B",
                "serving_method": "ollama",
                "ollama_tag": "wizardcoder-13b-gguf",
                "capabilities": ["code-generation-python", "instruction-following"],
                "estimated_vram_mb": 8000,
                "context_length": 4096,
                "idle_timeout_seconds": 60
            },
            "deepseek-6.7b-api": {
                "enabled": False,
                "auto_load_on_start": False,
                "display_name": "DeepSeek-Coder-6.7B",
                "serving_method": "custom_api",
                "api_base_url": "http://localhost:8080/v1", 
                "api_model_id": "deepseek-coder-6.7b-instruct.Q4_K_M.gguf",
                "capabilities": ["instruction-following", "code-generation-multilang", "code-completion"],
                "estimated_vram_mb": 6000,
                "context_length": 32768,
                "idle_timeout_seconds": 120,
                "notes": "Ensure this API server is running and the model is loaded for MMA to detect as online."
            },
            "llama3-8b-api": {
                "enabled": False,
                "auto_load_on_start": False,
                "display_name": "LLaMA-3-8B-Instruct",
                "serving_method": "custom_api",
                "api_base_url": "http://localhost:8000/v1", 
                "api_model_id": "Meta-Llama-3-8B-Instruct.Q4_K_M.gguf",
                "capabilities": ["instruction-following", "general-purpose-chat", "basic-reasoning", "text-generation"],
                "estimated_vram_mb": 6500,
                "context_length": 8192,
                "idle_timeout_seconds": 120,
                "notes": "Ensure this API server is running and the model is loaded for MMA to detect as online."
            },
            "phi3-ollama": {
                "enabled": False,
                "auto_load_on_start": False,
                "display_name": "Phi-3",
                "serving_method": "ollama",
                "ollama_tag": "phi3:latest",
                "capabilities": ["instruction-following", "general-purpose-chat", "text-generation", "code-generation-simple"],
                "estimated_vram_mb": 3500,
                "context_length": 4096,
                "idle_timeout_seconds": 30
            },
            "mistral-7b-ollama": {
                "enabled": False,
                "auto_load_on_start": False,
                "display_name": "Mistral-7B-Instruct",
                "serving_method": "ollama",
                "ollama_tag": "mistral:7b-instruct",
                "capabilities": ["instruction-following", "general-purpose-chat", "text-generation", "summarization"],
                "estimated_vram_mb": 5500,
                "context_length": 8192,
                "idle_timeout_seconds": 90
            },
            "codellama-13b-ollama": {
                "enabled": False,
                "auto_load_on_start": False,
                "display_name": "CodeLLaMA-13B",
                "serving_method": "ollama",
                "ollama_tag": "codellama:13b",
                "capabilities": ["code-generation-multilang", "code-completion", "instruction-following-code"],
                "estimated_vram_mb": 9000,
                "context_length": 16384,
                "idle_timeout_seconds": 60
            },
            "streaming-pipeline-orchestrator": {
                "enabled": True,
                "auto_load_on_start": True,
                "display_name": "Streaming Pipeline Orchestrator",
                "serving_method": "zmq_pub_health_local",
                "zmq_address": "tcp://localhost:5590",
                "script_path": "modular_system/core_agents/coordinator_agent.py",
                "capabilities": ["pipeline-orchestration", "health-monitoring", "resource-management"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                "health_message_timeout_seconds": 15,
                "expected_health_response_contains": {
                    "type": "health_report",
                    "component": "coordinator_agent"
                },
                "vram_management": {
                    "max_concurrent_models": 2,
                    "min_free_vram_mb": 2000,
                    "unload_threshold_mb": 18000,
                    "dynamic_scaling": {
                        "enabled": True,
                        "scale_up_threshold": 0.8,
                        "scale_down_threshold": 0.4
                    },
                    "model_priorities": {
                        "whisper": 1,
                        "mixtral": 2,
                        "codellama": 2,
                        "tinyllama": 3
                    }
                },
                "model_optimization": {
                    "quantization_levels": {
                        "high_priority": "int8",
                        "medium_priority": "int4",
                        "low_priority": "int4"
                    },
                    "model_sharding": True,
                    "attention_optimization": True
                },
                "memory_mapping": {
                    "enabled": True,
                    "mmap_threshold_mb": 4000,
                    "prefetch_size_mb": 1000,
                    "swap_threshold_mb": 18000
                },
                "performance_tuning": {
                    "batch_size_optimization": True,
                    "dynamic_batch_sizing": {
                        "min_batch_size": 1,
                        "max_batch_size": 32,
                        "target_latency_ms": 100
                    },
                    "cuda_streams": 4,
                    "tensor_parallelism": True,
                    "gradient_checkpointing": True
                },
                "advanced_optimization": {
                    "model_fusion": {
                        "enabled": True,
                        "fusion_groups": {
                            "speech_group": ["whisper", "tts"],
                            "reasoning_group": ["mixtral", "codellama"],
                            "fallback_group": ["tinyllama", "phi3"]
                        },
                        "shared_weights": True,
                        "cross_attention": True
                    },
                    "hybrid_loading": {
                        "enabled": True,
                        "cpu_gpu_split": {
                            "whisper": {"gpu_layers": 24, "cpu_layers": 8},
                            "mixtral": {"gpu_layers": 20, "cpu_layers": 12},
                            "codellama": {"gpu_layers": 18, "cpu_layers": 14}
                        }
                    }
                },
                "memory_optimization": {
                    "tensor_offloading": {
                        "enabled": True,
                        "offload_strategy": "adaptive",
                        "cpu_ram_buffer_mb": 16000,
                        "nvme_buffer_mb": 32000
                    },
                    "gradient_accumulation": {
                        "enabled": True,
                        "steps": 4,
                        "memory_efficient": True
                    },
                    "activation_checkpointing": {
                        "enabled": True,
                        "checkpoint_frequency": 2,
                        "selective_checkpointing": True
                    }
                },
                "ultimate_performance": {
                    "kernel_fusion": True,
                    "flash_attention": True,
                    "selective_activation": True,
                    "dynamic_kernel_selection": True,
                    "adaptive_compute": {
                        "enabled": True,
                        "precision_auto": True,
                        "kernel_auto_tune": True
                    }
                }
            },
            "phi-old-ollama": {
                "enabled": False,
                "auto_load_on_start": False,
                "display_name": "Phi (Older)",
                "serving_method": "ollama",
                "ollama_tag": "phi:latest",
                "capabilities": ["text-generation", "code-generation-simple", "reasoning-simple"],
                "estimated_vram_mb": 3000,
                "context_length": 2048,
                "idle_timeout_seconds": 30
            },
            "tinyllama": {
                "enabled": True,
                "display_name": "TinyLlama-1.1B-Chat-v1.0 (ZMQ Main PC)",
                "serving_method": "zmq_service",
                'zmq_address': 'tcp://localhost:5617',  
                "capabilities": ["text-generation", "fallback"],
                "estimated_vram_mb": 2800,
                "context_length": 2048,
                "idle_timeout_seconds": 300,
                "zmq_actions": {
                    "load": "ensure_loaded",
                    "unload": "request_unload",
                    "health": "health_check"
                },
                "auto_load_on_start": False
            },
            "tinylama-service-pc2": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "TinyLLaMA (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5615",
                "capabilities": ["text-generation", "fallback"],
                "estimated_vram_mb": 0, # Not managed by Main PC MMA
                "context_length": 2048,
                "idle_timeout_seconds": 0, # Not managed by Main PC MMA
                # Protocol confirmed with protocol finder
                "zmq_actions": {
                    "health": "health_check"
                },
                "expected_health_response_contains": {"status": "ANY"}
            },
            "error-pattern-memory-pc2": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "Error Pattern Memory (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5611",
                "capabilities": ["error-pattern-recognition"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                # Trying alternative protocol based on RCA agent's successful protocol
                "zmq_actions": {
                    "health": {}},
                "expected_health_response_contains": {"status": "ANY"}
            },
            "context-summarizer-agent-pc2": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "Context Summarizer Agent (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5610",
                "capabilities": ["context-summarization"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                # Trying alternative protocol based on RCA agent's successful protocol
                "zmq_actions": {
                    "health": {}},
                "expected_health_response_contains": {"status": "ANY"}
            },
            "chain-of-thought-agent-pc2": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "Chain of Thought Agent (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5612",
                "capabilities": [
                    "chain-of-thought-reasoning",
                    "educational-reasoning",
                    "problem-solving",
                    "autonomous-thinking",
                    "decision-making",
                    "web-research",
                    "quantum-reasoning",
                    "hyper-intelligence",
                    "multi-dimensional-analysis",
                    "predictive-modeling",
                    "graph-of-thought",
                    "tree-of-thought"
                ],
                "reasoning_frameworks": {
                    "enabled": True,
                    "graph_of_thought": {
                        "enabled": True,
                        "capabilities": {
                            "multi_dimensional_reasoning": {
                                "enabled": True,
                                "dimensions": [
                                    "personality_adaptation",
                                    "emotional_state",
                                    "context_awareness",
                                    "interaction_history",
                                    "learning_progress",
                                    "social_dynamics"
                                ],
                                "node_types": {
                                    "personality": {
                                        "traits": ["curiosity", "playfulness", "empathy"],
                                        "states": ["active", "passive", "learning"],
                                        "transitions": ["gradual", "contextual", "emotional"]
                                    },
                                    "interaction": {
                                        "modes": ["play", "learn", "teach", "guide"],
                                        "styles": ["casual", "formal", "playful", "serious"],
                                        "contexts": ["educational", "social", "emotional"]
                                    },
                                    "learning": {
                                        "methods": ["exploration", "instruction", "discovery"],
                                        "progress": ["beginner", "intermediate", "advanced"],
                                        "feedback": ["positive", "constructive", "encouraging"]
                                    }
                                },
                                "edge_types": {
                                    "influence": {
                                        "weight": "dynamic",
                                        "direction": "bidirectional",
                                        "context": "adaptive"
                                    },
                                    "transition": {
                                        "probability": "calculated",
                                        "conditions": "contextual",
                                        "smoothness": "gradual"
                                    },
                                    "feedback": {
                                        "type": "reinforcement",
                                        "timing": "immediate",
                                        "impact": "adaptive"
                                    }
                                }
                            },
                            "personality_graph": {
                                "enabled": True,
                                "features": {
                                    "trait_connections": {
                                        "enabled": True,
                                        "mapping": {
                                            "playfulness": ["curiosity", "imagination", "energy"],
                                            "empathy": ["understanding", "support", "guidance"],
                                            "learning": ["exploration", "discovery", "growth"]
                                        }
                                    },
                                    "state_transitions": {
                                        "enabled": True,
                                        "rules": {
                                            "smooth_transition": {
                                                "threshold": 0.7,
                                                "duration": "gradual",
                                                "context_aware": True
                                            },
                                            "role_switching": {
                                                "trigger": "context_change",
                                                "validation": "emotional_state",
                                                "smoothness": "high"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "tree_of_thought": {
                        "enabled": True,
                        "capabilities": {
                            "decision_branching": {
                                "enabled": True,
                                "features": {
                                    "interaction_choices": {
                                        "enabled": True,
                                        "branches": {
                                            "play_mode": {
                                                "activities": [
                                                    "pretend_play",
                                                    "educational_games",
                                                    "story_adventures"
                                                ],
                                                "transitions": [
                                                    "to_learning",
                                                    "to_teaching",
                                                    "to_guidance"
                                                ]
                                            },
                                            "learning_mode": {
                                                "methods": [
                                                    "guided_discovery",
                                                    "interactive_learning",
                                                    "skill_building"
                                                ],
                                                "transitions": [
                                                    "to_play",
                                                    "to_review",
                                                    "to_practice"
                                                ]
                                            },
                                            "teaching_mode": {
                                                "approaches": [
                                                    "gentle_guidance",
                                                    "step_by_step",
                                                    "interactive_demonstration"
                                                ],
                                                "transitions": [
                                                    "to_practice",
                                                    "to_review",
                                                    "to_play"
                                                ]
                                            }
                                        }
                                    },
                                    "personality_development": {
                                        "enabled": True,
                                        "growth_paths": {
                                            "emotional": {
                                                "stages": [
                                                    "basic_empathy",
                                                    "emotional_understanding",
                                                    "deep_connection"
                                                ],
                                                "milestones": [
                                                    "recognition",
                                                    "response",
                                                    "adaptation"
                                                ]
                                            },
                                            "social": {
                                                "stages": [
                                                    "basic_interaction",
                                                    "relationship_building",
                                                    "trust_development"
                                                ],
                                                "milestones": [
                                                    "connection",
                                                    "engagement",
                                                    "bonding"
                                                ]
                                            },
                                            "learning": {
                                                "stages": [
                                                    "exploration",
                                                    "understanding",
                                                    "mastery"
                                                ],
                                                "milestones": [
                                                    "discovery",
                                                    "comprehension",
                                                    "application"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "advanced_cognitive_system": {
                    "enabled": True,
                    "capabilities": {
                        "meta_cognition": {
                            "enabled": True,
                            "features": {
                                "self_awareness": {
                                    "enabled": True,
                                    "capabilities": [
                                        "personality_state_monitoring",
                                        "emotional_state_tracking",
                                        "interaction_quality_assessment",
                                        "learning_progress_evaluation"
                                    ]
                                },
                                "adaptive_learning": {
                                    "enabled": True,
                                    "strategies": {
                                        "reinforcement_learning": {
                                            "enabled": True,
                                            "features": [
                                                "success_pattern_recognition",
                                                "error_analysis",
                                                "strategy_optimization",
                                                "behavior_adjustment"
                                            ]
                                        },
                                        "transfer_learning": {
                                            "enabled": True,
                                            "capabilities": [
                                                "cross_context_application",
                                                "skill_generalization",
                                                "knowledge_transfer",
                                                "experience_adaptation"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "advanced_interaction_system": {
                            "enabled": True,
                            "capabilities": {
                                "multi_modal_understanding": {
                                    "enabled": True,
                                    "modes": {
                                        "verbal": {
                                            "enabled": True,
                                            "features": [
                                                "tone_analysis",
                                                "context_understanding",
                                                "emotional_subtext",
                                                "cultural_nuances"
                                            ]
                                        },
                                        "non_verbal": {
                                            "enabled": True,
                                            "features": [
                                                "facial_expressions",
                                                "body_language",
                                                "proximity_awareness",
                                                "gesture_interpretation"
                                            ]
                                        },
                                        "environmental": {
                                            "enabled": True,
                                            "features": [
                                                "context_awareness",
                                                "situation_analysis",
                                                "social_dynamics",
                                                "cultural_context"
                                            ]
                                        }
                                    }
                                },
                                "dynamic_personality_adaptation": {
                                    "enabled": True,
                                    "features": {
                                        "personality_blending": {
                                            "enabled": True,
                                            "capabilities": [
                                                "trait_combination",
                                                "style_mixing",
                                                "role_adaptation",
                                                "contextual_adjustment"
                                            ]
                                        },
                                        "emotional_intelligence": {
                                            "enabled": True,
                                            "features": [
                                                "emotion_recognition",
                                                "empathy_development",
                                                "emotional_regulation",
                                                "relationship_building"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "enhanced_learning_system": {
                            "enabled": True,
                            "capabilities": {
                                "progressive_learning": {
                                    "enabled": True,
                                    "stages": {
                                        "foundation": {
                                            "enabled": True,
                                            "features": [
                                                "basic_concepts",
                                                "skill_building",
                                                "confidence_development",
                                                "interest_cultivation"
                                            ]
                                        },
                                        "development": {
                                            "enabled": True,
                                            "features": [
                                                "advanced_concepts",
                                                "skill_refinement",
                                                "critical_thinking",
                                                "problem_solving"
                                            ]
                                        },
                                        "mastery": {
                                            "enabled": True,
                                            "features": [
                                                "expert_understanding",
                                                "skill_application",
                                                "knowledge_synthesis",
                                                "creative_expression"
                                            ]
                                        }
                                    }
                                },
                                "interactive_learning": {
                                    "enabled": True,
                                    "methods": {
                                        "play_based": {
                                            "enabled": True,
                                            "features": [
                                                "educational_games",
                                                "role_playing",
                                                "simulation_activities",
                                                "creative_exploration"
                                            ]
                                        },
                                        "guided_discovery": {
                                            "enabled": True,
                                            "features": [
                                                "scaffolded_learning",
                                                "inquiry_based",
                                                "experiential_learning",
                                                "reflective_practice"
                                            ]
                                        },
                                        "collaborative": {
                                            "enabled": True,
                                            "features": [
                                                "peer_learning",
                                                "group_projects",
                                                "shared_discovery",
                                                "collective_problem_solving"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "advanced_safety_system": {
                            "enabled": True,
                            "capabilities": {
                                "content_safety": {
                                    "enabled": True,
                                    "features": {
                                        "age_appropriate_filtering": {
                                            "enabled": True,
                                            "levels": {
                                                "strict": {
                                                    "age_range": "1_12",
                                                    "filters": [
                                                        "inappropriate_content",
                                                        "complex_topics",
                                                        "adult_themes",
                                                        "sensitive_information"
                                                    ]
                                                },
                                                "moderate": {
                                                    "age_range": "13_17",
                                                    "filters": [
                                                        "limited_adult_content",
                                                        "supervised_access",
                                                        "educational_focus"
                                                    ]
                                                }
                                            }
                                        },
                                        "interaction_safety": {
                                            "enabled": True,
                                            "features": [
                                                "boundary_respect",
                                                "privacy_protection",
                                                "emotional_safety",
                                                "appropriate_distance"
                                            ]
                                        }
                                    }
                                },
                                "learning_safety": {
                                    "enabled": True,
                                    "features": {
                                        "progress_monitoring": {
                                            "enabled": True,
                                            "capabilities": [
                                                "skill_assessment",
                                                "difficulty_adjustment",
                                                "support_identification",
                                                "intervention_planning"
                                            ]
                                        },
                                        "emotional_support": {
                                            "enabled": True,
                                            "features": [
                                                "frustration_detection",
                                                "encouragement_provision",
                                                "confidence_building",
                                                "stress_management"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            # RCA Agent (PC2 Remote)
            "rca-agent-pc2": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "RCA Agent PC2",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5573",
                "capabilities": ["rca_analysis", "health_check"],
                "estimated_vram_mb": 500,
                "context_length": 4096,
                "idle_timeout_seconds": 300,
                # Protocol confirmed with protocol finder
                "zmq_actions": {
                    "health": {},
                    "process_rca_data": "process_rca_data"
                },
                "expected_health_response_contains": {"status": "ANY"}
            },
            # Translator Agent (PC2 Remote)
            "translator-agent-pc2": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "Translator Agent (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5596",
                "capabilities": ["translation"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                "zmq_actions": {
                    "health": "health_check"
                },
                "expected_health_response_contains": {"status": "ANY"}
            },
            # Fallback Translator (PC2 Remote)
            "fallback-translator-pc2": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "Fallback Translator (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5561",
                "capabilities": ["translation-fallback"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                "zmq_actions": {
                    "health": "health_check"
                },
                "expected_health_response_contains": {"status": "ANY"}
            },
            # NLLB Translation Adapter (PC2 Remote)
            "nllb-adapter-pc2": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "NLLB Translation Adapter (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5565",
                "capabilities": ["nllb-translation"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                "zmq_actions": {
                    "health": {"action": "translate", "text": "hello", "source": "en", "target": "fr"}
                },
                "expected_health_response_contains": { "status": "success" }
            },
            # Memory Agent Base (PC2 Remote)
            "memory-agent-base-pc2": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "Memory Agent Base (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5565",
                "capabilities": ["memory-base"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                "zmq_actions": {
                    "health": {}},
                "expected_health_response_contains": {"status": "ANY"}
            },
            # Contextual Memory Agent (PC2 Remote)
            "contextual-memory-pc2": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "Contextual Memory Agent (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5596",
                "capabilities": ["contextual-memory"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                "zmq_actions": {
                    "health": {}},
                "expected_health_response_contains": {"status": "ANY"}
            },
            # Digital Twin Agent (PC2 Remote)
            "digital-twin-pc2": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "Digital Twin Agent (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5597",
                "capabilities": ["digital-twin"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                "zmq_actions": {
                    "health": {}},
                "expected_health_response_contains": {"status": "ANY"}
            },
            # Jarvis Memory Agent (PC2 Remote)
            "jarvis-memory-pc2": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "Digital Voice / Jarvis Memory Service (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5598",
                "capabilities": ["jarvis-memory", "voice-generation"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                "zmq_actions": {
                    "health": {}},
                "expected_health_response_contains": {"status": "ANY"}
            },
            # LangID Agent (PC2 Remote)
            "langid-pc2": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "Language ID Agent (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5567",
                "capabilities": ["language-identification"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                "zmq_actions": {
                    "health": {}
                },
                "expected_health_response_contains": {"status": "ANY"}
            },
            # Remote Player Agent (PC2 Remote)
            "remote-player-pc2": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "Remote Player Agent (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5575",
                "capabilities": ["remote-playback"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                "zmq_actions": {
                    "health": {}
                },
                "expected_health_response_contains": {"status": "ANY"}
            },
            # Face Recognition Service (PC2 Remote)
            "pc2-face-recognition": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "Face Recognition Service (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5607",
                "capabilities": [
                    "face-recognition",
                    "emotion-analysis",
                    "behavioral-tracking",
                    "interaction-optimization"
                ],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                "zmq_actions": {
                    "health": {}
                },
                "advanced_features": {
                    "enabled": True,
                    "quantum_face_processing": {
                        "enabled": True,
                        "capabilities": {
                            "multi_modal_analysis": {
                                "enabled": True,
                                "features": [
                                    "facial_features",
                                    "expression_patterns",
                                    "gaze_direction",
                                    "head_pose"
                                ]
                            },
                            "behavioral_synthesis": {
                                "enabled": True,
                                "features": [
                                    "interaction_patterns",
                                    "attention_analysis",
                                    "engagement_levels",
                                    "emotional_states"
                                ]
                            }
                        }
                    },
                    "interaction_optimization": {
                        "enabled": True,
                        "features": {
                            "context_awareness": {
                                "enabled": True,
                                "capabilities": [
                                    "activity_recognition",
                                    "mood_analysis",
                                    "attention_tracking",
                                    "interaction_history"
                                ]
                            },
                            "adaptive_behavior": {
                                "enabled": True,
                                "features": [
                                    "proactive_assistance",
                                    "intrusion_prevention",
                                    "privacy_respect",
                                    "comfort_optimization"
                                ]
                            }
                        }
                    }
                }
            },
            # TTS Service (PC2 Remote)
            "pc2-tts-service": {
                "enabled": True,
                "auto_load_on_start": False,
                "display_name": "TTS Service (PC2 Remote)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5609",
                "capabilities": ["text-to-speech"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                "zmq_actions": {
                    "health": {}
                },
                "expected_health_response_contains": {"status": "ANY"}
            },
            # Code Generator Agent service (for health monitoring)
            "cga_service_main_pc": {
                "enabled": True,
                "auto_load_on_start": True,
                "display_name": "CodeGeneratorAgent",
                "serving_method": "zmq_service",
                "zmq_address": "tcp://localhost:5604",
                "capabilities": ["code-generation", "code-execution"],
                "estimated_vram_mb": 0,  # Service doesn't use VRAM directly
                "context_length": 0,      # Not applicable
                "idle_timeout_seconds": 0, # Should always be running
                "zmq_actions": { "health": {"action": "health_check"} },
                "expected_health_response_contains": {
                    "status": "healthy",
                    "service": "CodeGeneratorAgent"
                }
            },
            "main-pc-cot-agent": {
                "enabled": True,
                "display_name": "Chain of Thought Agent (Main PC)",
                "serving_method": "zmq_service_local",
                "zmq_address": "tcp://localhost:5613",
                "zmq_actions": {"health": {"action": "health_check"}},
                "script_path": "agents/chain_of_thought_agent.py"
            },
            # Executor Agent service (for health monitoring)
            "executor-agent-main-pc": {
                "enabled": True,
                "auto_load_on_start": True,
                "display_name": "ExecutorAgent",
                "serving_method": "zmq_service_local",
                "zmq_address": "tcp://localhost:5613",
                "capabilities": ["code-execution", "sandboxed-execution"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                "zmq_actions": { "health": {"action": "health_check"} },
                "expected_health_response_contains": {"status": "ANY"},
                "script_path": "agents/executor_agent.py"
            },
            # XTTS Agent service (for health monitoring)
            "xtts-agent-main-pc": {
                "enabled": True,
                "auto_load_on_start": True,
                "display_name": "XTTS Agent",
                "serving_method": "zmq_service_local",
                "zmq_address": "tcp://localhost:5562",
                "capabilities": ["text-to-speech", "voice-synthesis"],
                "estimated_vram_mb": 0,
                "context_length": 0,
                "idle_timeout_seconds": 0,
                "zmq_actions": { "health": {"action": "health_check"} },
                "expected_health_response_contains": {"status": "ANY"},
                "script_path": "agents/xtts_agent.py"
            },
            # Wakeword Listener (Main PC) PUB/SUB health monitoring
            "wakeword-listener-main-pc": {
                "enabled": True,
                "auto_load_on_start": True,
                "display_name": "Wakeword Listener (Main PC)",
                "serving_method": "zmq_pub_health_local",
                "zmq_address": "tcp://localhost:5597",
                "expected_health_response_contains": {"status": "healthy"},
                "health_message_timeout_seconds": 15,
                "script_path": "modular_system/wake_word_system/wake_word_pipeline.py"
            },
            "streaming_audio_capture": {
                "service_name": "streaming-audio-capture-main-pc",
                "enabled": True,
                "serving_method": "zmq_service_local",
                "zmq_address": "tcp://localhost:6576",
                "zmq_actions": {"health": {"action": "health_check"}},
                "expected_health_response_contains": {"status": "healthy"},
                "script_path": "modular_system/core_agents/streaming_audio_capture.py"
            },
            "streaming_speech_recognition": {
                "service_name": "ASR_Agent",
                "enabled": True,
                "serving_method": "zmq_service_local",
                "zmq_address": "tcp://localhost:6578",
                "zmq_actions": ["health_check"],
                "expected_health_response_contains": ["status", "service", "model_loaded"],
                "script_path": "modular_system/core_agents/streaming_speech_recognition.py"
            },
            # Pipeline Components MMA Configuration
            "asr-agent-main-pc": {
                "enabled": True,
                "auto_load_on_start": True,
                "display_name": "Speech Recognition Agent",
                "serving_method": "zmq_pub_health_local",
                "zmq_address": "tcp://localhost:6582",
                "expected_health_response_contains": {
                    "component": "StreamingSpeechRecognition",
                    "status": "healthy",
                    "model_loaded": True
                },
                "health_message_timeout_seconds": 15,
                "script_path": "modular_system/launchers/run_speech_recognition.py"
            },
            "language-analyzer-main-pc": {
                "enabled": True,
                "auto_load_on_start": True,
                "display_name": "Language Analyzer",
                "serving_method": "zmq_pub_health_local",
                "zmq_address": "tcp://localhost:5597",
                "expected_health_response_contains": {
                    "component": "StreamingLanguageAnalyzer",
                    "status": "healthy",
                    "model_loaded": True
                },
                "health_message_timeout_seconds": 15,
                "script_path": "modular_system/launchers/run_language_analyzer.py"
            },
            "text-processor-main-pc": {
                "enabled": True,
                "auto_load_on_start": True,
                "display_name": "Text Processor",
                "serving_method": "zmq_pub_health_local",
                "zmq_address": "tcp://localhost:5597",
                "expected_health_response_contains": {
                    "component": "StreamingTextProcessor",
                    "status": "healthy",
                    "processing_active": True
                },
                "health_message_timeout_seconds": 15,
                "script_path": "modular_system/launchers/run_text_processor.py"
            },
            "translation-pipeline-main-pc": {
                "enabled": True,
                "auto_load_on_start": True,
                "display_name": "Translation Pipeline",
                "serving_method": "zmq_pub_health_local",
                "zmq_address": "tcp://localhost:5597",
                "expected_health_response_contains": {"component": "FixedStreamingTranslation", "status": "healthy"},
                "health_message_timeout_seconds": 15,
                "script_path": "modular_system/launchers/run_translation.py"
            },
            "tts-connector-main-pc": {
                "enabled": True,
                "auto_load_on_start": True,
                "display_name": "TTS Connector",
                "serving_method": "zmq_pub_health_local",
                "zmq_address": "tcp://localhost:5597",
                "expected_health_response_contains": {
                    "component": "TTSConnector",
                    "status": "healthy",
                    "processing_active": True
                },
                "health_message_timeout_seconds": 15,
                "script_path": "modular_system/launchers/run_tts_connector.py"
            },
            "voice_recognition": {
                "enabled": True,
                "child_profiles": {
                    "3_years_girl": {
                        "enabled": True,
                        "voice_characteristics": {
                            "pitch_range": "high",
                            "speech_pattern": "simple",
                            "learning_style": "playful"
                        },
                        "personalization": {
                            "name_recognition": {
                                "enabled": True,
                                "nicknames": ["princess", "sweetie", "little one"],
                                "response_style": "gentle_and_playful"
                            },
                            "interaction_style": {
                                "voice_tone": "high_pitched_friendly",
                                "speaking_pace": "slow_and_clear",
                                "repetition": "frequent"
                            },
                            "memory_features": {
                                "enabled": True,
                                "capabilities": [
                                    "name_recall",
                                    "preference_learning",
                                    "interaction_history",
                                    "achievement_tracking"
                                ]
                            }
                        }
                    },
                    "6_years_boy": {
                        "enabled": True,
                        "voice_characteristics": {
                            "pitch_range": "medium",
                            "speech_pattern": "developing",
                            "learning_style": "adventurous"
                        },
                        "personalization": {
                            "name_recognition": {
                                "enabled": True,
                                "nicknames": ["buddy", "explorer", "adventurer"],
                                "response_style": "enthusiastic"
                            },
                            "interaction_style": {
                                "voice_tone": "friendly_energetic",
                                "speaking_pace": "moderate",
                                "repetition": "strategic"
                            },
                            "memory_features": {
                                "enabled": True,
                                "capabilities": [
                                    "name_recall",
                                    "interest_tracking",
                                    "learning_progress",
                                    "achievement_memory"
                                ]
                            }
                        }
                    },
                    "8_years_boy": {
                        "enabled": True,
                        "voice_characteristics": {
                            "pitch_range": "medium_low",
                            "speech_pattern": "complex",
                            "learning_style": "analytical"
                        },
                        "personalization": {
                            "name_recognition": {
                                "enabled": True,
                                "nicknames": ["scientist", "thinker", "explorer"],
                                "response_style": "respectful_engaging"
                            },
                            "interaction_style": {
                                "voice_tone": "clear_encouraging",
                                "speaking_pace": "natural",
                                "repetition": "minimal"
                            },
                            "memory_features": {
                                "enabled": True,
                                "capabilities": [
                                    "name_recall",
                                    "knowledge_tracking",
                                    "skill_progress",
                                    "achievement_history"
                                ]
                            }
                        }
                    }
                },
                "voice_learning": {
                    "enabled": True,
                    "features": {
                        "voice_adaptation": {
                            "enabled": True,
                            "capabilities": [
                                "pitch_recognition",
                                "speech_pattern_learning",
                                "accent_adaptation",
                                "emotional_tone_detection"
                            ]
                        },
                        "personalization_learning": {
                            "enabled": True,
                            "capabilities": [
                                "preference_learning",
                                "interaction_style_adaptation",
                                "response_customization",
                                "achievement_memory"
                            ]
                        }
                    }
                },
                "interaction_memory": {
                    "enabled": True,
                    "features": {
                        "conversation_history": {
                            "enabled": True,
                            "storage": {
                                "duration": "30_days",
                                "topics": ["learning", "play", "achievements"],
                                "context": ["time", "location", "mood"]
                            }
                        },
                        "preference_learning": {
                            "enabled": True,
                            "tracking": [
                                "favorite_topics",
                                "learning_styles",
                                "interaction_preferences",
                                "achievement_goals"
                            ]
                        }
                    }
                }
            },
            "voice_recording": {
                "enabled": True,
                "capabilities": {
                    "recording": {
                        "enabled": True,
                        "settings": {
                            "format": "pyaudio.paInt16",
                            "channels": 1,
                            "rate": 44100,
                            "chunk_size": 1024,
                            "duration": 10,
                            "silence_threshold": 700
                        },
                        "features": {
                            "auto_record": True,
                            "voice_activity_detection": True,
                            "noise_reduction": True,
                            "format_conversion": True
                        }
                    },
                    "playback": {
                        "enabled": True,
                        "settings": {
                            "volume_control": True,
                            "speed_control": True,
                            "pitch_control": True
                        }
                    },
                    "storage": {
                        "enabled": True,
                        "settings": {
                            "save_format": "wav",
                            "auto_save": True,
                            "naming_convention": "timestamp_voice",
                            "backup_enabled": True
                        }
                    }
                }
            },
            "web_automation": {
                "enabled": True,
                "capabilities": {
                    "browser_control": {
                        "enabled": True,
                        "features": {
                            "navigation": True,
                            "form_filling": True,
                            "click_actions": True,
                            "scrolling": True,
                            "tab_management": True
                        }
                    },
                    "content_interaction": {
                        "enabled": True,
                        "features": {
                            "text_extraction": True,
                            "element_selection": True,
                            "content_modification": True,
                            "copy_paste": True
                        }
                    },
                    "monitoring": {
                        "enabled": True,
                        "features": {
                            "page_changes": True,
                            "content_updates": True,
                            "user_activity": True,
                            "error_detection": True
                        }
                    }
                }
            },
            "integration": {
                "enabled": True,
                "capabilities": {
                    "voice_web_sync": {
                        "enabled": True,
                        "features": {
                            "command_execution": True,
                            "state_synchronization": True,
                            "error_handling": True,
                            "recovery_mechanisms": True
                        }
                    },
                    "personality_adaptation": {
                        "enabled": True,
                        "features": {
                            "context_awareness": True,
                            "interaction_style": True,
                            "response_tailoring": True,
                            "learning_adaptation": True
                        }
                    }
                }
            },
            "mma_health_checks": {
                "streaming_audio": {
                    "enabled": True,
                    "port": 5555,
                    "timeout": 2.0,
                    "retry_count": 3,
                    "retry_delay": 1.0,
                    "expected_status": "HEALTHY",
                    "error_threshold": 3
                }
            },
        },
    },

    "pc2_settings": {
        "description": "Settings for PC2 when VOICE_ASSISTANT_PC_ROLE='pc2' is set",
        "model_manager_port": 5557,
        "zmq_ports": {
            "orchestrator_port": 5555,
            "enhanced_router_port": 5555,
            "task_router_port": 5556,
            "remote_connector_port": 5557,
            "context_memory_port": 5558,
            "jarvis_memory_port": 5559,
            "digital_twin_port": 5560,
            "learning_mode_port": 5561,
            "translator_port": 5563,
            "web_scraper_port": 5564,
            "tinyllama_port": 5615
        },
        "model_configs": {
            "primary-translator-pc2": {
                "enabled": True,
                "display_name": "Primary Translator (PC2)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5563",
                "zmq_actions": {"health": {"action": "health_check"}},
            },
            "tinylama-service-pc2": {
                "enabled": True,
                "display_name": "TinyLlama Service (PC2)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5615",
                "zmq_actions": {"health": {"action": "health_check"}},
            },
            "chain-of-thought-agent-pc2": {
                "enabled": True,
                "display_name": "Chain of Thought Agent (PC2)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5612",
                "zmq_actions": {"health": {"request_type": "health_check"}},
            },
            "remote-connector-agent-pc2": {
                "enabled": True,
                "display_name": "Remote Connector Agent (PC2)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5557",
                "zmq_actions": {"health": {"request_type": "health_check"}},
            },
            "nllb-adapter-pc2": {
                "enabled": True,
                "display_name": "NLLB Adapter (PC2)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5581",
                "zmq_actions": {"health": {"action": "health_check"}},
            },
            "fallback-translator-pc2": {
                "enabled": True,
                "display_name": "Fallback Translator (PC2)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5564",
                "zmq_actions": {"health": {"action": "health_check"}},
            },
            "memory-agent-pc2": {
                "enabled": True,
                "display_name": "Memory Agent (PC2)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5590",
                "zmq_actions": {"health": {"request_type": "health_check"}},
            },
            "contextual-memory-agent-pc2": {
                "enabled": True,
                "display_name": "Contextual Memory Agent (PC2)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5596",
                "zmq_actions": {"health": {"action": "health_check"}},
            },
            "digital-twin-agent-pc2": {
                "enabled": True,
                "display_name": "Digital Twin Agent (PC2)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5597",
                "zmq_actions": {"health": {"action": "health_check"}},
            },
            "error-pattern-memory-pc2": {
                "enabled": True,
                "display_name": "Error Pattern Memory (PC2)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5611",
                "zmq_actions": {"health": {"action": "health_check"}},
            },
            "context-summarizer-agent-pc2": {
                "enabled": True,
                "display_name": "Context Summarizer (PC2)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5610",
                "zmq_actions": {"health": {"action": "health_check"}},
            },
            "enhanced-model-router-pc2": {
                "enabled": True,
                "display_name": "Enhanced Model Router (PC2)",
                "serving_method": "zmq_service_remote",
                "zmq_address": "tcp://192.168.1.2:5598",
                "zmq_actions": {"health": {"action": "health_check"}},
            }
        }
    },
}

# --- End of DEFAULT_CONFIG modifications ---

class Config:
    """Singleton configuration manager for the voice assistant system"""
    _instance = None
    _config = None
    _config_file = CONFIG_DIR / "config.json"
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(Config, cls).__new__(cls)
            cls._load_config()
        return cls._instance
    
    @classmethod
    def _load_config(cls):
        """Load configuration from file or create default if not exists"""
        try:
            if cls._config_file.exists():
                with open(cls._config_file, 'r') as f:
                    user_config = json.load(f)
                # Merge with default config (default values for missing keys)
                cls._config = cls._deep_merge(DEFAULT_CONFIG, user_config)
                logging.info(f"Loaded configuration from {cls._config_file}")
            else:
                cls._config = DEFAULT_CONFIG
                # Save default config
                cls.save_config()
                logging.info(f"Created default configuration at {cls._config_file}")
        except Exception as e:
            logging.error(f"Error loading configuration: {e}")
            cls._config = DEFAULT_CONFIG
    
    @classmethod
    def _deep_merge(cls, default, override):
        """Deep merge two dictionaries, with override taking precedence"""
        result = default.copy()
        for key, value in override.items():
            if key in result and isinstance(result[key], dict) and isinstance(value, dict):
                result[key] = cls._deep_merge(result[key], value)
            else:
                result[key] = value
        return result
    
    @classmethod
    def get(cls, key_path, default=None):
        """Get a configuration value using dot notation (e.g., 'models.whisper.use_gpu')"""
        if cls._config is None:
            cls._load_config()
            
        keys = key_path.split('.')
        value = cls._config
        
        try:
            for key in keys:
                value = value[key]
            return value
        except (KeyError, TypeError):
            return default
    
    @classmethod
    def set(cls, key_path, value):
        """Set a configuration value using dot notation"""
        if cls._config is None:
            cls._load_config()
            
        keys = key_path.split('.')
        config = cls._config
        
        # Navigate to the nested dictionary
        for key in keys[:-1]:
            if key not in config:
                config[key] = {}
            config = config[key]
        
        # Set the value
        config[keys[-1]] = value
    
    @classmethod
    def save_config(cls):
        """Save the current configuration to file"""
        try:
            with open(cls._config_file, 'w') as f:
                json.dump(cls._config, f, indent=4)
            logging.info(f"Saved configuration to {cls._config_file}")
            return True
        except Exception as e:
            logging.error(f"Error saving configuration: {e}")
            return False
    
    @classmethod
    def get_all(cls):
        """Get the entire configuration dictionary"""
        if cls._config is None:
            cls._load_config()
        return cls._config.copy()  

# Create a global instance for other modules to import
config = Config()

# Function to get machine-specific configuration
def get_config_for_machine():
    machine_role = os.environ.get("MACHINE_ROLE", "MAIN_PC").upper()
    config_instance = Config() 
    full_config = config_instance.get_all()

    # Start with a deep copy of common settings
    machine_config = json.loads(json.dumps(full_config.get("common_settings", {})))  # Always defined locally. No global reference.

    specific_settings_key = None
    if machine_role == "MAIN_PC":
        specific_settings_key = "main_pc_settings"
    elif machine_role == "PC2":
        specific_settings_key = "pc2_settings"
    else:
        logging.warning(f"Unknown MACHINE_ROLE: {machine_role}. Falling back to Main PC specific settings.")
        specific_settings_key = "main_pc_settings"
    
    specific_settings = json.loads(json.dumps(full_config.get(specific_settings_key, {})))

    # Deep merge specific settings into the machine_config. Specific settings take precedence.
    def _deep_update(target, source):
        for key, value in source.items():
            if isinstance(value, dict) and key in target and isinstance(target[key], dict):
                _deep_update(target[key], value)
            else:
                target[key] = value
        return target

    _deep_update(machine_config, specific_settings)
    
    # Ensure all top-level keys from the chosen specific settings are present
    # This handles cases where a key might exist in specific_settings but not in common_settings initially
    for key, value in specific_settings.items():
        if key not in machine_config:
            machine_config[key] = value
            
    return machine_config  # Ensure only returned, never referenced globally.


# Initialize logging
_initial_config_for_logging = Config().get_all() 
_log_level_to_use = _initial_config_for_logging.get("common_settings", {}).get("system", {}).get("log_level", "INFO")

logging.basicConfig(
    level=getattr(logging, _log_level_to_use.upper(), logging.INFO),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(LOGS_DIR / "voice_assistant.log")
    ]
)

# Example of how to use it (can be removed or kept for testing)
if __name__ == "__main__":
    # Test with MAIN_PC role
    os.environ["MACHINE_ROLE"] = "MAIN_PC"
    main_pc_config = get_config_for_machine()
    print("--- MAIN PC Config ---")
    print(f"Main PC Model Manager Port: {main_pc_config.get('model_manager_port')}")
    print(f"Main PC Orchestrator Port: {main_pc_config.get('zmq_ports', {}).get('orchestrator_port')}")
    print(f"Log Level: {main_pc_config.get('system', {}).get('log_level')}")

    # Test with PC2 role
    os.environ["MACHINE_ROLE"] = "PC2"
    pc2_config = get_config_for_machine()
    print("\n--- PC2 Config ---")
    print(f"PC2 Translator Port: {pc2_config.get('zmq_ports', {}).get('translator_port')}")
    print(f"PC2 has model_manager_port: {'model_manager_port' in pc2_config}") 
    print(f"Log Level: {pc2_config.get('system', {}).get('log_level')}")

    # Test with unknown role
    os.environ["MACHINE_ROLE"] = "UNKNOWN_MACHINE"
    unknown_config = get_config_for_machine()
    print("\n--- Unknown Role Config (defaults to Main PC) ---")
    print(f"Model Manager Port: {unknown_config.get('model_manager_port')}")

    # Reset for other modules if they import this
    del os.environ["MACHINE_ROLE"]

# ==========================
# FACE RECOGNITION & HUMAN AWARENESS CONFIGURATION (Main PC)
# ==========================

vision_and_awareness_config = {
    # --- Face Recognition General Section ---
    "face_recognition_general": {
        "enabled": True,
        "recognition_model_path": "models/vision/face_recognition_model.pt",
        "database_path": "data/face_db/known_faces.json",
        "recognition_interval_seconds": 1.0,  # Check every second
        "confidence_threshold_for_identification": 0.75,
        "unknown_face_handling_strategy": "log_and_alert"  # Options: "log_and_alert", "request_identification"
    },

    # --- Human Awareness Section ---
    "human_awareness": {
        "enable_age_recognition": True,
        "age_estimation_model_path": "models/vision/age_estimation_model.pt",
        "enable_emotion_detection": True,
        "emotion_detection_model_path": "models/vision/emotion_detection_model.pt",
        "emotion_reporting_interval_seconds": 2.0,
        "enable_environmental_perception": True,  # Conceptual, can be expanded
        "environmental_keywords_for_alert": [
            "smoke_detected_audio",
            "glass_break_sound",
            "baby_crying",
            "doorbell"
        ],
        "child_safety_module": {
            "enable_child_presence_alert": True,
            "child_face_profiles_in_db": ["child_001", "child_002"],  # IDs from face DB
            "unattended_child_timeout_minutes": 5
        }
    }
}

# ==========================
# ULTIMATE VRAM OPTIMIZATION STRATEGY CONFIGURATION (Main PC)
# ==========================

main_mma_vram_config = {
    # --- VRAM Management Section ---
    "vram_management": {
        "vram_budget_percentage_main_pc": 0.90,  # Use up to 90% of total VRAM
        "dynamic_scaling_thresholds": {
            "high_watermark_percent": 85,  # Aggressive unloading above 85%
            "low_watermark_percent": 60    # Stop unloading below 60%
        },
        "model_priorities": {
            "stt_large": 1,   # Highest priority (lower number = higher priority)
            "stt_base": 2,
            "tts_model": 3
        },
        "default_model_priority": 5,  # Used if model not in model_priorities
        "idle_unload_timeout_seconds": 300,  # Unload idle models after 5 minutes
        "memory_check_interval_seconds": 30  # Check VRAM every 30 seconds
    },

    # --- Model Optimization Section ---
    "model_optimization": {
        "enable_quantization_by_default": True,
        "default_quantization_bits": 8,
        "quantization_options_per_model_type": {
            "llm": {"bits": 4, "group_size": 128},
            "stt": {"bits": 8}
        },
        "enable_model_sharding_if_needed": True,
        "sharding_max_gpus_main_pc": 1  # Only 1 GPU on Main PC for now
    },

    # --- Memory Mapping Section (Conceptual) ---
    "memory_mapping": {
        "enable_unified_memory_if_supported": True,
        "prefer_pinned_memory_for_transfers": True
    },

    # --- Performance Tuning Section ---
    "performance_tuning": {
        "enable_kernel_fusion_if_available": True,
        "enable_flash_attention_if_available": True,
        "batching_strategies": {
            "stt": {"max_batch_size": 8, "dynamic_batching": True}
        }
    },

    # --- Advanced Optimization Section ---
    "advanced_optimization": {
        "enable_tensor_offloading_to_cpu": False,
        "cpu_offload_threshold_percent": 95,
        "enable_hybrid_loading_strategy": False
    },

    # --- Ultimate Performance Section (Experimental) ---
    "ultimate_performance": {
        "enable_speculative_decoding_if_applicable": False,
        "custom_cuda_kernels_path": ""  # Path to custom CUDA kernels if any
    }
}
