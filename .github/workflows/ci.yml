name: AI System CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  schedule:
    # Weekly security scan
    - cron: '0 2 * * 1'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # Code Quality and Linting
  # =============================================================================
  quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch pre-commit
        pip install -e .[dev,security,analysis]
    
    - name: Cache pre-commit
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
    
    - name: Run pre-commit hooks
      run: pre-commit run --all-files --show-diff-on-failure
    
    - name: Code complexity analysis
      run: |
        echo "## Code Complexity Report" >> $GITHUB_STEP_SUMMARY
        radon cc --min B main_pc_code pc2_code >> $GITHUB_STEP_SUMMARY
        radon mi main_pc_code pc2_code >> $GITHUB_STEP_SUMMARY
    
    - name: Dead code detection
      run: vulture main_pc_code pc2_code common --min-confidence 80
    
    - name: Import analysis
      run: |
        pip install pipdeptree
        pipdeptree --warn fail

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[security,analysis]
    
    - name: Run Bandit security scan
      run: |
        bandit -r main_pc_code pc2_code common -f json -o bandit-report.json
        bandit -r main_pc_code pc2_code common -f txt
      continue-on-error: true
    
    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true
    
    - name: Run Semgrep security analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"
      continue-on-error: true
    
    - name: Upload Semgrep results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif
    
    - name: Vulnerability summary
      if: always()
      run: |
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        if [ -f bandit-report.json ]; then
          echo "### Bandit Results" >> $GITHUB_STEP_SUMMARY
          python -c "
          import json
          with open('bandit-report.json') as f:
              data = json.load(f)
          print(f'- Total issues: {len(data.get(\"results\", []))}')
          for result in data.get('results', [])[:5]:
              print(f'- {result[\"issue_severity\"]}: {result[\"test_name\"]} in {result[\"filename\"]}:{result[\"line_number\"]}')
          " >> $GITHUB_STEP_SUMMARY
        fi

  # =============================================================================
  # Testing Matrix
  # =============================================================================
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y redis-server postgresql postgresql-contrib
        sudo systemctl start redis-server
        sudo systemctl start postgresql
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch
        pip install -e .[dev,all]
    
    - name: Create test database
      if: runner.os == 'Linux'
      run: |
        sudo -u postgres createdb aisystem_test
        sudo -u postgres psql -c "CREATE USER aisystem WITH PASSWORD 'test_password';"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE aisystem_test TO aisystem;"
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=main_pc_code --cov=pc2_code --cov=common --cov=events \
          --cov-report=xml --cov-report=term-missing \
          --junit-xml=junit-${{ matrix.os }}-${{ matrix.python-version }}.xml
    
    - name: Run integration tests
      if: runner.os == 'Linux' && matrix.python-version == '3.11'
      env:
        DATABASE_URL: postgresql://aisystem:test_password@localhost/aisystem_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/integration/ -v --maxfail=5
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          junit-*.xml
          htmlcov/
          coverage.xml

  # =============================================================================
  # Performance Testing
  # =============================================================================
  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[performance,monitoring]
    
    - name: Run performance benchmarks
      run: |
        python -m main_pc_code.complexity.performance_optimizer \
          --benchmark --duration=60 --output=performance-report.json
    
    - name: Complexity analysis
      run: |
        python -m main_pc_code.complexity.complexity_analyzer \
          --full-analysis --output=complexity-report.json
    
    - name: Memory leak detection
      run: |
        python -m pytest tests/performance/ -v --memray
      continue-on-error: true
    
    - name: Performance summary
      run: |
        echo "## Performance Analysis" >> $GITHUB_STEP_SUMMARY
        if [ -f performance-report.json ]; then
          python -c "
          import json
          with open('performance-report.json') as f:
              data = json.load(f)
          print(f'- Average CPU usage: {data.get(\"cpu_usage\", \"N/A\")}%')
          print(f'- Memory usage: {data.get(\"memory_usage\", \"N/A\")}MB')
          print(f'- Response time: {data.get(\"response_time\", \"N/A\")}ms')
          " >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload performance artifacts
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          performance-report.json
          complexity-report.json

  # =============================================================================
  # Docker Build and Security Scan
  # =============================================================================
  docker:
    name: Docker Build & Security
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        target: production
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build GPU image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:gpu-latest
        target: gpu-production
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # Documentation Build
  # =============================================================================
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[docs]
    
    - name: Build documentation
      run: mkdocs build --strict
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      run: mkdocs gh-deploy --force

  # =============================================================================
  # Deployment to Staging
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality, security, test, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment script here
        echo "Deployment to staging completed"
    
    - name: Run smoke tests
      run: |
        echo "Running staging smoke tests..."
        # Add smoke test script here
        echo "Smoke tests passed"

  # =============================================================================
  # Production Deployment
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [quality, security, test, docker, deploy-staging]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment script here
        echo "Production deployment completed"
    
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add health check script here
        echo "Health checks passed"
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: "Production deployment ${{ job.status }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # Cleanup
  # =============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Clean up old artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          // Keep artifacts for 30 days
          const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
          
          for (const artifact of artifacts.data.artifacts) {
            const createdAt = new Date(artifact.created_at);
            if (createdAt < thirtyDaysAgo) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
          }