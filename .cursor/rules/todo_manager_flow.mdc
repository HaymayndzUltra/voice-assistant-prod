---
description: todo_manager.py task execution command
alwaysApply: false
---
### **1. TASK EXECUTION COMMANDS:**

**SHOW HIERARCHICAL STRUCTURE:**
```bash
python3 todo_manager.py show TASK_ID --hierarchical
# Shows main TODOs with all sub-steps
# Displays commands ready for execution
```

**EXECUTE SUB-TODO:**
```bash
python3 todo_manager.py exec TASK_ID 4.1
# Executes specific sub-step (4.1)
# Runs the associated command
# Marks as completed automatically
```

**MARK MAIN TODO DONE:**
```bash
python3 todo_manager.py done TASK_ID 4
# Marks main TODO as completed
# Only when all sub-steps (4.1-4.7) are done
```

### **4. ENHANCED WORKFLOW SEQUENCE:**
```bash
# 1. Check hierarchical status
python3 todo_manager.py show TASK_ID --hierarchical

# 2. Execute sub-step with command
python3 todo_manager.py exec TASK_ID 4.1
# â†’ Runs: diff docker-compose.yml docker-compose.yml.backup

# 3. Continue to next sub-step
python3 todo_manager.py exec TASK_ID 4.2
# â†’ Runs: docker-compose build --no-cache

# 4. If sub-step fails, run rollback
python3 todo_manager.py exec TASK_ID 4.7
# â†’ Runs: docker-compose down && echo "ROLLBACK COMPLETED"

# 5. Mark main TODO done when all sub-steps complete
python3 todo_manager.py done TASK_ID 4
```

---

## **ðŸ§  MEMORY SYSTEM INTEGRATION**

### **AUTO-CONTEXT LOADING:**
When Local Agent starts, it automatically reads:
```json
// memory-bank/cursor_session_context.json
{
  "current_focus": "Task execution ready",
  "hierarchical_todos": {...},
  "execution_commands": {...},
  "context_level": "DETAILED_PLAN_READY"
}
```

### **SEAMLESS HANDOVER:**
- Background Agent â†’ prepares everything
- Local Agent â†’ executes with full context
- Zero explanation needed from user
- Instant understanding of the plan

---

## **ðŸ“Š TODO COMPLEXITY LEVELS**

### **SIMPLE TODOS:**
```
[âœ—] 1. Update documentation
    1.1 Edit README.md file
    1.2 Commit changes
```



---

## **ðŸŽ¯ LOCAL AGENT MODE INSTRUCTIONS**

### **WHEN USER MENTIONS TODO/TASK:**
1. **ALWAYS** check current hierarchical structure first
2. **IDENTIFY** which sub-step to execute
3. **SHOW** the specific command to run
4. **EXECUTE** with user approval
5. **MARK** completion and update progress

### **AUTO-ABSORB CONTEXT:**
- Read memory-bank files for background context
- Understand hierarchical TODO structures
- No need for user explanation
- Ready to execute detailed plans immediately

### **EXECUTION PRIORITY:**
- Follow sub-step sequence (4.1 â†’ 4.2 â†’ 4.3...)
- Include error handling steps
- Provide rollback options
- Validate completion before moving forward

---

## **ðŸš€ BEST PRACTICES FOR CURSOR AGENT MODE**

### **1. HIERARCHICAL AWARENESS:**
- Always understand the sub-step structure
- Execute in proper sequence
- Check dependencies between steps

### **2. COMMAND EXECUTION:**
- Show command before running
- Get user approval for critical operations
- Provide clear success/failure feedback

### **3. PROGRESS TRACKING:**
- Mark sub-steps as completed
- Update main TODO status
- Sync progress across sessions

### **4. ERROR HANDLING:**
- Follow rollback procedures when failures occur
- Provide clear error messages
- Suggest next steps for recovery

---

## **ðŸ“± QUICK REFERENCE COMMANDS**

```bash
# Show hierarchical structure
python3 todo_manager.py show TASK_ID --hierarchical

# Execute specific sub-step
python3 todo_manager.py exec TASK_ID 4.1

# Mark main TODO complete
python3 todo_manager.py done TASK_ID 4

# Show all active tasks
python3 todo_manager.py list

# Emergency rollback
python3 todo_manager.py exec TASK_ID X.rollback
```

---

