
from common.config_manager import get_service_ip, get_service_url, get_redis_url
# NATS Error Bus Integration Example for model_orchestrator
# Generated by WP-10 NATS Error Bus Migration

import asyncio
import logging
from common.error_bus import init_error_bus, report_error, report_critical, error_bus_handler, ErrorContext
from common.utils.log_setup import configure_logging

class ModelOrchestratorWithErrorBus:
    """
    Enhanced model_orchestrator with NATS error bus integration
    """
    
    def __init__(self):
        self.agent_name = "model_orchestrator"
        self.error_bus = None
        
        # Setup logging to also use error bus
        self._setup_error_bus_logging()
    
    async def initialize(self):
        """Initialize the agent with error bus"""
        try:
            # Initialize error bus connection
            self.error_bus = await init_error_bus(
                agent_name=self.agent_name,
                nats_servers=["nats://nats_coordination:4222"]
            )
            
            await report_error("AGENT_STARTUP", f"{self.agent_name} initialized successfully", "INFO")
            print(f"{self.agent_name} connected to error bus")
            
        except Exception as e:
            logging.error(f"Failed to initialize error bus: {e}")
            # Continue without error bus - graceful degradation
    
    def _setup_error_bus_logging(self):
        """Setup logging handler that also sends to error bus"""
        class ErrorBusHandler(logging.Handler):
            def __init__(self, agent_name):
                super().__init__()
                self.agent_name = agent_name
            
            def emit(self, record):
                if record.levelno >= logging.ERROR:
                    severity = "CRITICAL" if record.levelno >= logging.CRITICAL else "ERROR"
                    try:
                        loop = asyncio.get_event_loop()
                        loop.create_task(report_error(
                            record.name,
                            record.getMessage(),
                            severity,
                            stack_trace=self.format(record) if record.exc_info else None
                        ))
                    except RuntimeError:
                        pass  # No event loop, skip error bus
        
        # Add error bus handler to logger
        logger = logging.getLogger(self.agent_name)
        error_bus_handler = ErrorBusHandler(self.agent_name)
        logger.addHandler(error_bus_handler)
    
    @error_bus_handler("DATABASE_ERROR", "ERROR")
    async def connect_to_database(self):
        """Example method with automatic error reporting"""
        # Simulate database connection
        if False:  # This would be your actual condition
            raise ConnectionError("Database connection failed")
        
        return "Connected successfully"
    
    async def process_request_with_correlation(self, request_id: str, data: dict):
        """Example of processing with error correlation"""
        with ErrorContext(correlation_id=request_id, context={"request_data": data}):
            try:
                # Your processing logic here
                result = await self._process_data(data)
                
                # Report successful processing
                await report_error("REQUEST_PROCESSED", f"Request {request_id} processed", "INFO")
                
                return result
                
            except ValueError as e:
                # This error will be automatically correlated with the request
                await report_error("VALIDATION_ERROR", str(e), "WARNING")
                raise
            except Exception as e:
                # Critical processing error
                await report_critical(f"Failed to process request {request_id}: {e}")
                raise
    
    async def _process_data(self, data: dict):
        """Simulate data processing"""
        if not data:
            raise ValueError("Empty data provided")
        
        # Simulate processing
        await asyncio.sleep(0.1)
        return {"processed": True, "data": data}
    
    async def monitor_system_health(self):
        """Monitor system health and report issues"""
        import psutil
        
        while True:
            try:
                # Check memory usage
                memory = psutil.virtual_memory()
                if memory.percent > 90:
                    await report_critical(
                        f"High memory usage: {memory.percent}%",
                        context={"memory_available": memory.available, "memory_total": memory.total}
                    )
                
                # Check CPU usage
                cpu_percent = psutil.cpu_percent(interval=1)
                if cpu_percent > 95:
                    await report_error(
                        "HIGH_CPU_USAGE",
                        f"High CPU usage: {cpu_percent}%",
                        "WARNING",
                        context={"cpu_percent": cpu_percent}
                    )
                
                # Check disk space
                disk = psutil.disk_usage('/')
                disk_percent = (disk.used / disk.total) * 100
                if disk_percent > 90:
                    await report_error(
                        "LOW_DISK_SPACE",
                        f"Low disk space: {disk_percent:.1f}%",
                        "WARNING",
                        context={"disk_free": disk.free, "disk_total": disk.total}
                    )
                
                await asyncio.sleep(60)  # Check every minute
                
            except Exception as e:
                await report_error("HEALTH_MONITOR_ERROR", str(e), "ERROR")
                await asyncio.sleep(60)
    
    async def shutdown(self):
        """Graceful shutdown with error reporting"""
        try:
            await report_error("AGENT_SHUTDOWN", f"{self.agent_name} shutting down gracefully", "INFO")
            
            if self.error_bus:
                await self.error_bus.disconnect()
            
        except Exception as e:
            logging.error(f"Error during shutdown: {e}")

# Example usage and testing
async def main():
    agent = ModelOrchestratorWithErrorBus()
    
    try:
        # Initialize
        await agent.initialize()
        
        # Test error reporting
        await agent.connect_to_database()
        
        # Test request processing with correlation
        await agent.process_request_with_correlation("req-123", {"test": "data"})
        
        # Start health monitoring (would run in background)
        health_task = asyncio.create_task(agent.monitor_system_health())
        
        # Simulate running for a while
        await asyncio.sleep(10)
        
        # Clean shutdown
        health_task.cancel()
        await agent.shutdown()
        
    except Exception as e:
        await report_critical(f"Agent failed: {e}")

if __name__ == "__main__":
    # Setup basic logging
    logger = configure_logging(__name__, level="INFO")
    
    # Run the agent
    asyncio.run(main())
