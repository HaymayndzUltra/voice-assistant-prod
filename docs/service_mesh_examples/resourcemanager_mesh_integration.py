
# Service Mesh Integration Example for resourcemanager
# Generated by WP-09 Service Mesh Migration

from common.service_mesh import init_service_mesh, service_mesh_call, get_service_mesh_client
import asyncio

class ResourcemanagerServiceMesh:
    """
    Enhanced resourcemanager with service mesh integration
    """
    
    def __init__(self, port: int = 8080, health_port: int = 8081):
        self.service_name = "resourcemanager"
        self.port = port
        self.health_port = health_port
        
        # Initialize service mesh
        self.mesh_client = init_service_mesh(self.service_name, port, health_port)
        
        print(f"Service mesh initialized for {self.service_name} on port {port}")
    
    @service_mesh_call("model-manager", "/api/v1/models", "GET")
    async def get_available_models(self):
        """Get available models via service mesh"""
        pass  # Implementation handled by decorator
    
    @service_mesh_call("translation-service", "/api/v1/translate", "POST")
    async def translate_text(self, data: dict):
        """Translate text via service mesh"""
        pass  # Implementation handled by decorator
    
    async def call_another_service(self, service_name: str, endpoint: str, data: dict = None):
        """Generic service call via mesh"""
        result = await self.mesh_client.call_service(
            service_name=service_name,
            path=endpoint,
            method="POST" if data else "GET",
            data=data
        )
        return result
    
    def register_with_mesh(self):
        """Register this service with the mesh"""
        self.mesh_client.register_service(
            service_name=self.service_name,
            host="0.0.0.0",  # Will be replaced by pod IP in Kubernetes
            port=self.port,
            health_port=self.health_port
        )

# Example usage:
async def main():
    service = ResourcemanagerServiceMesh()
    
    # Register with service mesh
    service.register_with_mesh()
    
    # Make service calls via mesh
    try:
        models = await service.get_available_models()
        print("Available models:", models)
        
        translation = await service.translate_text({
            "text": "Hello world",
            "target_language": "es"
        })
        print("Translation:", translation)
        
    except Exception as e:
        print(f"Service call failed: {e}")

if __name__ == "__main__":
    asyncio.run(main())
