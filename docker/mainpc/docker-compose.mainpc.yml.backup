version: '3.8'

# MainPC Docker Compose - Primary Monitoring Hub (RTX 4090)
# Architecture: Centralized observability with full analytics

services:
  # Redis - Shared data store
  redis:
    image: redis:7-alpine
    container_name: mainpc-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - ai_system_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Primary ObservabilityHub - Full monitoring + analytics
  observability-hub-primary:
    build:
      context: ../..
      dockerfile: docker/mainpc/Dockerfile.observability
    container_name: mainpc-observability-hub
    ports:
      - "9000:9000"   # Main API
      - "9100:9100"   # Health checks
      - "9090:9090"   # Prometheus metrics
      - "7152:7152"   # ZMQ broadcasting
    environment:
      - HUB_MODE=primary
      - MONITOR_SCOPE=all_systems
      - MACHINE_TYPE=mainpc
      - MACHINE_IP=192.168.100.16
      - PC2_ENDPOINT=http://192.168.100.17:9000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - PROMETHEUS_ENABLED=true
      - PARALLEL_HEALTH_CHECKS=true
      - PREDICTION_ENABLED=true
      - CROSS_MACHINE_SYNC=true
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./cache:/app/cache
      - ./models:/app/models
      - ./main_pc_code/config:/app/main_pc_code/config:ro
      - ./pc2_code/config:/app/pc2_code/config:ro
    networks:
      - ai_system_network
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Core Services Group
  service-registry:
    build:
      context: ../..
      dockerfile: docker/mainpc/Dockerfile.agent
    container_name: mainpc-service-registry
    ports:
      - "7200:7200"
      - "8200:8200"
    environment:
      - AGENT_NAME=ServiceRegistry
      - AGENT_PORT=7200
      - HEALTH_CHECK_PORT=8200
      - AGENT_GROUP=core_services
      - REDIS_HOST=redis
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./main_pc_code/config:/app/main_pc_code/config:ro
    networks:
      - ai_system_network
    depends_on:
      - redis
      - observability-hub-primary
    restart: unless-stopped
    command: python3 main_pc_code/agents/service_registry_agent.py

  system-digital-twin:
    build:
      context: ../..
      dockerfile: docker/mainpc/Dockerfile.agent
    container_name: mainpc-system-digital-twin
    ports:
      - "7220:7220"
      - "8220:8220"
    environment:
      - AGENT_NAME=SystemDigitalTwin
      - AGENT_PORT=7220
      - HEALTH_CHECK_PORT=8220
      - AGENT_GROUP=core_services
      - REDIS_HOST=redis
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./main_pc_code/config:/app/main_pc_code/config:ro
    networks:
      - ai_system_network
    depends_on:
      - service-registry
    restart: unless-stopped
    command: python3 main_pc_code/agents/system_digital_twin.py

  # Model Manager Suite
  model-manager-suite:
    build:
      context: ../..
      dockerfile: docker/mainpc/Dockerfile.agent
    container_name: mainpc-model-manager
    ports:
      - "7211:7211"
      - "8211:8211"
    environment:
      - AGENT_NAME=ModelManagerSuite
      - AGENT_PORT=7211
      - HEALTH_CHECK_PORT=8211
      - AGENT_GROUP=core_services
      - REDIS_HOST=redis
      - PYTHONPATH=/app
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
      - ./main_pc_code/config:/app/main_pc_code/config:ro
    networks:
      - ai_system_network
    depends_on:
      - system-digital-twin
    restart: unless-stopped
    command: python3 main_pc_code/model_manager_suite.py
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  redis_data:
    driver: local

networks:
  ai_system_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1 