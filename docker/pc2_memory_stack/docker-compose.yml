services:
  # Infrastructure - Redis for PC2 Memory Stack
  redis_pc2_memory:
    image: redis:7.2-alpine
    container_name: redis_pc2_memory
    ports:
      - "6391:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_pc2_memory_data:/data
    networks:
      - pc2_memory_stack_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Infrastructure - NATS for PC2 Memory Stack
  nats_pc2_memory:
    image: nats:2.10-alpine
    container_name: nats_pc2_memory
    ports:
      - "4301:4222"
      - "8301:8222"  # HTTP monitoring
    command: [
      "--jetstream",
      "--store_dir", "/data"
    ]
    volumes:
      - nats_pc2_memory_data:/data
    networks:
      - pc2_memory_stack_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4222"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Memory Orchestrator Service - Core memory coordination
  memory_orchestrator:
    build:
      context: ../../
      dockerfile: docker/pc2_memory_stack/Dockerfile
    image: pc2_memory_stack:latest
    container_name: pc2_memory_orchestrator
    command: ["python", "pc2_code/agents/memory_orchestrator_service.py"]
    ports:
      - "7240:7140"   # Service port
      - "8240:8140"   # Health check port
    environment:
      LOG_LEVEL: "INFO"
      PYTHONPATH: "/app"
      REDIS_HOST: "redis_pc2_memory"
      REDIS_PORT: "6379"
      NATS_SERVERS: "nats://nats_pc2_memory:4222"
      PORT: "7140"
      HEALTH_PORT: "8140"
      SCOPE: "pc2_memory_agents"
      PARALLEL_HEALTH_CHECKS: "true"
    volumes:
      - ../../logs:/app/logs
      - ../../data:/app/data
    networks:
      - pc2_memory_stack_network
    depends_on:
      redis_pc2_memory:
        condition: service_healthy
      nats_pc2_memory:
        condition: service_healthy
    restart: unless-stopped

  # Cache Manager - Memory caching and optimization
  cache_manager:
    build:
      context: ../../
      dockerfile: docker/pc2_memory_stack/Dockerfile
    image: pc2_memory_stack:latest
    container_name: pc2_cache_manager
    command: ["python", "pc2_code/agents/cache_manager.py"]
    ports:
      - "7202:7102"   # Service port
      - "8202:8102"   # Health check port
    environment:
      LOG_LEVEL: "INFO"
      PYTHONPATH: "/app"
      REDIS_HOST: "redis_pc2_memory"
      REDIS_PORT: "6379"
      NATS_SERVERS: "nats://nats_pc2_memory:4222"
      PORT: "7102"
      HEALTH_PORT: "8102"
      SCOPE: "pc2_memory_agents"
      CACHE_SIZE: "1GB"
      CACHE_TTL: "3600"
    volumes:
      - ../../logs:/app/logs
      - ../../data:/app/data
      - cache_data:/app/cache
    networks:
      - pc2_memory_stack_network
    depends_on:
      redis_pc2_memory:
        condition: service_healthy
      nats_pc2_memory:
        condition: service_healthy
      memory_orchestrator:
        condition: service_started
    restart: unless-stopped

  # Unified Memory Reasoning Agent - Advanced memory processing
  unified_memory_reasoning:
    build:
      context: ../../
      dockerfile: docker/pc2_memory_stack/Dockerfile
    image: pc2_memory_stack:latest
    container_name: pc2_unified_memory_reasoning
    command: ["python", "pc2_code/agents/unified_memory_reasoning_agent.py"]
    ports:
      - "7220:7120"   # Service port
      - "8220:8120"   # Health check port
    environment:
      LOG_LEVEL: "INFO"
      PYTHONPATH: "/app"
      REDIS_HOST: "redis_pc2_memory"
      REDIS_PORT: "6379"
      NATS_SERVERS: "nats://nats_pc2_memory:4222"
      PORT: "7120"
      HEALTH_PORT: "8120"
      SCOPE: "pc2_memory_agents"
      MEMORY_MODEL: "sentence-transformers/all-MiniLM-L6-v2"
      VECTOR_DIMENSION: "384"
    volumes:
      - ../../logs:/app/logs
      - ../../data:/app/data
      - vector_store:/app/vectors
    networks:
      - pc2_memory_stack_network
    depends_on:
      redis_pc2_memory:
        condition: service_healthy
      nats_pc2_memory:
        condition: service_healthy
      memory_orchestrator:
        condition: service_started
    restart: unless-stopped

  # Context Manager - Context tracking and management
  context_manager:
    build:
      context: ../../
      dockerfile: docker/pc2_memory_stack/Dockerfile
    image: pc2_memory_stack:latest
    container_name: pc2_context_manager
    command: ["python", "pc2_code/agents/context_manager.py"]
    ports:
      - "7250:7150"   # Service port (using different port to avoid vision conflict)
      - "8250:8150"   # Health check port
    environment:
      LOG_LEVEL: "INFO"
      PYTHONPATH: "/app"
      REDIS_HOST: "redis_pc2_memory"
      REDIS_PORT: "6379"
      NATS_SERVERS: "nats://nats_pc2_memory:4222"
      PORT: "7150"
      HEALTH_PORT: "8150"
      SCOPE: "pc2_memory_agents"
      CONTEXT_WINDOW: "10000"
      MAX_CONTEXTS: "1000"
    volumes:
      - ../../logs:/app/logs
      - ../../data:/app/data
      - context_store:/app/contexts
    networks:
      - pc2_memory_stack_network
    depends_on:
      redis_pc2_memory:
        condition: service_healthy
      nats_pc2_memory:
        condition: service_healthy
      memory_orchestrator:
        condition: service_started
    restart: unless-stopped

  # Experience Tracker - Experience and learning tracking
  experience_tracker:
    build:
      context: ../../
      dockerfile: docker/pc2_memory_stack/Dockerfile
    image: pc2_memory_stack:latest
    container_name: pc2_experience_tracker
    command: ["python", "pc2_code/agents/experience_tracker.py"]
    ports:
      - "7260:7160"   # Service port
      - "8260:8160"   # Health check port
    environment:
      LOG_LEVEL: "INFO"
      PYTHONPATH: "/app"
      REDIS_HOST: "redis_pc2_memory"
      REDIS_PORT: "6379"
      NATS_SERVERS: "nats://nats_pc2_memory:4222"
      PORT: "7160"
      HEALTH_PORT: "8160"
      SCOPE: "pc2_memory_agents"
      EXPERIENCE_RETENTION: "30d"
      LEARNING_RATE: "0.001"
    volumes:
      - ../../logs:/app/logs
      - ../../data:/app/data
      - experience_store:/app/experiences
    networks:
      - pc2_memory_stack_network
    depends_on:
      redis_pc2_memory:
        condition: service_healthy
      nats_pc2_memory:
        condition: service_healthy
      memory_orchestrator:
        condition: service_started
    restart: unless-stopped

# Networks
networks:
  pc2_memory_stack_network:
    driver: bridge

# Volumes
volumes:
  redis_pc2_memory_data:
  nats_pc2_memory_data:
  cache_data:
  vector_store:
  context_store:
  experience_store:
