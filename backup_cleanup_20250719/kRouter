[1mdiff --git a/main_pc_code/src/core/task_router.py b/main_pc_code/src/core/task_router.py[m
[1mindex b501e53..2133780 100755[m
[1m--- a/main_pc_code/src/core/task_router.py[m
[1m+++ b/main_pc_code/src/core/task_router.py[m
[36m@@ -24,7 +24,7 @@[m [mimport heapq  # For priority queue[m
 from pathlib import Path[m
 from typing import Dict, List, Optional, Union, Any, Tuple[m
 from src.core.http_server import setup_health_check_server[m
[31m-from utils.config_parser import parse_agent_args[m
[32m+[m[32mfrom main_pc_code.utils.config_parser import parse_agent_args[m
 # Import service discovery and network utilities[m
 from main_pc_code.utils.service_discovery_client import discover_service, get_service_address[m
 from main_pc_code.utils.network_utils import load_network_config, get_current_machine[m
[36m@@ -32,7 +32,7 @@[m [mfrom src.network.secure_zmq import configure_secure_client, configure_secure_ser[m
 import pickle[m
 from main_pc_code.src.memory.zmq_encoding_utils import safe_encode_json, safe_decode_json[m
 [m
[31m-args = parse_agent_args()[m
[32m+[m[32m_agent_args = parse_agent_args()[m
 [m
 # Configure logging[m
 log_dir = 'logs'[m
[36m@@ -47,19 +47,13 @@[m [mlogging.basicConfig([m
 )[m
 logger = logging.getLogger('TaskRouter')[m
 [m
[31m-# Port and Host configuration from command line arguments[m
[31m-TASK_ROUTER_PORT = args.port if args.port else 8571[m
[32m+[m[32m# === ALL CONFIGURATION FROM _agent_args ===[m
[32m+[m[32mTASK_ROUTER_PORT = getattr(_agent_args, 'port', 8571)[m
 TASK_ROUTER_HEALTH_PORT = TASK_ROUTER_PORT + 1[m
[31m-[m
[31m-# Remove hardcoded downstream service connection parameters[m
[31m-# These will be determined dynamically through service discovery[m
[31m-[m
[31m-# Circuit breaker configuration[m
[31m-CIRCUIT_BREAKER_FAILURE_THRESHOLD = 3[m
[31m-CIRCUIT_BREAKER_RESET_TIMEOUT = 30[m
[31m-CIRCUIT_BREAKER_HALF_OPEN_TIMEOUT = 5[m
[31m-[m
[31m-INTERRUPT_PORT = 5576  # Default interrupt port[m
[32m+[m[32mCRIT_BREAK_FAIL = getattr(_agent_args, 'circuit_breaker_failure_threshold', 3)[m
[32m+[m[32mCRIT_BREAK_RESET = getattr(_agent_args, 'circuit_breaker_reset_timeout', 30)[m
[32m+[m[32mCRIT_BREAK_HALF_OPEN = getattr(_agent_args, 'circuit_breaker_half_open_timeout', 5)[m
[32m+[m[32mINTERRUPT_PORT = getattr(_agent_args, 'interrupt_port', 5576)[m
 [m
 class CircuitBreaker:[m
     """[m
[36m@@ -76,9 +70,9 @@[m [mclass CircuitBreaker:[m
     OPEN = 'open'[m
     HALF_OPEN = 'half_open'[m
     [m
[31m-    def __init__(self, name: str, failure_threshold: int = CIRCUIT_BREAKER_FAILURE_THRESHOLD, [m
[31m-                 reset_timeout: int = CIRCUIT_BREAKER_RESET_TIMEOUT,[m
[31m-                 half_open_timeout: int = CIRCUIT_BREAKER_HALF_OPEN_TIMEOUT):[m
[32m+[m[32m    def __init__(self, name: str, failure_threshold: int = CRIT_BREAK_FAIL,[m[41m [m
[32m+[m[32m                 reset_timeout: int = CRIT_BREAK_RESET,[m
[32m+[m[32m                 half_open_timeout: int = CRIT_BREAK_HALF_OPEN):[m
         """Initialize the circuit breaker.[m
         [m
         Args:[m
[36m@@ -193,8 +187,12 @@[m [mclass CircuitBreaker:[m
 class TaskRouter:[m
     """Routes tasks between different services and handles circuit breaking."""[m
 [m
[31m-    def __init__(self, test_ports: Optional[Tuple[int]] = None):[m
[31m-        """Initialize the Task Router Agent."""[m
[32m+[m[32m    def __init__(self, port: int = None, name: str = None, **kwargs):[m
[32m+[m[32m        # === CONFIGURATION FROM _agent_args ===[m
[32m+[m[32m        agent_port = port if port is not None else getattr(_agent_args, 'port', 8571)[m
[32m+[m[32m        agent_name = name if name is not None else getattr(_agent_args, 'name', 'TaskRouter')[m
[32m+[m[32m        self.port = agent_port[m
[32m+[m[32m        self.name = agent_name[m
         self.circuit_breakers = {}[m
         self.service_status = {}[m
         self.running = True[m
[36m@@ -214,7 +212,7 @@[m [mclass TaskRouter:[m
         self.got_tot_socket = None[m
         self.interrupt_socket = None[m
 [m
[31m-        self._init_zmq(test_ports)[m
[32m+[m[32m        self._init_zmq(kwargs.get('test_ports'))[m
         self._init_circuit_breakers()[m
 [m
         self.dispatcher_thread = None[m
[36m@@ -227,7 +225,7 @@[m [mclass TaskRouter:[m
     def _load_configuration(self):[m
         """Load configuration from command-line arguments."""[m
         try:[m
[31m-            self.config = vars(args)[m
[32m+[m[32m            self.config = vars(_agent_args)[m
             logger.info("Configuration loaded successfully")[m
         except Exception as e:[m
             logger.error(f"Error loading configuration: {e}")[m
[36m@@ -236,7 +234,7 @@[m [mclass TaskRouter:[m
     def _init_zmq(self, test_ports: Optional[Tuple[int]] = None):[m
         """Initialize ZMQ sockets."""[m
         # REP socket for incoming tasks[m
[31m-        self.task_port = test_ports[0] if test_ports else TASK_ROUTER_PORT[m
[32m+[m[32m        self.task_port = test_ports[0] if test_ports else self.port[m
         self.task_socket = self.context.socket(zmq.REP)[m
         [m
         if self.secure_zmq:[m
[36m@@ -495,7 +493,7 @@[m [mclass TaskRouter:[m
         circuit_status = {name: cb.get_status() for name, cb in self.circuit_breakers.items()}[m
         [m
         return {[m
[31m-            "agent": "TaskRouter",[m
[32m+[m[32m            "agent": self.name,[m
             "status": "ok",[m
             "timestamp": time.time(),[m
             "queue_size": len(self.task_queue),[m
[36m@@ -577,6 +575,9 @@[m [mclass TaskRouter:[m
         logger.info("Task Router shut down successfully")[m
 [m
 if __name__ == "__main__":[m
[31m-    # Create and run the task router agent[m
[31m-    router = TaskRouter()[m
[31m-    router.run() [m
\ No newline at end of file[m
[32m+[m[32m    # === STANDARDIZED MAIN BLOCK ===[m
[32m+[m[32m    port = getattr(_agent_args, 'port', 8571)[m
[32m+[m[32m    name = getattr(_agent_args, 'name', 'TaskRouter')[m
[32m+[m[32m    logger.info(f"Starting TaskRouter on port {port}")[m
[32m+[m[32m    agent = TaskRouter(port=port, name=name)[m
[32m+[m[32m    agent.run()[m[41m [m
\ No newline at end of file[m
