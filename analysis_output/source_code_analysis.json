{
  "total_agents": 76,
  "analyzed_agents": 71,
  "agents_with_health_checks": 71,
  "total_dependencies": 428,
  "detailed_analysis": {
    "SystemDigitalTwin": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/system_digital_twin.py",
      "lines_of_code": 965,
      "classes": [
        "SystemDigitalTwinAgent",
        "_HealthHandler"
      ],
      "functions": [
        "SystemDigitalTwinAgent.__init__",
        "SystemDigitalTwinAgent.setup",
        "SystemDigitalTwinAgent._setup_zmq",
        "SystemDigitalTwinAgent._register_service",
        "SystemDigitalTwinAgent._setup_prometheus",
        "SystemDigitalTwinAgent._register_self_agent",
        "SystemDigitalTwinAgent._start_metrics_collection",
        "SystemDigitalTwinAgent._register_agent",
        "SystemDigitalTwinAgent.update_agent_status",
        "SystemDigitalTwinAgent.get_all_agent_statuses",
        "SystemDigitalTwinAgent._collect_metrics_loop",
        "SystemDigitalTwinAgent._fetch_current_metrics",
        "SystemDigitalTwinAgent._get_prometheus_value",
        "SystemDigitalTwinAgent._get_current_state",
        "SystemDigitalTwinAgent.get_metrics_history",
        "SystemDigitalTwinAgent.simulate_load",
        "SystemDigitalTwinAgent._get_health_status",
        "SystemDigitalTwinAgent._check_prometheus_connection",
        "SystemDigitalTwinAgent._start_http_health_server",
        "SystemDigitalTwinAgent._update_vram_metrics",
        "SystemDigitalTwinAgent.register_agent",
        "SystemDigitalTwinAgent.get_agent_endpoint",
        "SystemDigitalTwinAgent._forward_to_registry",
        "SystemDigitalTwinAgent.register_agent",
        "SystemDigitalTwinAgent.get_agent_endpoint",
        "SystemDigitalTwinAgent.publish_event",
        "SystemDigitalTwinAgent.report_error",
        "SystemDigitalTwinAgent.handle_request",
        "SystemDigitalTwinAgent._get_ok_agents",
        "SystemDigitalTwinAgent._get_registered_agents",
        "SystemDigitalTwinAgent.get_agent_info",
        "SystemDigitalTwinAgent.run",
        "SystemDigitalTwinAgent.cleanup",
        "SystemDigitalTwinAgent.request_shutdown",
        "__init__",
        "setup",
        "_setup_zmq",
        "_register_service",
        "_setup_prometheus",
        "_register_self_agent",
        "_start_metrics_collection",
        "_register_agent",
        "update_agent_status",
        "get_all_agent_statuses",
        "_collect_metrics_loop",
        "_fetch_current_metrics",
        "_get_prometheus_value",
        "_get_current_state",
        "get_metrics_history",
        "simulate_load",
        "_get_health_status",
        "_check_prometheus_connection",
        "_start_http_health_server",
        "_update_vram_metrics",
        "register_agent",
        "get_agent_endpoint",
        "_forward_to_registry",
        "register_agent",
        "get_agent_endpoint",
        "publish_event",
        "report_error",
        "handle_request",
        "_get_ok_agents",
        "_get_registered_agents",
        "get_agent_info",
        "run",
        "cleanup",
        "request_shutdown",
        "_HealthHandler.do_GET",
        "_HealthHandler.log_message",
        "do_GET",
        "log_message"
      ],
      "health_checks": [
        "__init__->_start_http_health_server",
        "__init__->ping",
        "_start_metrics_collection->is_alive",
        "SystemDigitalTwinAgent.update_agent_status",
        "update_agent_status",
        "SystemDigitalTwinAgent.get_all_agent_statuses",
        "get_all_agent_statuses",
        "SystemDigitalTwinAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->ping",
        "_get_health_status->_check_prometheus_connection",
        "SystemDigitalTwinAgent._check_prometheus_connection",
        "_check_prometheus_connection",
        "_check_prometheus_connection->check_prometheus_connection",
        "SystemDigitalTwinAgent._start_http_health_server",
        "_start_http_health_server",
        "register_agent->update_agent_status",
        "handle_request->get_all_agent_statuses",
        "handle_request->update_agent_status",
        "run->_get_health_status",
        "cleanup->is_alive",
        "__init__->_start_http_health_server",
        "__init__->ping",
        "_start_metrics_collection->is_alive",
        "update_agent_status",
        "get_all_agent_statuses",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->ping",
        "_get_health_status->_check_prometheus_connection",
        "_check_prometheus_connection",
        "_check_prometheus_connection->check_prometheus_connection",
        "_start_http_health_server",
        "register_agent->update_agent_status",
        "handle_request->get_all_agent_statuses",
        "handle_request->update_agent_status",
        "run->_get_health_status",
        "cleanup->is_alive"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "main_pc_code.agents.error_publisher.ErrorPublisher",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "main_pc_code.utils.service_discovery_client.get_service_discovery_client",
        "common.utils.data_models.AgentRegistration"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "pathlib.Path",
        "time",
        "json",
        "logging",
        "threading",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "psutil",
        "sqlite3",
        "redis",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Tuple",
        "typing.Union",
        "typing.cast",
        "typing.TypeVar",
        "main_pc_code.utils.metrics_client.get_metrics_client",
        "main_pc_code.utils.env_loader.get_env",
        "common.utils.data_models.SystemEvent",
        "common.utils.data_models.ErrorReport",
        "common.env_helpers.get_env",
        "http.server.BaseHTTPRequestHandler",
        "http.server.HTTPServer",
        "json",
        "time",
        "os",
        "zmq",
        "traceback",
        "prometheus_api_client.PrometheusConnect",
        "yaml"
      ]
    },
    "RequestCoordinator": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/request_coordinator.py",
      "lines_of_code": 887,
      "classes": [
        "TextRequest",
        "AudioRequest",
        "VisionRequest",
        "AgentResponse",
        "CircuitBreaker",
        "RequestCoordinator"
      ],
      "functions": [
        "is_secure_zmq_enabled",
        "CircuitBreaker.__init__",
        "CircuitBreaker.record_success",
        "CircuitBreaker.record_failure",
        "CircuitBreaker.allow_request",
        "CircuitBreaker.get_status",
        "RequestCoordinator.__init__",
        "RequestCoordinator._init_zmq_sockets",
        "RequestCoordinator._connect_to_service",
        "RequestCoordinator._init_circuit_breakers",
        "RequestCoordinator._listen_for_language_analysis",
        "RequestCoordinator._start_threads",
        "RequestCoordinator._register_service",
        "RequestCoordinator._load_metrics",
        "RequestCoordinator._save_metrics",
        "RequestCoordinator._metrics_reporting_loop",
        "RequestCoordinator._log_metrics",
        "RequestCoordinator._handle_requests",
        "RequestCoordinator._receive_and_validate_message",
        "RequestCoordinator._route_request_by_type",
        "RequestCoordinator._calculate_priority",
        "RequestCoordinator._process_text",
        "RequestCoordinator._process_audio",
        "RequestCoordinator._process_vision",
        "RequestCoordinator.add_task_to_queue",
        "RequestCoordinator._dispatch_loop",
        "RequestCoordinator._process_task",
        "RequestCoordinator._handle_task_response",
        "RequestCoordinator._listen_for_interrupts",
        "RequestCoordinator._check_inactivity",
        "RequestCoordinator._handle_proactive_suggestions",
        "RequestCoordinator.health_check",
        "RequestCoordinator.stop",
        "RequestCoordinator.run",
        "__init__",
        "record_success",
        "record_failure",
        "allow_request",
        "get_status",
        "__init__",
        "_init_zmq_sockets",
        "_connect_to_service",
        "_init_circuit_breakers",
        "_listen_for_language_analysis",
        "_start_threads",
        "_register_service",
        "_load_metrics",
        "_save_metrics",
        "_metrics_reporting_loop",
        "_log_metrics",
        "_handle_requests",
        "_receive_and_validate_message",
        "_route_request_by_type",
        "_calculate_priority",
        "_process_text",
        "_process_audio",
        "_process_vision",
        "add_task_to_queue",
        "_dispatch_loop",
        "_process_task",
        "_handle_task_response",
        "_listen_for_interrupts",
        "_check_inactivity",
        "_handle_proactive_suggestions",
        "health_check",
        "stop",
        "run",
        "_get_health_status",
        "cleanup"
      ],
      "health_checks": [
        "CircuitBreaker.get_status",
        "get_status",
        "RequestCoordinator._check_inactivity",
        "_check_inactivity",
        "RequestCoordinator.health_check",
        "health_check",
        "health_check->get_status",
        "get_status",
        "_check_inactivity",
        "health_check",
        "health_check->get_status",
        "_get_health_status",
        "_get_health_status->_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.config_manager.load_unified_config",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "utils.service_discovery_client.get_service_address",
        "utils.service_discovery_client.register_service"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "json",
        "time",
        "logging",
        "threading",
        "argparse",
        "zmq",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "main_pc_code.utils.network.get_host",
        "psutil",
        "heapq",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "pickle",
        "sys",
        "os",
        "pathlib.Path",
        "utils.env_loader.get_env",
        "common.utils.data_models.TaskDefinition",
        "common.utils.data_models.TaskResult",
        "common.utils.data_models.TaskStatus",
        "common.utils.data_models.SystemEvent",
        "common.utils.data_models.ErrorReport",
        "common.utils.data_models.ErrorSeverity",
        "pydantic.BaseModel",
        "pydantic.Field"
      ]
    },
    "UnifiedSystemAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/unified_system_agent.py",
      "lines_of_code": 496,
      "classes": [
        "UnifiedSystemAgent"
      ],
      "functions": [
        "UnifiedSystemAgent.__init__",
        "UnifiedSystemAgent._create_readiness_file",
        "UnifiedSystemAgent._send_ready_signal",
        "UnifiedSystemAgent._initialize_background",
        "UnifiedSystemAgent._load_config",
        "UnifiedSystemAgent._monitor_services",
        "UnifiedSystemAgent._discover_services",
        "UnifiedSystemAgent._restart_service",
        "UnifiedSystemAgent.handle_request",
        "UnifiedSystemAgent._get_service_status",
        "UnifiedSystemAgent._start_service",
        "UnifiedSystemAgent._stop_service",
        "UnifiedSystemAgent._cleanup_system",
        "UnifiedSystemAgent._get_system_info",
        "UnifiedSystemAgent.run",
        "UnifiedSystemAgent._connect_to_agents",
        "UnifiedSystemAgent.cleanup",
        "UnifiedSystemAgent.stop",
        "UnifiedSystemAgent._get_health_status",
        "__init__",
        "_create_readiness_file",
        "_send_ready_signal",
        "_initialize_background",
        "_load_config",
        "_monitor_services",
        "_discover_services",
        "_restart_service",
        "handle_request",
        "_get_service_status",
        "_start_service",
        "_stop_service",
        "_cleanup_system",
        "_get_system_info",
        "run",
        "_connect_to_agents",
        "cleanup",
        "stop",
        "_get_health_status"
      ],
      "health_checks": [
        "UnifiedSystemAgent._send_ready_signal",
        "_send_ready_signal",
        "_monitor_services",
        "handle_request->_get_health_status",
        "handle_request->_get_service_status",
        "UnifiedSystemAgent._get_service_status",
        "_get_service_status",
        "cleanup->is_alive",
        "UnifiedSystemAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_send_ready_signal",
        "_monitor_services",
        "handle_request->_get_health_status",
        "handle_request->_get_service_status",
        "_get_service_status",
        "cleanup->is_alive",
        "_get_health_status",
        "_get_health_status->_get_health_status"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager",
        "main_pc_code.agents.error_publisher.ErrorPublisher"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "main_pc_code.utils.config_loader.load_config",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "logging",
        "os",
        "sys",
        "yaml",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "datetime.datetime",
        "threading",
        "time",
        "psutil",
        "subprocess",
        "signal",
        "socket",
        "platform",
        "traceback",
        "traceback"
      ]
    },
    "ObservabilityHub": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/phase1_implementation/consolidated_agents/observability_hub/backup_observability_hub/observability_hub.py",
      "lines_of_code": 1685,
      "classes": [
        "HealthMetric",
        "PredictiveAlert",
        "ObservabilityConfig",
        "PrometheusMetrics",
        "PredictiveAnalyzer",
        "AgentLifecycleManager",
        "PerformanceLogger",
        "RecoveryManager",
        "CrossMachineSync",
        "ObservabilityHub"
      ],
      "functions": [
        "PrometheusMetrics.__init__",
        "PrometheusMetrics._setup_metrics",
        "PrometheusMetrics._setup_mock_metrics",
        "PrometheusMetrics.update_agent_health",
        "PrometheusMetrics.update_system_metric",
        "PrometheusMetrics.record_request",
        "PrometheusMetrics.record_response_time",
        "PrometheusMetrics.update_failure_probability",
        "PrometheusMetrics.record_sync_attempt",
        "PredictiveAnalyzer.__init__",
        "PredictiveAnalyzer.add_metric",
        "PredictiveAnalyzer._calculate_failure_probability",
        "PredictiveAnalyzer.run_predictive_analysis",
        "AgentLifecycleManager.__init__",
        "AgentLifecycleManager.load_agent_configs",
        "AgentLifecycleManager.start_agent",
        "AgentLifecycleManager.restart_agent",
        "PerformanceLogger.__init__",
        "PerformanceLogger._init_database",
        "PerformanceLogger.log_metric",
        "PerformanceLogger.get_metrics",
        "PerformanceLogger._cleanup_old_metrics",
        "RecoveryManager.__init__",
        "RecoveryManager.attempt_recovery",
        "RecoveryManager._clear_agent_state",
        "RecoveryManager._restart_dependencies",
        "RecoveryManager._restart_all_agents",
        "CrossMachineSync.__init__",
        "CrossMachineSync.start_sync",
        "CrossMachineSync.stop_sync",
        "CrossMachineSync._sync_loop",
        "CrossMachineSync._check_peer_status",
        "CrossMachineSync._collect_sync_data",
        "ObservabilityHub.__init__",
        "ObservabilityHub._load_configuration",
        "ObservabilityHub._detect_environment",
        "ObservabilityHub.setup_zmq_broadcasting",
        "ObservabilityHub.start_background_threads",
        "ObservabilityHub.check_all_agents_health",
        "ObservabilityHub._check_agent_health_modern",
        "ObservabilityHub._broadcast_metrics",
        "ObservabilityHub._monitoring_loop",
        "ObservabilityHub._analytics_loop",
        "ObservabilityHub._broadcasting_loop",
        "ObservabilityHub._update_system_metrics",
        "ObservabilityHub._collect_all_metrics",
        "ObservabilityHub._prepare_sync_data",
        "ObservabilityHub.setup_routes",
        "ObservabilityHub.cleanup",
        "__init__",
        "_setup_metrics",
        "_setup_mock_metrics",
        "update_agent_health",
        "update_system_metric",
        "record_request",
        "record_response_time",
        "update_failure_probability",
        "record_sync_attempt",
        "__init__",
        "add_metric",
        "_calculate_failure_probability",
        "run_predictive_analysis",
        "__init__",
        "load_agent_configs",
        "start_agent",
        "restart_agent",
        "__init__",
        "_init_database",
        "log_metric",
        "get_metrics",
        "_cleanup_old_metrics",
        "__init__",
        "attempt_recovery",
        "_clear_agent_state",
        "_restart_dependencies",
        "_restart_all_agents",
        "__init__",
        "start_sync",
        "stop_sync",
        "_sync_loop",
        "_check_peer_status",
        "_collect_sync_data",
        "__init__",
        "_load_configuration",
        "_detect_environment",
        "setup_zmq_broadcasting",
        "start_background_threads",
        "check_all_agents_health",
        "_check_agent_health_modern",
        "_broadcast_metrics",
        "_monitoring_loop",
        "_analytics_loop",
        "_broadcasting_loop",
        "_update_system_metrics",
        "_collect_all_metrics",
        "_prepare_sync_data",
        "setup_routes",
        "cleanup"
      ],
      "health_checks": [
        "PrometheusMetrics.update_agent_health",
        "update_agent_health",
        "stop_sync->is_alive",
        "_sync_loop->_check_peer_status",
        "CrossMachineSync._check_peer_status",
        "_check_peer_status",
        "ObservabilityHub.check_all_agents_health",
        "check_all_agents_health",
        "check_all_agents_health->_check_agent_health_modern",
        "check_all_agents_health->update_agent_health",
        "ObservabilityHub._check_agent_health_modern",
        "_check_agent_health_modern",
        "_monitoring_loop",
        "_monitoring_loop->check_all_agents_health",
        "setup_routes->perform_health_check",
        "setup_routes->check_all_agents_health",
        "cleanup->is_alive",
        "cleanup->is_alive",
        "update_agent_health",
        "stop_sync->is_alive",
        "_sync_loop->_check_peer_status",
        "_check_peer_status",
        "check_all_agents_health",
        "check_all_agents_health->_check_agent_health_modern",
        "check_all_agents_health->update_agent_health",
        "_check_agent_health_modern",
        "_monitoring_loop",
        "_monitoring_loop->check_all_agents_health",
        "setup_routes->perform_health_check",
        "setup_routes->check_all_agents_health",
        "cleanup->is_alive",
        "cleanup->is_alive"
      ],
      "agent_dependencies": [
        "common.utils.path_manager.PathManager",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.core.base_agent.BaseAgent"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "logging",
        "time",
        "threading",
        "asyncio",
        "json",
        "concurrent.futures",
        "zmq",
        "sqlite3",
        "pickle",
        "yaml",
        "requests",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "concurrent.futures.ThreadPoolExecutor",
        "dataclasses.dataclass",
        "dataclasses.field",
        "collections.defaultdict",
        "collections.deque",
        "uuid",
        "common.utils.data_models.ErrorSeverity",
        "common.health.standardized_health.StandardizedHealthChecker",
        "common.health.standardized_health.HealthStatus",
        "fastapi.FastAPI",
        "fastapi.HTTPException",
        "fastapi.Request",
        "fastapi.BackgroundTasks",
        "fastapi.responses.JSONResponse",
        "fastapi.responses.PlainTextResponse",
        "uvicorn",
        "numpy",
        "prometheus_client.CollectorRegistry",
        "prometheus_client.Counter",
        "prometheus_client.Gauge",
        "prometheus_client.Histogram",
        "prometheus_client.start_http_server",
        "prometheus_client.push_to_gateway",
        "prometheus_client.generate_latest",
        "prometheus_client.CONTENT_TYPE_LATEST",
        "asyncio",
        "requests",
        "requests",
        "subprocess",
        "shutil",
        "requests",
        "psutil"
      ]
    },
    "ModelManagerSuite": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/model_manager_suite.py",
      "lines_of_code": 1562,
      "classes": [
        "ModelManagerSuite",
        "_LegacyModelManagerProxy",
        "_ZMQStubModule",
        "_ErrorNS",
        "_TorchCudaStub",
        "_TorchStubModule",
        "_BaseModel",
        "_NpStubModule",
        "_RequestsStub",
        "_YamlStub",
        "_PsutilStub",
        "_DummySocket",
        "Context",
        "Poller",
        "ZMQError",
        "_Props",
        "_Resp",
        "_Mem"
      ],
      "functions": [
        "get_main_pc_code",
        "is_port_in_use",
        "wait_for_port",
        "ModelManagerSuite.__init__",
        "ModelManagerSuite.__getattr__",
        "ModelManagerSuite._init_core_components",
        "ModelManagerSuite._init_gguf_management",
        "ModelManagerSuite._init_model_tracking",
        "ModelManagerSuite._init_predictive_loading",
        "ModelManagerSuite._init_evaluation_framework",
        "ModelManagerSuite._init_zmq",
        "ModelManagerSuite._init_error_reporting",
        "ModelManagerSuite._init_circuit_breakers",
        "ModelManagerSuite._init_database",
        "ModelManagerSuite.handle_request",
        "ModelManagerSuite._start_background_threads",
        "ModelManagerSuite._main_loop",
        "ModelManagerSuite._health_check_loop",
        "ModelManagerSuite._vram_management_loop",
        "ModelManagerSuite._prediction_loop",
        "ModelManagerSuite._kv_cache_cleanup_loop",
        "ModelManagerSuite._get_health_status",
        "ModelManagerSuite.report_error",
        "ModelManagerSuite.cleanup",
        "ModelManagerSuite.run",
        "ModelManagerSuite.load_model",
        "ModelManagerSuite.unload_model",
        "ModelManagerSuite.generate_text",
        "ModelManagerSuite.list_models",
        "ModelManagerSuite.health_check",
        "ModelManagerSuite.select_model",
        "ModelManagerSuite._predict_models",
        "ModelManagerSuite._preload_models",
        "ModelManagerSuite._record_model_usage",
        "ModelManagerSuite.log_performance_metric",
        "ModelManagerSuite.log_model_evaluation",
        "ModelManagerSuite._can_accommodate_model",
        "ModelManagerSuite._check_individual_model_health",
        "ModelManagerSuite._load_model_metadata",
        "ModelManagerSuite._check_idle_models",
        "ModelManagerSuite._update_vram_usage",
        "ModelManagerSuite._manage_kv_cache_size",
        "_get_suite_singleton",
        "_LegacyModelManagerProxy.__init__",
        "_LegacyModelManagerProxy.__getattr__",
        "get_instance",
        "__init__",
        "__getattr__",
        "_init_core_components",
        "_init_gguf_management",
        "_init_model_tracking",
        "_init_predictive_loading",
        "_init_evaluation_framework",
        "_init_zmq",
        "_init_error_reporting",
        "_init_circuit_breakers",
        "_init_database",
        "handle_request",
        "_start_background_threads",
        "_main_loop",
        "_health_check_loop",
        "_vram_management_loop",
        "_prediction_loop",
        "_kv_cache_cleanup_loop",
        "_get_health_status",
        "report_error",
        "cleanup",
        "run",
        "load_model",
        "unload_model",
        "generate_text",
        "list_models",
        "health_check",
        "select_model",
        "_predict_models",
        "_preload_models",
        "_record_model_usage",
        "log_performance_metric",
        "log_model_evaluation",
        "_can_accommodate_model",
        "_check_individual_model_health",
        "_load_model_metadata",
        "_check_idle_models",
        "_update_vram_usage",
        "_manage_kv_cache_size",
        "__init__",
        "__getattr__",
        "_TorchCudaStub.is_available",
        "_TorchCudaStub.empty_cache",
        "_TorchCudaStub.memory_allocated",
        "_TorchCudaStub.get_device_properties",
        "_BaseModel.__init__",
        "_BaseModel.dict",
        "_Field",
        "_NpStubModule.array",
        "_NpStubModule.zeros",
        "_RequestsStub.get",
        "_YamlStub.safe_load",
        "_PsutilStub.cpu_percent",
        "_PsutilStub.virtual_memory",
        "_not_implemented_stub",
        "_DummySocket.bind",
        "_DummySocket.setsockopt",
        "_DummySocket.connect",
        "_DummySocket.send_json",
        "_DummySocket.recv_json",
        "_DummySocket.send",
        "_DummySocket.recv",
        "_DummySocket.close",
        "_DummySocket.poll",
        "Context.socket",
        "Context.term",
        "Poller.__init__",
        "Poller.register",
        "Poller.poll",
        "is_available",
        "empty_cache",
        "memory_allocated",
        "get_device_properties",
        "__init__",
        "dict",
        "array",
        "zeros",
        "get",
        "safe_load",
        "cpu_percent",
        "virtual_memory",
        "bind",
        "setsockopt",
        "connect",
        "send_json",
        "recv_json",
        "send",
        "recv",
        "close",
        "poll",
        "socket",
        "term",
        "__init__",
        "register",
        "poll",
        "_Resp.json",
        "json"
      ],
      "health_checks": [
        "handle_request->health_check",
        "ModelManagerSuite._health_check_loop",
        "_health_check_loop",
        "_health_check_loop->_get_health_status",
        "_vram_management_loop->_check_idle_models",
        "ModelManagerSuite._get_health_status",
        "_get_health_status",
        "ModelManagerSuite.health_check",
        "health_check",
        "health_check->_check_individual_model_health",
        "ModelManagerSuite._check_individual_model_health",
        "_check_individual_model_health",
        "ModelManagerSuite._check_idle_models",
        "_check_idle_models",
        "handle_request->health_check",
        "_health_check_loop",
        "_health_check_loop->_get_health_status",
        "_vram_management_loop->_check_idle_models",
        "_get_health_status",
        "health_check",
        "health_check->_check_individual_model_health",
        "_check_individual_model_health",
        "_check_idle_models"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "main_pc_code.utils.config_loader.parse_agent_args",
        "main_pc_code.config.pc2_services_config.load_pc2_services",
        "main_pc_code.config.pc2_services_config.get_service_connection",
        "main_pc_code.config.pc2_services_config.list_available_services",
        "main_pc_code.agents.request_coordinator.CircuitBreaker"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "time",
        "json",
        "logging",
        "threading",
        "sqlite3",
        "uuid",
        "gc",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "traceback",
        "socket",
        "errno",
        "pickle",
        "re",
        "pathlib.Path",
        "common.utils.data_models.ErrorSeverity",
        "common.utils.learning_models.PerformanceMetric",
        "common.utils.learning_models.ModelEvaluationScore",
        "main_pc_code.utils.config_loader.load_config",
        "main_pc_code.utils.config_loader.Config",
        "main_pc_code.config.system_config",
        "sys",
        "zmq",
        "torch",
        "pydantic.BaseModel",
        "pydantic.Field",
        "numpy",
        "requests",
        "yaml",
        "psutil",
        "llama_cpp.Llama",
        "argparse",
        "types",
        "main_pc_code.config.system_config.Config"
      ]
    },
    "MemoryClient": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/memory_client.py",
      "lines_of_code": 691,
      "classes": [
        "CircuitBreaker",
        "MemoryClient"
      ],
      "functions": [
        "get_service_address",
        "CircuitBreaker.__init__",
        "CircuitBreaker.record_success",
        "CircuitBreaker.record_failure",
        "CircuitBreaker.is_closed",
        "CircuitBreaker.get_state",
        "MemoryClient.__init__",
        "MemoryClient._initialize_client_socket",
        "MemoryClient._report_error",
        "MemoryClient._send_request",
        "MemoryClient.set_agent_id",
        "MemoryClient.set_session_id",
        "MemoryClient.create_session",
        "MemoryClient.add_memory",
        "MemoryClient.get_memory",
        "MemoryClient.search_memory",
        "MemoryClient.semantic_search",
        "MemoryClient.update_memory",
        "MemoryClient.delete_memory",
        "MemoryClient.get_children",
        "MemoryClient.add_relationship",
        "MemoryClient.get_related_memories",
        "MemoryClient.reinforce_memory",
        "MemoryClient.batch_add_memories",
        "MemoryClient.batch_get_memories",
        "MemoryClient.create_context_group",
        "MemoryClient.add_to_group",
        "MemoryClient.get_memories_by_group",
        "MemoryClient.get_circuit_breaker_status",
        "MemoryClient.reset_circuit_breaker",
        "MemoryClient.process_request",
        "MemoryClient._get_health_status",
        "__init__",
        "record_success",
        "record_failure",
        "is_closed",
        "get_state",
        "__init__",
        "_initialize_client_socket",
        "_report_error",
        "_send_request",
        "set_agent_id",
        "set_session_id",
        "create_session",
        "add_memory",
        "get_memory",
        "search_memory",
        "semantic_search",
        "update_memory",
        "delete_memory",
        "get_children",
        "add_relationship",
        "get_related_memories",
        "reinforce_memory",
        "batch_add_memories",
        "batch_get_memories",
        "create_context_group",
        "add_to_group",
        "get_memories_by_group",
        "get_circuit_breaker_status",
        "reset_circuit_breaker",
        "process_request",
        "_get_health_status",
        "cleanup"
      ],
      "health_checks": [
        "MemoryClient.get_circuit_breaker_status",
        "get_circuit_breaker_status",
        "process_request->get_circuit_breaker_status",
        "MemoryClient._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "get_circuit_breaker_status",
        "process_request->get_circuit_breaker_status",
        "_get_health_status",
        "_get_health_status->_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager",
        "common.config_manager.load_unified_config"
      ],
      "external_dependencies": [
        "os",
        "json",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "logging",
        "time",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Union"
      ]
    },
    "KnowledgeBase": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/knowledge_base.py",
      "lines_of_code": 259,
      "classes": [
        "KnowledgeBase"
      ],
      "functions": [
        "KnowledgeBase.__init__",
        "KnowledgeBase._report_error",
        "KnowledgeBase.process_request",
        "KnowledgeBase.add_fact",
        "KnowledgeBase.get_fact",
        "KnowledgeBase.update_fact",
        "KnowledgeBase._update_memory_item",
        "KnowledgeBase.search_facts",
        "KnowledgeBase.perform_health_check",
        "KnowledgeBase._get_health_status",
        "KnowledgeBase.cleanup",
        "__init__",
        "_report_error",
        "process_request",
        "add_fact",
        "get_fact",
        "update_fact",
        "_update_memory_item",
        "search_facts",
        "perform_health_check",
        "_get_health_status",
        "cleanup"
      ],
      "health_checks": [
        "KnowledgeBase.perform_health_check",
        "perform_health_check",
        "perform_health_check->_get_health_status",
        "KnowledgeBase._get_health_status",
        "_get_health_status",
        "perform_health_check",
        "perform_health_check->_get_health_status",
        "_get_health_status"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "common.utils.path_manager.PathManager",
        "main_pc_code.agents.memory_client.MemoryClient"
      ],
      "external_dependencies": [
        "os",
        "sys",
        "json",
        "time",
        "logging",
        "pathlib.Path",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "common.env_helpers.get_env"
      ]
    },
    "CodeGenerator": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/code_generator_agent.py",
      "lines_of_code": 374,
      "classes": [
        "CodeGeneratorAgent"
      ],
      "functions": [
        "CodeGeneratorAgent.__init__",
        "CodeGeneratorAgent.run",
        "CodeGeneratorAgent.handle_requests",
        "CodeGeneratorAgent.load_gguf_model",
        "CodeGeneratorAgent.unload_gguf_model",
        "CodeGeneratorAgent.generate_with_gguf",
        "CodeGeneratorAgent.forward_to_model_manager",
        "CodeGeneratorAgent._get_health_status",
        "CodeGeneratorAgent.cleanup",
        "__init__",
        "run",
        "handle_requests",
        "load_gguf_model",
        "unload_gguf_model",
        "generate_with_gguf",
        "forward_to_model_manager",
        "_get_health_status",
        "cleanup"
      ],
      "health_checks": [
        "handle_requests->_get_health_status",
        "CodeGeneratorAgent._get_health_status",
        "_get_health_status",
        "handle_requests->_get_health_status",
        "_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "os",
        "uuid",
        "time",
        "zmq",
        "json",
        "logging",
        "traceback",
        "sys",
        "gc",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Tuple",
        "pathlib.Path",
        "tempfile",
        "re",
        "threading",
        "sys",
        "os",
        "pathlib.Path",
        "main_pc_code.utils.env_loader.get_env",
        "common.env_helpers.get_env",
        "zmq",
        "psutil",
        "datetime.datetime",
        "traceback",
        "requests"
      ]
    },
    "SelfTrainingOrchestrator": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/FORMAINPC/SelfTrainingOrchestrator.py",
      "lines_of_code": 750,
      "classes": [
        "TrainingStatus",
        "ResourceType",
        "TrainingCycle",
        "SelfTrainingOrchestrator"
      ],
      "functions": [
        "SelfTrainingOrchestrator.__init__",
        "SelfTrainingOrchestrator.setup_zmq",
        "SelfTrainingOrchestrator._bind_socket_with_retry",
        "SelfTrainingOrchestrator._health_check_loop",
        "SelfTrainingOrchestrator._get_health_status",
        "SelfTrainingOrchestrator._init_db",
        "SelfTrainingOrchestrator.create_training_cycle",
        "SelfTrainingOrchestrator._validate_resources",
        "SelfTrainingOrchestrator.start_training_cycle",
        "SelfTrainingOrchestrator._check_resource_availability",
        "SelfTrainingOrchestrator._allocate_resources",
        "SelfTrainingOrchestrator._release_resources",
        "SelfTrainingOrchestrator._create_cycle_from_db",
        "SelfTrainingOrchestrator._run_cycle_manager",
        "SelfTrainingOrchestrator._update_cycle_progress",
        "SelfTrainingOrchestrator._complete_cycle",
        "SelfTrainingOrchestrator._cleanup_cycle",
        "SelfTrainingOrchestrator.get_cycle_status",
        "SelfTrainingOrchestrator.handle_request",
        "SelfTrainingOrchestrator.run",
        "SelfTrainingOrchestrator.stop",
        "SelfTrainingOrchestrator.cleanup",
        "__init__",
        "setup_zmq",
        "_bind_socket_with_retry",
        "_health_check_loop",
        "_get_health_status",
        "_init_db",
        "create_training_cycle",
        "_validate_resources",
        "start_training_cycle",
        "_check_resource_availability",
        "_allocate_resources",
        "_release_resources",
        "_create_cycle_from_db",
        "_run_cycle_manager",
        "_update_cycle_progress",
        "_complete_cycle",
        "_cleanup_cycle",
        "get_cycle_status",
        "handle_request",
        "run",
        "stop",
        "cleanup"
      ],
      "health_checks": [
        "SelfTrainingOrchestrator._health_check_loop",
        "_health_check_loop",
        "_health_check_loop->_get_health_status",
        "SelfTrainingOrchestrator._get_health_status",
        "_get_health_status",
        "start_training_cycle->_check_resource_availability",
        "start_training_cycle->is_alive",
        "SelfTrainingOrchestrator._check_resource_availability",
        "_check_resource_availability",
        "_run_cycle_manager->_check_resource_availability",
        "SelfTrainingOrchestrator.get_cycle_status",
        "get_cycle_status",
        "handle_request->_get_health_status",
        "handle_request->_get_health_status",
        "handle_request->_get_health_status",
        "handle_request->get_cycle_status",
        "_health_check_loop",
        "_health_check_loop->_get_health_status",
        "_get_health_status",
        "start_training_cycle->_check_resource_availability",
        "start_training_cycle->is_alive",
        "_check_resource_availability",
        "_run_cycle_manager->_check_resource_availability",
        "get_cycle_status",
        "handle_request->_get_health_status",
        "handle_request->_get_health_status",
        "handle_request->_get_health_status",
        "handle_request->get_cycle_status"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager"
      ],
      "external_dependencies": [
        "zmq",
        "json",
        "logging",
        "sqlite3",
        "threading",
        "time",
        "argparse",
        "os",
        "sys",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "typing.Any",
        "dataclasses.dataclass",
        "enum.Enum",
        "queue.PriorityQueue",
        "main_pc_code.utils.config_loader.load_config",
        "sys",
        "os",
        "pathlib.Path",
        "traceback"
      ]
    },
    "PredictiveHealthMonitor": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/predictive_health_monitor.py",
      "lines_of_code": 1623,
      "classes": [
        "PredictiveHealthMonitor"
      ],
      "functions": [
        "PredictiveHealthMonitor.__init__",
        "PredictiveHealthMonitor._create_tables",
        "PredictiveHealthMonitor._load_model",
        "PredictiveHealthMonitor._monitor_output",
        "PredictiveHealthMonitor._identify_machine",
        "PredictiveHealthMonitor._load_agent_configs",
        "PredictiveHealthMonitor.start_agent",
        "PredictiveHealthMonitor.stop_agent",
        "PredictiveHealthMonitor.restart_agent",
        "PredictiveHealthMonitor.handle_discovery_requests",
        "PredictiveHealthMonitor.optimize_memory",
        "PredictiveHealthMonitor.find_large_files",
        "PredictiveHealthMonitor.optimize_system",
        "PredictiveHealthMonitor._run_windows_disk_cleanup",
        "PredictiveHealthMonitor._get_memory_usage",
        "PredictiveHealthMonitor._format_bytes",
        "PredictiveHealthMonitor._ensure_dependencies",
        "PredictiveHealthMonitor._optimize_memory",
        "PredictiveHealthMonitor._optimization_loop",
        "PredictiveHealthMonitor._needs_optimization",
        "PredictiveHealthMonitor._get_system_metrics",
        "PredictiveHealthMonitor._get_disk_usage",
        "PredictiveHealthMonitor.check_agent_health",
        "PredictiveHealthMonitor._record_health_event",
        "PredictiveHealthMonitor._attempt_recovery",
        "PredictiveHealthMonitor._record_system_metrics",
        "PredictiveHealthMonitor._predict_failures",
        "PredictiveHealthMonitor._send_alert",
        "PredictiveHealthMonitor._run_health_check_loop",
        "PredictiveHealthMonitor._get_health_status",
        "__init__",
        "_create_tables",
        "_load_model",
        "_monitor_output",
        "_identify_machine",
        "_load_agent_configs",
        "start_agent",
        "stop_agent",
        "restart_agent",
        "handle_discovery_requests",
        "optimize_memory",
        "find_large_files",
        "optimize_system",
        "_run_windows_disk_cleanup",
        "_get_memory_usage",
        "_format_bytes",
        "_ensure_dependencies",
        "_optimize_memory",
        "_optimization_loop",
        "_needs_optimization",
        "_get_system_metrics",
        "_get_disk_usage",
        "check_agent_health",
        "_record_health_event",
        "_attempt_recovery",
        "_record_system_metrics",
        "_predict_failures",
        "_send_alert",
        "_run_health_check_loop",
        "_get_health_status",
        "cleanup"
      ],
      "health_checks": [
        "_monitor_output",
        "PredictiveHealthMonitor.check_agent_health",
        "check_agent_health",
        "PredictiveHealthMonitor._record_health_event",
        "_record_health_event",
        "_attempt_recovery->_record_health_event",
        "_attempt_recovery->_record_health_event",
        "_predict_failures->_record_health_event",
        "PredictiveHealthMonitor._run_health_check_loop",
        "_run_health_check_loop",
        "_run_health_check_loop->check_agent_health",
        "_run_health_check_loop->_record_health_event",
        "PredictiveHealthMonitor._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->is_alive",
        "_monitor_output",
        "check_agent_health",
        "_record_health_event",
        "_attempt_recovery->_record_health_event",
        "_attempt_recovery->_record_health_event",
        "_predict_failures->_record_health_event",
        "_run_health_check_loop",
        "_run_health_check_loop->check_agent_health",
        "_run_health_check_loop->_record_health_event",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->is_alive"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.core.base_agent.logger",
        "common.config_manager.load_unified_config"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "logging",
        "socket",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "sys",
        "os",
        "pathlib.Path",
        "main_pc_code.utils.network.get_bind_address",
        "main_pc_code.utils.network.get_host",
        "yaml",
        "time",
        "sys",
        "os",
        "signal",
        "sqlite3",
        "threading",
        "subprocess",
        "platform",
        "psutil",
        "pickle",
        "json",
        "traceback",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "typing.Tuple",
        "datetime.datetime",
        "common.env_helpers.get_env",
        "psutil",
        "psutil",
        "traceback"
      ]
    },
    "FixedStreamingTranslation": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/fixed_streaming_translation.py",
      "lines_of_code": 649,
      "classes": [
        "PerformanceMonitor",
        "TranslationCache",
        "AdvancedTimeoutManager",
        "PerformanceMetrics",
        "FixedStreamingTranslation"
      ],
      "functions": [
        "PerformanceMonitor.__init__",
        "PerformanceMonitor.start",
        "PerformanceMonitor.stop",
        "PerformanceMonitor._monitor_loop",
        "PerformanceMonitor._update_metrics",
        "PerformanceMonitor.get_best_service",
        "PerformanceMonitor.get_service_stats",
        "TranslationCache.__init__",
        "TranslationCache.get",
        "TranslationCache.set",
        "TranslationCache.clear",
        "TranslationCache.cleanup",
        "AdvancedTimeoutManager.__init__",
        "AdvancedTimeoutManager.calculate_timeout",
        "AdvancedTimeoutManager.record_response_time",
        "AdvancedTimeoutManager.get_timeout_stats",
        "AdvancedTimeoutManager.cleanup",
        "PerformanceMetrics.__init__",
        "PerformanceMetrics.record_request",
        "PerformanceMetrics.get_metrics",
        "PerformanceMetrics.reset",
        "PerformanceMetrics.cleanup",
        "FixedStreamingTranslation.__init__",
        "FixedStreamingTranslation.start",
        "FixedStreamingTranslation.shutdown",
        "FixedStreamingTranslation.join",
        "FixedStreamingTranslation.cleanup",
        "FixedStreamingTranslation._get_health_status",
        "FixedStreamingTranslation.health_check",
        "__init__",
        "start",
        "stop",
        "_monitor_loop",
        "_update_metrics",
        "get_best_service",
        "get_service_stats",
        "__init__",
        "get",
        "set",
        "clear",
        "cleanup",
        "__init__",
        "calculate_timeout",
        "record_response_time",
        "get_timeout_stats",
        "cleanup",
        "__init__",
        "record_request",
        "get_metrics",
        "reset",
        "cleanup",
        "__init__",
        "start",
        "shutdown",
        "join",
        "cleanup",
        "_get_health_status",
        "health_check"
      ],
      "health_checks": [
        "_monitor_loop",
        "FixedStreamingTranslation._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->get_queue_status",
        "FixedStreamingTranslation.health_check",
        "health_check",
        "_monitor_loop",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->get_queue_status",
        "health_check"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.config_manager.load_unified_config"
      ],
      "external_dependencies": [
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "logging",
        "time",
        "threading",
        "pathlib.Path",
        "typing.Dict",
        "typing.Optional",
        "typing.List",
        "typing.Tuple",
        "os",
        "re",
        "googletrans.Translator",
        "concurrent.futures.ThreadPoolExecutor",
        "numpy",
        "datetime.datetime",
        "datetime.timedelta",
        "collections.defaultdict",
        "psutil",
        "traceback"
      ]
    },
    "Executor": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/executor.py",
      "lines_of_code": 388,
      "classes": [
        "ExecutorAgent"
      ],
      "functions": [
        "log_usage_analytics",
        "send_log",
        "ExecutorAgent.__init__",
        "ExecutorAgent.authenticate_user",
        "ExecutorAgent.execute_command",
        "ExecutorAgent.send_feedback",
        "ExecutorAgent.run",
        "ExecutorAgent.cleanup",
        "ExecutorAgent.hot_reload_watcher",
        "ExecutorAgent.health_check",
        "ExecutorAgent._get_health_status",
        "__init__",
        "authenticate_user",
        "execute_command",
        "send_feedback",
        "run",
        "cleanup",
        "hot_reload_watcher",
        "health_check",
        "_get_health_status"
      ],
      "health_checks": [
        "ExecutorAgent.health_check",
        "health_check",
        "ExecutorAgent._get_health_status",
        "_get_health_status",
        "health_check",
        "_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config"
      ],
      "external_dependencies": [
        "os",
        "sys",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "subprocess",
        "threading",
        "logging",
        "time",
        "main_pc_code.utils.env_loader.get_env",
        "datetime.datetime",
        "zmq",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "common.env_helpers.get_env",
        "os",
        "traceback",
        "psutil"
      ]
    },
    "TinyLlamaServiceEnhanced": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/FORMAINPC/TinyLlamaServiceEnhanced.py",
      "lines_of_code": 516,
      "classes": [
        "ModelState",
        "GenerationConfig",
        "ResourceManager",
        "TinyLlamaService"
      ],
      "functions": [
        "ResourceManager.__init__",
        "ResourceManager.get_stats",
        "ResourceManager.check_resources",
        "ResourceManager.cleanup",
        "ResourceManager.get_system_load",
        "ResourceManager.get_batch_size",
        "ResourceManager.get_quantization",
        "ResourceManager.use_tensorrt",
        "TinyLlamaService._start_health_check",
        "TinyLlamaService._health_check_loop",
        "TinyLlamaService.__init__",
        "TinyLlamaService.report_error",
        "TinyLlamaService._get_health_status",
        "TinyLlamaService._setup_zmq_socket",
        "TinyLlamaService._load_model",
        "TinyLlamaService._unload_model",
        "TinyLlamaService.generate_text",
        "TinyLlamaService._monitor_resources",
        "TinyLlamaService.handle_request",
        "TinyLlamaService.run",
        "TinyLlamaService.cleanup",
        "__init__",
        "get_stats",
        "check_resources",
        "cleanup",
        "get_system_load",
        "get_batch_size",
        "get_quantization",
        "use_tensorrt",
        "_start_health_check",
        "_health_check_loop",
        "__init__",
        "report_error",
        "_get_health_status",
        "_setup_zmq_socket",
        "_load_model",
        "_unload_model",
        "generate_text",
        "_monitor_resources",
        "handle_request",
        "run",
        "cleanup"
      ],
      "health_checks": [
        "ResourceManager.check_resources",
        "check_resources",
        "TinyLlamaService._start_health_check",
        "_start_health_check",
        "TinyLlamaService._health_check_loop",
        "_health_check_loop",
        "_health_check_loop->_get_health_status",
        "__init__->_start_health_check",
        "TinyLlamaService._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_load_model->check_resources",
        "_monitor_resources",
        "handle_request->_get_health_status",
        "cleanup->is_alive",
        "cleanup->is_alive",
        "check_resources",
        "_start_health_check",
        "_health_check_loop",
        "_health_check_loop->_get_health_status",
        "__init__->_start_health_check",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_load_model->check_resources",
        "_monitor_resources",
        "handle_request->_get_health_status",
        "cleanup->is_alive",
        "cleanup->is_alive"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent"
      ],
      "external_dependencies": [
        "zmq",
        "json",
        "time",
        "logging",
        "sys",
        "os",
        "traceback",
        "threading",
        "pathlib.Path",
        "torch",
        "typing.Dict",
        "typing.Optional",
        "typing.List",
        "typing.Any",
        "dataclasses.dataclass",
        "enum.Enum",
        "psutil",
        "gc",
        "datetime.datetime",
        "main_pc_code.utils.model_client",
        "main_pc_code.config.system_config.config",
        "main_pc_code.utils.config_loader.load_config",
        "torch",
        "traceback"
      ]
    },
    "LocalFineTunerAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/FORMAINPC/LocalFineTunerAgent.py",
      "lines_of_code": 838,
      "classes": [
        "TuningStatus",
        "ArtifactType",
        "TuningJob",
        "LocalFineTunerAgent",
        "ModelClientModel",
        "ModelClientTokenizer"
      ],
      "functions": [
        "LocalFineTunerAgent.__init__",
        "LocalFineTunerAgent._init_db",
        "LocalFineTunerAgent._init_artifact_dir",
        "LocalFineTunerAgent.create_tuning_job",
        "LocalFineTunerAgent.start_tuning_job",
        "LocalFineTunerAgent._create_job_from_db",
        "LocalFineTunerAgent._run_job_manager",
        "LocalFineTunerAgent._execute_tuning_step",
        "LocalFineTunerAgent._record_metrics",
        "LocalFineTunerAgent._save_artifacts",
        "LocalFineTunerAgent._fail_job",
        "LocalFineTunerAgent._cleanup_job",
        "LocalFineTunerAgent.get_job_status",
        "LocalFineTunerAgent.handle_request",
        "LocalFineTunerAgent.run",
        "LocalFineTunerAgent.stop",
        "LocalFineTunerAgent._load_model",
        "LocalFineTunerAgent._prepare_lora_config",
        "LocalFineTunerAgent._initialize_few_shot_model",
        "LocalFineTunerAgent.trigger_few_shot_learning",
        "LocalFineTunerAgent._get_health_status",
        "LocalFineTunerAgent.cleanup",
        "LocalFineTunerAgent.health_check",
        "__init__",
        "_init_db",
        "_init_artifact_dir",
        "create_tuning_job",
        "start_tuning_job",
        "_create_job_from_db",
        "_run_job_manager",
        "_execute_tuning_step",
        "_record_metrics",
        "_save_artifacts",
        "_fail_job",
        "_cleanup_job",
        "get_job_status",
        "handle_request",
        "run",
        "stop",
        "_load_model",
        "_prepare_lora_config",
        "_initialize_few_shot_model",
        "trigger_few_shot_learning",
        "_get_health_status",
        "cleanup",
        "health_check",
        "ModelClientModel.__init__",
        "ModelClientModel.__getattr__",
        "ModelClientTokenizer.__init__",
        "ModelClientTokenizer.__getattr__",
        "__init__",
        "__getattr__",
        "__init__",
        "__getattr__"
      ],
      "health_checks": [
        "start_tuning_job->is_alive",
        "LocalFineTunerAgent.get_job_status",
        "get_job_status",
        "handle_request->_update_health_status",
        "handle_request->get_job_status",
        "stop->is_alive",
        "LocalFineTunerAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->_update_health_status",
        "LocalFineTunerAgent.health_check",
        "health_check",
        "start_tuning_job->is_alive",
        "get_job_status",
        "handle_request->_update_health_status",
        "handle_request->get_job_status",
        "stop->is_alive",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->_update_health_status",
        "health_check"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "zmq",
        "json",
        "logging",
        "sqlite3",
        "threading",
        "time",
        "os",
        "shutil",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "dataclasses.dataclass",
        "enum.Enum",
        "queue.Queue",
        "transformers.Trainer",
        "transformers.TrainingArguments",
        "transformers.AutoModelForCausalLM",
        "transformers.AutoTokenizer",
        "peft.get_peft_model",
        "peft.LoraConfig",
        "peft.TaskType",
        "peft.prepare_model_for_kbit_training",
        "torch",
        "datasets.load_dataset",
        "datasets.Dataset",
        "numpy",
        "typing.Dict",
        "typing.Any",
        "main_pc_code.utils.model_client",
        "sys",
        "os",
        "pathlib.Path",
        "sys",
        "pathlib.Path",
        "psutil",
        "datetime.datetime",
        "main_pc_code.utils.config_loader.load_config",
        "common_utils.zmq_helper.create_socket",
        "traceback"
      ]
    },
    "NLLBAdapter": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/FORMAINPC/NLLBAdapter.py",
      "lines_of_code": 641,
      "classes": [
        "ModelClientModel",
        "ModelClientTokenizer",
        "NLLBTranslationAdapter"
      ],
      "functions": [
        "ModelClientModel.__init__",
        "ModelClientModel.generate",
        "ModelClientModel.to",
        "ModelClientTokenizer.__init__",
        "ModelClientTokenizer.setup_language_mappings",
        "ModelClientTokenizer.__call__",
        "ModelClientTokenizer.batch_decode",
        "NLLBTranslationAdapter.__init__",
        "NLLBTranslationAdapter.report_error",
        "NLLBTranslationAdapter._load_model",
        "NLLBTranslationAdapter._unload_model",
        "NLLBTranslationAdapter.translate_text",
        "NLLBTranslationAdapter._monitor_resources",
        "NLLBTranslationAdapter.handle_requests",
        "NLLBTranslationAdapter.run",
        "NLLBTranslationAdapter._get_health_status",
        "NLLBTranslationAdapter.cleanup",
        "__init__",
        "generate",
        "to",
        "__init__",
        "setup_language_mappings",
        "__call__",
        "batch_decode",
        "__init__",
        "report_error",
        "_load_model",
        "_unload_model",
        "translate_text",
        "_monitor_resources",
        "handle_requests",
        "run",
        "_get_health_status",
        "cleanup"
      ],
      "health_checks": [
        "ModelClientTokenizer.setup_language_mappings",
        "setup_language_mappings",
        "_load_model->setup_language_mappings",
        "_monitor_resources",
        "handle_requests->_get_health_status",
        "NLLBTranslationAdapter._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "cleanup->is_alive",
        "setup_language_mappings",
        "_load_model->setup_language_mappings",
        "_monitor_resources",
        "handle_requests->_get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "cleanup->is_alive"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "time",
        "logging",
        "threading",
        "json",
        "traceback",
        "psutil",
        "torch",
        "zmq",
        "transformers.AutoModelForSeq2SeqLM",
        "transformers.AutoTokenizer",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "pathlib.Path",
        "datetime.datetime",
        "main_pc_code.utils.model_client",
        "main_pc_code.utils.config_loader.load_config",
        "main_pc_code.utils.network_utils.get_zmq_connection_string",
        "main_pc_code.utils.network_utils.get_machine_ip",
        "common.env_helpers.get_env",
        "traceback"
      ]
    },
    "VRAMOptimizerAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/vram_optimizer_agent.py",
      "lines_of_code": 1512,
      "classes": [
        "VramOptimizerAgent"
      ],
      "functions": [
        "VramOptimizerAgent.__init__",
        "VramOptimizerAgent._get_health_status",
        "VramOptimizerAgent._load_configuration",
        "VramOptimizerAgent._init_service_connections",
        "VramOptimizerAgent._init_fallback_connections",
        "VramOptimizerAgent.start_monitoring",
        "VramOptimizerAgent.stop_monitoring",
        "VramOptimizerAgent.get_vram_usage",
        "VramOptimizerAgent._consult_digital_twin",
        "VramOptimizerAgent.can_load_model",
        "VramOptimizerAgent.register_model",
        "VramOptimizerAgent.unregister_model",
        "VramOptimizerAgent.get_least_used_model",
        "VramOptimizerAgent.update_model_usage",
        "VramOptimizerAgent._monitor_vram",
        "VramOptimizerAgent._get_vram_usage_from_sdt",
        "VramOptimizerAgent._get_local_vram_metrics",
        "VramOptimizerAgent._get_loaded_models_from_mma",
        "VramOptimizerAgent._handle_critical_vram",
        "VramOptimizerAgent._handle_high_vram",
        "VramOptimizerAgent._get_models_by_vram_usage",
        "VramOptimizerAgent._get_idle_models",
        "VramOptimizerAgent._request_model_unload",
        "VramOptimizerAgent._predict_usage",
        "VramOptimizerAgent._predict_from_task_router",
        "VramOptimizerAgent._predict_from_usage_patterns",
        "VramOptimizerAgent._request_model_load",
        "VramOptimizerAgent.get_model_stats",
        "VramOptimizerAgent._optimize_memory",
        "VramOptimizerAgent._defragment_memory",
        "VramOptimizerAgent._optimize_batch_sizes",
        "VramOptimizerAgent._apply_kernel_fusion",
        "VramOptimizerAgent._optimize_memory_mapping",
        "VramOptimizerAgent._calculate_fragmentation",
        "VramOptimizerAgent._calculate_optimal_batch_size",
        "VramOptimizerAgent._preload_model",
        "VramOptimizerAgent.get_advanced_stats",
        "VramOptimizerAgent._monitor_idle_models",
        "VramOptimizerAgent._update_model_vram_requirements",
        "VramOptimizerAgent._track_model_usage",
        "VramOptimizerAgent.run",
        "VramOptimizerAgent.cleanup",
        "VramOptimizerAgent.stop",
        "VramOptimizerAgent.process_request",
        "VramOptimizerAgent._health_check",
        "VramOptimizerAgent.health_check",
        "__init__",
        "_get_health_status",
        "_load_configuration",
        "_init_service_connections",
        "_init_fallback_connections",
        "start_monitoring",
        "stop_monitoring",
        "get_vram_usage",
        "_consult_digital_twin",
        "can_load_model",
        "register_model",
        "unregister_model",
        "get_least_used_model",
        "update_model_usage",
        "_monitor_vram",
        "_get_vram_usage_from_sdt",
        "_get_local_vram_metrics",
        "_get_loaded_models_from_mma",
        "_handle_critical_vram",
        "_handle_high_vram",
        "_get_models_by_vram_usage",
        "_get_idle_models",
        "_request_model_unload",
        "_predict_usage",
        "_predict_from_task_router",
        "_predict_from_usage_patterns",
        "_request_model_load",
        "get_model_stats",
        "_optimize_memory",
        "_defragment_memory",
        "_optimize_batch_sizes",
        "_apply_kernel_fusion",
        "_optimize_memory_mapping",
        "_calculate_fragmentation",
        "_calculate_optimal_batch_size",
        "_preload_model",
        "get_advanced_stats",
        "_monitor_idle_models",
        "_update_model_vram_requirements",
        "_track_model_usage",
        "run",
        "cleanup",
        "stop",
        "process_request",
        "_health_check",
        "health_check"
      ],
      "health_checks": [
        "VramOptimizerAgent._get_health_status",
        "_get_health_status",
        "start_monitoring",
        "stop_monitoring",
        "_monitor_vram",
        "VramOptimizerAgent._optimize_memory_mapping",
        "_optimize_memory_mapping",
        "_monitor_idle_models",
        "process_request->_health_check",
        "VramOptimizerAgent._health_check",
        "_health_check",
        "VramOptimizerAgent.health_check",
        "health_check",
        "_get_health_status",
        "start_monitoring",
        "stop_monitoring",
        "_monitor_vram",
        "_optimize_memory_mapping",
        "_monitor_idle_models",
        "process_request->_health_check",
        "_health_check",
        "health_check"
      ],
      "agent_dependencies": [
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "main_pc_code.utils.service_discovery_client.discover_service",
        "main_pc_code.utils.service_discovery_client.get_service_address",
        "main_pc_code.utils.service_discovery_client.register_service",
        "main_pc_code.config.pc2_services_config.get_service_connection"
      ],
      "external_dependencies": [
        "logging",
        "time",
        "threading",
        "zmq",
        "sys",
        "os",
        "json",
        "yaml",
        "pathlib.Path",
        "typing.Dict",
        "typing.Optional",
        "typing.List",
        "typing.Any",
        "typing.Union",
        "torch",
        "psutil",
        "GPUtil",
        "collections.defaultdict",
        "sys",
        "os",
        "pathlib.Path",
        "main_pc_code.src.network.secure_zmq.configure_secure_client",
        "main_pc_code.src.network.secure_zmq.start_auth",
        "main_pc_code.src.network.secure_zmq.configure_secure_server",
        "main_pc_code.src.network.secure_zmq.start_auth",
        "pathlib.Path"
      ]
    },
    "ChainOfThoughtAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/FORMAINPC/ChainOfThoughtAgent.py",
      "lines_of_code": 495,
      "classes": [
        "ChainOfThoughtAgent"
      ],
      "functions": [
        "ChainOfThoughtAgent.__init__",
        "ChainOfThoughtAgent.connect_llm_router",
        "ChainOfThoughtAgent.report_error",
        "ChainOfThoughtAgent.send_to_llm",
        "ChainOfThoughtAgent.generate_problem_breakdown",
        "ChainOfThoughtAgent.generate_solution_for_step",
        "ChainOfThoughtAgent.verify_solution",
        "ChainOfThoughtAgent.refine_solution",
        "ChainOfThoughtAgent.generate_combined_solution",
        "ChainOfThoughtAgent.generate_with_cot",
        "ChainOfThoughtAgent.cleanup",
        "ChainOfThoughtAgent._get_health_status",
        "ChainOfThoughtAgent.health_check",
        "__init__",
        "connect_llm_router",
        "report_error",
        "send_to_llm",
        "generate_problem_breakdown",
        "generate_solution_for_step",
        "verify_solution",
        "refine_solution",
        "generate_combined_solution",
        "generate_with_cot",
        "cleanup",
        "_get_health_status",
        "health_check"
      ],
      "health_checks": [
        "ChainOfThoughtAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "ChainOfThoughtAgent.health_check",
        "health_check",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "health_check"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent"
      ],
      "external_dependencies": [
        "zmq",
        "json",
        "os",
        "threading",
        "time",
        "logging",
        "re",
        "sys",
        "pathlib.Path",
        "datetime.datetime",
        "traceback",
        "psutil",
        "main_pc_code.utils.config_loader.load_config",
        "main_pc_code.utils.config_loader.load_config",
        "main_pc_code.utils.network_utils.get_zmq_connection_string",
        "main_pc_code.utils.network_utils.get_machine_ip",
        "sys",
        "os",
        "pathlib.Path",
        "common.env_helpers.get_env",
        "traceback"
      ]
    },
    "GoTToTAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/FORMAINPC/GOT_TOTAgent.py",
      "lines_of_code": 403,
      "classes": [
        "Node",
        "GoTToTAgent"
      ],
      "functions": [
        "Node.__init__",
        "Node.add_child",
        "GoTToTAgent.__init__",
        "GoTToTAgent._get_health_status",
        "GoTToTAgent._load_reasoning_model",
        "GoTToTAgent._process_loop",
        "GoTToTAgent._handle_request",
        "GoTToTAgent.reason",
        "GoTToTAgent._expand_tree",
        "GoTToTAgent._generate_reasoning_step",
        "GoTToTAgent._fallback_reasoning_step",
        "GoTToTAgent._create_reasoning_prompt",
        "GoTToTAgent._score_path",
        "GoTToTAgent._trace_path",
        "GoTToTAgent.cleanup",
        "__init__",
        "add_child",
        "__init__",
        "_get_health_status",
        "_load_reasoning_model",
        "_process_loop",
        "_handle_request",
        "reason",
        "_expand_tree",
        "_generate_reasoning_step",
        "_fallback_reasoning_step",
        "_create_reasoning_prompt",
        "_score_path",
        "_trace_path",
        "cleanup"
      ],
      "health_checks": [
        "GoTToTAgent._get_health_status",
        "_get_health_status",
        "_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "logging",
        "json",
        "time",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "datetime.datetime",
        "zmq",
        "threading",
        "random",
        "collections.deque",
        "sys",
        "os",
        "pathlib.Path",
        "main_pc_code.utils.model_client",
        "sys",
        "os",
        "main_pc_code.utils.config_loader.load_config",
        "torch",
        "traceback"
      ]
    },
    "CognitiveModelAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/FORMAINPC/CognitiveModelAgent.py",
      "lines_of_code": 377,
      "classes": [
        "CognitiveModelAgent"
      ],
      "functions": [
        "CognitiveModelAgent.__init__",
        "CognitiveModelAgent._initialize_belief_system",
        "CognitiveModelAgent.add_belief",
        "CognitiveModelAgent._check_belief_consistency",
        "CognitiveModelAgent.query_belief_consistency",
        "CognitiveModelAgent.get_belief_system",
        "CognitiveModelAgent.handle_request",
        "CognitiveModelAgent.start",
        "CognitiveModelAgent.process_message",
        "CognitiveModelAgent._get_health_status",
        "CognitiveModelAgent._update_health_status",
        "CognitiveModelAgent.cleanup",
        "CognitiveModelAgent.health_check",
        "__init__",
        "_initialize_belief_system",
        "add_belief",
        "_check_belief_consistency",
        "query_belief_consistency",
        "get_belief_system",
        "handle_request",
        "start",
        "process_message",
        "_get_health_status",
        "_update_health_status",
        "cleanup",
        "health_check"
      ],
      "health_checks": [
        "add_belief->_check_belief_consistency",
        "CognitiveModelAgent._check_belief_consistency",
        "_check_belief_consistency",
        "query_belief_consistency->_check_belief_consistency",
        "CognitiveModelAgent._get_health_status",
        "_get_health_status",
        "CognitiveModelAgent._update_health_status",
        "_update_health_status",
        "CognitiveModelAgent.health_check",
        "health_check",
        "add_belief->_check_belief_consistency",
        "_check_belief_consistency",
        "query_belief_consistency->_check_belief_consistency",
        "_get_health_status",
        "_update_health_status",
        "health_check"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url"
      ],
      "external_dependencies": [
        "os",
        "zmq",
        "json",
        "logging",
        "time",
        "threading",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "networkx",
        "psutil",
        "main_pc_code.utils.config_loader.load_config",
        "traceback"
      ]
    },
    "FaceRecognitionAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/face_recognition_agent.py",
      "lines_of_code": 783,
      "classes": [
        "EmotionState",
        "PrivacyZone",
        "KalmanTracker",
        "EmotionAnalyzer",
        "LivenessDetector",
        "PrivacyManager",
        "FaceRecognitionAgent"
      ],
      "functions": [
        "KalmanTracker.__init__",
        "KalmanTracker.update",
        "KalmanTracker.get_bbox",
        "EmotionAnalyzer.__init__",
        "EmotionAnalyzer._load_emotion_model",
        "EmotionAnalyzer._load_voice_model",
        "EmotionAnalyzer._start_voice_processing",
        "EmotionAnalyzer.analyze_emotion",
        "EmotionAnalyzer.get_emotion_trend",
        "LivenessDetector.__init__",
        "LivenessDetector.detect_blink",
        "LivenessDetector.detect_motion",
        "LivenessDetector.detect_anti_spoofing",
        "LivenessDetector.is_live",
        "PrivacyManager.__init__",
        "PrivacyManager.load_privacy_zones",
        "PrivacyManager.apply_privacy",
        "PrivacyManager._is_in_zone",
        "PrivacyManager.apply_blur",
        "PrivacyManager.cleanup_old_data",
        "FaceRecognitionAgent.__init__",
        "FaceRecognitionAgent._perform_initialization",
        "FaceRecognitionAgent._init_zmq",
        "FaceRecognitionAgent._init_model",
        "FaceRecognitionAgent._init_face_recognizer",
        "FaceRecognitionAgent._init_emotion_analyzer",
        "FaceRecognitionAgent._init_liveness_detector",
        "FaceRecognitionAgent._apply_gpu_optimizations",
        "FaceRecognitionAgent._apply_quantization",
        "FaceRecognitionAgent.run",
        "FaceRecognitionAgent._handle_request",
        "FaceRecognitionAgent._process_frame",
        "FaceRecognitionAgent.stop",
        "FaceRecognitionAgent.health_check",
        "FaceRecognitionAgent._get_health_status",
        "__init__",
        "update",
        "get_bbox",
        "__init__",
        "_load_emotion_model",
        "_load_voice_model",
        "_start_voice_processing",
        "analyze_emotion",
        "get_emotion_trend",
        "__init__",
        "detect_blink",
        "detect_motion",
        "detect_anti_spoofing",
        "is_live",
        "__init__",
        "load_privacy_zones",
        "apply_privacy",
        "_is_in_zone",
        "apply_blur",
        "cleanup_old_data",
        "__init__",
        "_perform_initialization",
        "_init_zmq",
        "_init_model",
        "_init_face_recognizer",
        "_init_emotion_analyzer",
        "_init_liveness_detector",
        "_apply_gpu_optimizations",
        "_apply_quantization",
        "run",
        "_handle_request",
        "_process_frame",
        "stop",
        "health_check",
        "_get_health_status",
        "cleanup",
        "process_voice"
      ],
      "health_checks": [
        "FaceRecognitionAgent.health_check",
        "health_check",
        "FaceRecognitionAgent._get_health_status",
        "_get_health_status",
        "health_check",
        "_get_health_status"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "common.utils.path_manager.PathManager",
        "common.utils.path_manager.PathManager",
        "main_pc_code.agents.error_publisher.ErrorPublisher"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "time",
        "json",
        "logging",
        "traceback",
        "threading",
        "pathlib.Path",
        "sys",
        "os",
        "pathlib.Path",
        "common.env_helpers.get_env",
        "cv2",
        "numpy",
        "insightface",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "collections.defaultdict",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "typing.Any",
        "dataclasses.dataclass",
        "filterpy.kalman.KalmanFilter",
        "torch",
        "torch.nn",
        "torch.nn.functional",
        "torch.utils.data.DataLoader",
        "onnxruntime",
        "scipy.spatial.distance.cosine",
        "sounddevice",
        "librosa",
        "soundfile",
        "main_pc_code.utils.env_loader.get_env",
        "psutil",
        "sys",
        "os",
        "pathlib.Path",
        "traceback"
      ]
    },
    "LearningOrchestrationService": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/learning_orchestration_service.py",
      "lines_of_code": 372,
      "classes": [
        "LearningOrchestrationService"
      ],
      "functions": [
        "LearningOrchestrationService.__init__",
        "LearningOrchestrationService._register_with_service_discovery",
        "LearningOrchestrationService._init_circuit_breakers",
        "LearningOrchestrationService._init_database",
        "LearningOrchestrationService._setup_zmq",
        "LearningOrchestrationService._start_background_threads",
        "LearningOrchestrationService._main_loop",
        "LearningOrchestrationService.handle_request",
        "LearningOrchestrationService._handle_new_opportunity",
        "LearningOrchestrationService._handle_get_training_cycles",
        "LearningOrchestrationService._get_health_status",
        "LearningOrchestrationService.cleanup",
        "__init__",
        "_register_with_service_discovery",
        "_init_circuit_breakers",
        "_init_database",
        "_setup_zmq",
        "_start_background_threads",
        "_main_loop",
        "handle_request",
        "_handle_new_opportunity",
        "_handle_get_training_cycles",
        "_get_health_status",
        "cleanup",
        "safe_uuid"
      ],
      "health_checks": [
        "_main_loop->_get_health_status",
        "LearningOrchestrationService._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_main_loop->_get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "main_pc_code.agents.request_coordinator.CircuitBreaker",
        "main_pc_code.utils.service_discovery_client.get_service_discovery_client"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "time",
        "logging",
        "threading",
        "json",
        "zmq",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "sqlite3",
        "psutil",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.cast",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.data_models.ErrorSeverity",
        "common.utils.learning_models.TrainingCycle",
        "uuid.UUID",
        "typing.List"
      ]
    },
    "LearningOpportunityDetector": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/learning_opportunity_detector.py",
      "lines_of_code": 624,
      "classes": [
        "LearningOpportunityDetector"
      ],
      "functions": [
        "LearningOpportunityDetector.__init__",
        "LearningOpportunityDetector._register_with_service_discovery",
        "LearningOpportunityDetector._init_circuit_breakers",
        "LearningOpportunityDetector._setup_zmq_connections",
        "LearningOpportunityDetector._init_database",
        "LearningOpportunityDetector._start_background_threads",
        "LearningOpportunityDetector._monitor_umra",
        "LearningOpportunityDetector._monitor_coordinator",
        "LearningOpportunityDetector._analyze_interactions",
        "LearningOpportunityDetector._score_interaction",
        "LearningOpportunityDetector._detect_explicit_correction",
        "LearningOpportunityDetector._detect_implicit_correction",
        "LearningOpportunityDetector._detect_positive_reinforcement",
        "LearningOpportunityDetector._detect_question_answer_pattern",
        "LearningOpportunityDetector._detect_complex_reasoning",
        "LearningOpportunityDetector._calculate_final_score",
        "LearningOpportunityDetector._save_learning_opportunity",
        "LearningOpportunityDetector._notify_learning_orchestration_service",
        "LearningOpportunityDetector.get_top_opportunities",
        "LearningOpportunityDetector.mark_opportunity_processed",
        "LearningOpportunityDetector.handle_request",
        "LearningOpportunityDetector._get_health_status",
        "LearningOpportunityDetector.health_check",
        "LearningOpportunityDetector.cleanup",
        "__init__",
        "_register_with_service_discovery",
        "_init_circuit_breakers",
        "_setup_zmq_connections",
        "_init_database",
        "_start_background_threads",
        "_monitor_umra",
        "_monitor_coordinator",
        "_analyze_interactions",
        "_score_interaction",
        "_detect_explicit_correction",
        "_detect_implicit_correction",
        "_detect_positive_reinforcement",
        "_detect_question_answer_pattern",
        "_detect_complex_reasoning",
        "_calculate_final_score",
        "_save_learning_opportunity",
        "_notify_learning_orchestration_service",
        "get_top_opportunities",
        "mark_opportunity_processed",
        "handle_request",
        "_get_health_status",
        "health_check",
        "cleanup"
      ],
      "health_checks": [
        "_monitor_umra",
        "_monitor_coordinator",
        "LearningOpportunityDetector._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "LearningOpportunityDetector.health_check",
        "health_check",
        "health_check->_get_health_status",
        "_monitor_umra",
        "_monitor_coordinator",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "health_check",
        "health_check->_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "main_pc_code.agents.request_coordinator.CircuitBreaker",
        "main_pc_code.utils.service_discovery_client.get_service_discovery_client"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "time",
        "logging",
        "threading",
        "json",
        "zmq",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "sqlite3",
        "psutil",
        "pathlib.Path",
        "datetime.datetime",
        "collections.deque",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "typing.Tuple",
        "uuid.UUID",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.data_models.ErrorSeverity",
        "common.utils.learning_models.LearningOpportunity",
        "common.env_helpers.get_env",
        "main_pc_code.utils.network_utils.get_zmq_connection_string",
        "main_pc_code.utils.network_utils.get_machine_ip"
      ]
    },
    "LearningManager": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/learning_manager.py",
      "lines_of_code": 498,
      "classes": [
        "LearningManager"
      ],
      "functions": [
        "LearningManager.__init__",
        "LearningManager._perform_initialization",
        "LearningManager._init_components",
        "LearningManager._setup_sockets",
        "LearningManager._init_learning_resources",
        "LearningManager._create_learning_session",
        "LearningManager._update_learning_session",
        "LearningManager._get_learning_session",
        "LearningManager._delete_learning_session",
        "LearningManager._adjust_learning_rate",
        "LearningManager.handle_request",
        "LearningManager.health_broadcast_loop",
        "LearningManager.run",
        "LearningManager.stop",
        "LearningManager._get_health_status",
        "LearningManager.cleanup",
        "__init__",
        "_perform_initialization",
        "_init_components",
        "_setup_sockets",
        "_init_learning_resources",
        "_create_learning_session",
        "_update_learning_session",
        "_get_learning_session",
        "_delete_learning_session",
        "_adjust_learning_rate",
        "handle_request",
        "health_broadcast_loop",
        "run",
        "stop",
        "_get_health_status",
        "cleanup"
      ],
      "health_checks": [
        "LearningManager.health_broadcast_loop",
        "health_broadcast_loop",
        "LearningManager._get_health_status",
        "_get_health_status",
        "_get_health_status->is_alive",
        "health_broadcast_loop",
        "_get_health_status",
        "_get_health_status->is_alive"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "zmq",
        "json",
        "time",
        "logging",
        "threading",
        "os",
        "sys",
        "numpy",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "psutil",
        "common.env_helpers.get_env",
        "traceback"
      ]
    },
    "ActiveLearningMonitor": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/active_learning_monitor.py",
      "lines_of_code": 718,
      "classes": [
        "LearningPhase",
        "MetricType",
        "LearningMetric",
        "LearningSession",
        "ActiveLearningMonitor"
      ],
      "functions": [
        "ActiveLearningMonitor.__init__",
        "ActiveLearningMonitor.generate_session_id",
        "ActiveLearningMonitor.start_learning_session",
        "ActiveLearningMonitor.add_metric",
        "ActiveLearningMonitor._calculate_metric_trend",
        "ActiveLearningMonitor._analyze_learning_progress",
        "ActiveLearningMonitor._handle_convergence",
        "ActiveLearningMonitor._handle_stagnation",
        "ActiveLearningMonitor._handle_performance_decline",
        "ActiveLearningMonitor._check_phase_transition",
        "ActiveLearningMonitor._publish_phase_transition",
        "ActiveLearningMonitor.end_learning_session",
        "ActiveLearningMonitor._calculate_session_performance",
        "ActiveLearningMonitor.get_session_status",
        "ActiveLearningMonitor._get_recent_trends",
        "ActiveLearningMonitor._get_performance_indicators",
        "ActiveLearningMonitor.get_global_statistics",
        "ActiveLearningMonitor._monitoring_loop",
        "ActiveLearningMonitor._analysis_loop",
        "ActiveLearningMonitor._analyze_global_patterns",
        "ActiveLearningMonitor.cleanup",
        "__init__",
        "generate_session_id",
        "start_learning_session",
        "add_metric",
        "_calculate_metric_trend",
        "_analyze_learning_progress",
        "_handle_convergence",
        "_handle_stagnation",
        "_handle_performance_decline",
        "_check_phase_transition",
        "_publish_phase_transition",
        "end_learning_session",
        "_calculate_session_performance",
        "get_session_status",
        "_get_recent_trends",
        "_get_performance_indicators",
        "get_global_statistics",
        "_monitoring_loop",
        "_analysis_loop",
        "_analyze_global_patterns",
        "cleanup"
      ],
      "health_checks": [
        "_analyze_learning_progress->_check_phase_transition",
        "ActiveLearningMonitor._check_phase_transition",
        "_check_phase_transition",
        "ActiveLearningMonitor.get_session_status",
        "get_session_status",
        "_monitoring_loop",
        "cleanup->is_alive",
        "cleanup->is_alive",
        "_analyze_learning_progress->_check_phase_transition",
        "_check_phase_transition",
        "get_session_status",
        "_monitoring_loop",
        "cleanup->is_alive",
        "cleanup->is_alive"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url"
      ],
      "external_dependencies": [
        "asyncio",
        "json",
        "threading",
        "time",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.field",
        "enum.Enum",
        "zmq",
        "numpy",
        "common.utils.data_models.ErrorSeverity",
        "asyncio",
        "uuid"
      ]
    },
    "LearningAdjusterAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/FORMAINPC/LearningAdjusterAgent.py",
      "lines_of_code": 567,
      "classes": [
        "ParameterType",
        "ParameterConfig",
        "LearningAdjusterAgent"
      ],
      "functions": [
        "LearningAdjusterAgent.__init__",
        "LearningAdjusterAgent._init_db",
        "LearningAdjusterAgent._update_health_status",
        "LearningAdjusterAgent.register_parameter",
        "LearningAdjusterAgent.adjust_parameter",
        "LearningAdjusterAgent.record_performance",
        "LearningAdjusterAgent.optimize_parameters",
        "LearningAdjusterAgent._get_active_parameters",
        "LearningAdjusterAgent._analyze_parameter_trend",
        "LearningAdjusterAgent._get_health_status",
        "LearningAdjusterAgent.handle_request",
        "LearningAdjusterAgent.run",
        "LearningAdjusterAgent.cleanup",
        "LearningAdjusterAgent.health_check",
        "__init__",
        "_init_db",
        "_update_health_status",
        "register_parameter",
        "adjust_parameter",
        "record_performance",
        "optimize_parameters",
        "_get_active_parameters",
        "_analyze_parameter_trend",
        "_get_health_status",
        "handle_request",
        "run",
        "cleanup",
        "health_check"
      ],
      "health_checks": [
        "LearningAdjusterAgent._update_health_status",
        "_update_health_status",
        "LearningAdjusterAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->_update_health_status",
        "handle_request->_update_health_status",
        "handle_request->_get_health_status",
        "LearningAdjusterAgent.health_check",
        "health_check",
        "_update_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->_update_health_status",
        "handle_request->_update_health_status",
        "handle_request->_get_health_status",
        "health_check"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "zmq",
        "json",
        "logging",
        "sqlite3",
        "numpy",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "dataclasses.dataclass",
        "enum.Enum",
        "time",
        "threading",
        "typing.Dict",
        "typing.Any",
        "argparse",
        "sys",
        "os",
        "pathlib.Path",
        "sys",
        "pathlib.Path",
        "psutil",
        "main_pc_code.utils.config_loader.load_config",
        "common_utils.zmq_helper.create_socket",
        "traceback"
      ]
    },
    "ModelOrchestrator": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/model_orchestrator.py",
      "lines_of_code": 774,
      "classes": [
        "ModelOrchestrator"
      ],
      "functions": [
        "ModelOrchestrator.__init__",
        "ModelOrchestrator._get_language_configs",
        "ModelOrchestrator._init_circuit_breakers",
        "ModelOrchestrator._init_embedding_model",
        "ModelOrchestrator.setup_error_reporting",
        "ModelOrchestrator.report_error",
        "ModelOrchestrator._load_task_embeddings",
        "ModelOrchestrator._load_metrics",
        "ModelOrchestrator._save_metrics",
        "ModelOrchestrator._metrics_reporting_loop",
        "ModelOrchestrator._log_metrics",
        "ModelOrchestrator._build_context_prompt",
        "ModelOrchestrator._send_to_llm",
        "ModelOrchestrator._execute_code_safely",
        "ModelOrchestrator._resilient_send_request",
        "ModelOrchestrator.handle_request",
        "ModelOrchestrator._classify_task",
        "ModelOrchestrator._keyword_based_classification",
        "ModelOrchestrator._handle_chat_task",
        "ModelOrchestrator._handle_reasoning_task",
        "ModelOrchestrator._handle_tool_use_task",
        "ModelOrchestrator._handle_code_generation_task",
        "ModelOrchestrator._get_health_status",
        "ModelOrchestrator.health_check",
        "ModelOrchestrator.cleanup",
        "__init__",
        "_get_language_configs",
        "_init_circuit_breakers",
        "_init_embedding_model",
        "setup_error_reporting",
        "report_error",
        "_load_task_embeddings",
        "_load_metrics",
        "_save_metrics",
        "_metrics_reporting_loop",
        "_log_metrics",
        "_build_context_prompt",
        "_send_to_llm",
        "_execute_code_safely",
        "_resilient_send_request",
        "handle_request",
        "_classify_task",
        "_keyword_based_classification",
        "_handle_chat_task",
        "_handle_reasoning_task",
        "_handle_tool_use_task",
        "_handle_code_generation_task",
        "_get_health_status",
        "health_check",
        "cleanup"
      ],
      "health_checks": [
        "ModelOrchestrator._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "ModelOrchestrator.health_check",
        "health_check",
        "cleanup->is_alive",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "health_check",
        "cleanup->is_alive"
      ],
      "agent_dependencies": [
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "main_pc_code.agents.request_coordinator.CircuitBreaker",
        "main_pc_code.agents.error_bus_client.ErrorBusClient"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "time",
        "logging",
        "threading",
        "json",
        "uuid",
        "re",
        "subprocess",
        "zmq",
        "tempfile",
        "numpy",
        "pathlib.Path",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "pickle",
        "datetime.datetime",
        "psutil",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.data_models.TaskDefinition",
        "common.utils.data_models.TaskResult",
        "common.utils.data_models.TaskStatus",
        "common.utils.data_models.ErrorSeverity",
        "sentence_transformers.SentenceTransformer"
      ]
    },
    "GoalManager": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/goal_manager.py",
      "lines_of_code": 691,
      "classes": [
        "CircuitBreaker",
        "GoalManager"
      ],
      "functions": [
        "CircuitBreaker.__init__",
        "CircuitBreaker.record_success",
        "CircuitBreaker.record_failure",
        "CircuitBreaker.allow_request",
        "GoalManager.__init__",
        "GoalManager._init_circuit_breakers",
        "GoalManager._start_background_threads",
        "GoalManager._load_active_goals",
        "GoalManager._load_tasks_for_goal",
        "GoalManager.handle_request",
        "GoalManager.set_goal",
        "GoalManager.get_goal_status",
        "GoalManager.list_goals",
        "GoalManager.search_goals",
        "GoalManager._break_down_goal",
        "GoalManager._update_goal_status",
        "GoalManager._process_task_queue",
        "GoalManager._execute_task",
        "GoalManager._update_task_status",
        "GoalManager._update_goal_progress",
        "GoalManager._monitor_goals",
        "GoalManager._resilient_send_request",
        "GoalManager._get_health_status",
        "GoalManager.cleanup",
        "__init__",
        "record_success",
        "record_failure",
        "allow_request",
        "__init__",
        "_init_circuit_breakers",
        "_start_background_threads",
        "_load_active_goals",
        "_load_tasks_for_goal",
        "handle_request",
        "set_goal",
        "get_goal_status",
        "list_goals",
        "search_goals",
        "_break_down_goal",
        "_update_goal_status",
        "_process_task_queue",
        "_execute_task",
        "_update_task_status",
        "_update_goal_progress",
        "_monitor_goals",
        "_resilient_send_request",
        "_get_health_status",
        "cleanup"
      ],
      "health_checks": [
        "GoalManager.get_goal_status",
        "get_goal_status",
        "_break_down_goal->_update_goal_status",
        "_break_down_goal->_update_goal_status",
        "_break_down_goal->_update_goal_status",
        "GoalManager._update_goal_status",
        "_update_goal_status",
        "_execute_task->_update_task_status",
        "_execute_task->_update_task_status",
        "_execute_task->_update_task_status",
        "_execute_task->_update_task_status",
        "GoalManager._update_task_status",
        "_update_task_status",
        "_update_goal_progress->_update_goal_status",
        "_update_goal_progress->_update_goal_status",
        "_monitor_goals",
        "GoalManager._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "get_goal_status",
        "_break_down_goal->_update_goal_status",
        "_break_down_goal->_update_goal_status",
        "_break_down_goal->_update_goal_status",
        "_update_goal_status",
        "_execute_task->_update_task_status",
        "_execute_task->_update_task_status",
        "_execute_task->_update_task_status",
        "_execute_task->_update_task_status",
        "_update_task_status",
        "_update_goal_progress->_update_goal_status",
        "_update_goal_progress->_update_goal_status",
        "_monitor_goals",
        "_get_health_status",
        "_get_health_status->_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "main_pc_code.agents.memory_client.MemoryClient",
        "common.config_manager.load_unified_config"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "time",
        "logging",
        "threading",
        "uuid",
        "heapq",
        "json",
        "pathlib.Path",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "datetime.datetime",
        "zmq",
        "sys",
        "os",
        "pathlib.Path",
        "common.utils.data_models.TaskDefinition",
        "common.utils.data_models.TaskResult",
        "common.utils.data_models.TaskStatus",
        "common.utils.data_models.ErrorSeverity"
      ]
    },
    "IntentionValidatorAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/IntentionValidatorAgent.py",
      "lines_of_code": 452,
      "classes": [
        "IntentionType",
        "ConfidenceLevel",
        "ValidationResult",
        "IntentionValidatorAgent"
      ],
      "functions": [
        "IntentionValidatorAgent.__init__",
        "IntentionValidatorAgent.extract_entities",
        "IntentionValidatorAgent.calculate_intention_confidence",
        "IntentionValidatorAgent.validate_intention",
        "IntentionValidatorAgent._generate_suggested_response",
        "IntentionValidatorAgent._update_statistics",
        "IntentionValidatorAgent._publish_validation_result",
        "IntentionValidatorAgent.get_validation_statistics",
        "IntentionValidatorAgent.process_batch_validation",
        "IntentionValidatorAgent._background_processing",
        "IntentionValidatorAgent.cleanup",
        "__init__",
        "extract_entities",
        "calculate_intention_confidence",
        "validate_intention",
        "_generate_suggested_response",
        "_update_statistics",
        "_publish_validation_result",
        "get_validation_statistics",
        "process_batch_validation",
        "_background_processing",
        "cleanup"
      ],
      "health_checks": [
        "cleanup->is_alive",
        "cleanup->is_alive"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url"
      ],
      "external_dependencies": [
        "asyncio",
        "json",
        "re",
        "time",
        "threading",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "enum.Enum",
        "zmq",
        "common.utils.data_models.ErrorSeverity",
        "asyncio"
      ]
    },
    "NLUAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/nlu_agent.py",
      "lines_of_code": 383,
      "classes": [
        "NLUAgent"
      ],
      "functions": [
        "NLUAgent.__init__",
        "NLUAgent._perform_initialization",
        "NLUAgent.start",
        "NLUAgent.stop",
        "NLUAgent._handle_requests",
        "NLUAgent._process_request",
        "NLUAgent._analyze_text",
        "NLUAgent._extract_intent",
        "NLUAgent._extract_entities",
        "NLUAgent._get_health_status",
        "NLUAgent.health_check",
        "NLUAgent.cleanup",
        "__init__",
        "_perform_initialization",
        "start",
        "stop",
        "_handle_requests",
        "_process_request",
        "_analyze_text",
        "_extract_intent",
        "_extract_entities",
        "_get_health_status",
        "health_check",
        "cleanup"
      ],
      "health_checks": [
        "NLUAgent._get_health_status",
        "_get_health_status",
        "NLUAgent.health_check",
        "health_check",
        "_get_health_status",
        "health_check"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.core.base_agent.BaseAgent",
        "main_pc_code.agents.error_publisher.ErrorPublisher",
        "common.config_manager.load_unified_config",
        "common.utils.path_manager.PathManager"
      ],
      "external_dependencies": [
        "os",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "time",
        "logging",
        "re",
        "threading",
        "traceback",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Tuple",
        "sys",
        "os",
        "pathlib.Path"
      ]
    },
    "AdvancedCommandHandler": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/advanced_command_handler.py",
      "lines_of_code": 530,
      "classes": [
        "AdvancedCommandHandler"
      ],
      "functions": [
        "AdvancedCommandHandler.__init__",
        "AdvancedCommandHandler.load_domain_modules",
        "AdvancedCommandHandler.get_domain_commands",
        "AdvancedCommandHandler.get_available_domains",
        "AdvancedCommandHandler.toggle_domain",
        "AdvancedCommandHandler.detect_command_registration",
        "AdvancedCommandHandler.register_command",
        "AdvancedCommandHandler._parse_sequence",
        "AdvancedCommandHandler.execute_command",
        "AdvancedCommandHandler._execute_sequence",
        "AdvancedCommandHandler._execute_script",
        "AdvancedCommandHandler.get_running_processes",
        "AdvancedCommandHandler._update_process_status",
        "AdvancedCommandHandler.stop_process",
        "AdvancedCommandHandler.process_command_registration",
        "AdvancedCommandHandler._get_health_status",
        "AdvancedCommandHandler.cleanup",
        "AdvancedCommandHandler.run",
        "__init__",
        "load_domain_modules",
        "get_domain_commands",
        "get_available_domains",
        "toggle_domain",
        "detect_command_registration",
        "register_command",
        "_parse_sequence",
        "execute_command",
        "_execute_sequence",
        "_execute_script",
        "get_running_processes",
        "_update_process_status",
        "stop_process",
        "process_command_registration",
        "_get_health_status",
        "cleanup",
        "run"
      ],
      "health_checks": [
        "get_running_processes->_update_process_status",
        "AdvancedCommandHandler._update_process_status",
        "_update_process_status",
        "AdvancedCommandHandler._get_health_status",
        "_get_health_status",
        "get_running_processes->_update_process_status",
        "_update_process_status",
        "_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "main_pc_code.agents.needtoverify.custom_command_handler.CustomCommandHandler",
        "main_pc_code.agents.needtoverify.custom_command_handler.ZMQ_JARVIS_MEMORY_PORT",
        "common.config_manager.load_unified_config"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "json",
        "logging",
        "time",
        "sys",
        "os",
        "re",
        "uuid",
        "subprocess",
        "threading",
        "importlib.util",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "psutil",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "common.env_helpers.get_env",
        "traceback"
      ]
    },
    "FeedbackHandler": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/feedback_handler.py",
      "lines_of_code": 441,
      "classes": [
        "FeedbackHandler"
      ],
      "functions": [
        "FeedbackHandler.__init__",
        "FeedbackHandler.send_visual_feedback",
        "FeedbackHandler.send_voice_feedback",
        "FeedbackHandler.send_combined_feedback",
        "FeedbackHandler.send_command_feedback",
        "FeedbackHandler.show_processing",
        "FeedbackHandler.clear_processing",
        "FeedbackHandler._try_reconnect_gui",
        "FeedbackHandler._try_reconnect_voice",
        "FeedbackHandler._check_connections",
        "FeedbackHandler.shutdown",
        "FeedbackHandler._perform_initialization",
        "FeedbackHandler._get_health_status",
        "FeedbackHandler.health_check",
        "__init__",
        "send_visual_feedback",
        "send_voice_feedback",
        "send_combined_feedback",
        "send_command_feedback",
        "show_processing",
        "clear_processing",
        "_try_reconnect_gui",
        "_try_reconnect_voice",
        "_check_connections",
        "shutdown",
        "_perform_initialization",
        "_get_health_status",
        "health_check",
        "cleanup"
      ],
      "health_checks": [
        "FeedbackHandler._check_connections",
        "_check_connections",
        "FeedbackHandler._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "FeedbackHandler.health_check",
        "health_check",
        "_check_connections",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "health_check"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "main_pc_code.agents.error_publisher.ErrorPublisher",
        "common.config_manager.load_unified_config"
      ],
      "external_dependencies": [
        "logging",
        "os",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "pickle",
        "threading",
        "time",
        "json",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "psutil",
        "common.env_helpers.get_env",
        "traceback"
      ]
    },
    "Responder": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/responder.py",
      "lines_of_code": 904,
      "classes": [
        "Responder"
      ],
      "functions": [
        "is_secure_zmq_enabled",
        "configure_secure_client",
        "configure_secure_server",
        "add_all_safe_globals",
        "Responder.__init__",
        "Responder._connect_to_services",
        "Responder._connect_to_tts_services",
        "Responder._refresh_service_connections",
        "Responder._load_tts_model",
        "Responder.face_recognition_listener",
        "Responder._interrupt_listener",
        "Responder._send_stop_to_tts_services",
        "Responder._start_interrupt_thread",
        "Responder.process_message",
        "Responder.speak",
        "Responder._show_visual_feedback",
        "Responder._is_light_color",
        "Responder._modulate_audio",
        "Responder.generate_response",
        "Responder.start",
        "Responder.cleanup_old_face_data",
        "Responder.add_user_voice_profile",
        "Responder.stop",
        "Responder.hot_reload_watcher",
        "Responder.health_check",
        "Responder._monitor_health",
        "Responder._get_health_status",
        "__init__",
        "_connect_to_services",
        "_connect_to_tts_services",
        "_refresh_service_connections",
        "_load_tts_model",
        "face_recognition_listener",
        "_interrupt_listener",
        "_send_stop_to_tts_services",
        "_start_interrupt_thread",
        "process_message",
        "speak",
        "_show_visual_feedback",
        "_is_light_color",
        "_modulate_audio",
        "generate_response",
        "start",
        "cleanup_old_face_data",
        "add_user_voice_profile",
        "stop",
        "hot_reload_watcher",
        "health_check",
        "_monitor_health",
        "_get_health_status",
        "show_overlay"
      ],
      "health_checks": [
        "start->health_check",
        "Responder.health_check",
        "health_check",
        "Responder._monitor_health",
        "_monitor_health",
        "Responder._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "start->health_check",
        "health_check",
        "_monitor_health",
        "_get_health_status",
        "_get_health_status->_get_health_status"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.config_manager.load_unified_config",
        "main_pc_code.utils.service_discovery_client.discover_service",
        "main_pc_code.utils.service_discovery_client.get_service_address",
        "common.utils.path_manager.PathManager",
        "main_pc_code.agents.common_tagalog_phrases.translate_common_phrase",
        "main_pc_code.agents.common_tagalog_phrases.check_and_replace_common_phrases",
        "main_pc_code.agents.common_tagalog_phrases.TAGALOG_TO_ENGLISH",
        "main_pc_code.agents.common_tagalog_phrases.ENGLISH_TO_TAGALOG"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "sys",
        "os",
        "pathlib.Path",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "sounddevice",
        "numpy",
        "threading",
        "queue",
        "TTS.api.TTS",
        "torch",
        "logging",
        "time",
        "pickle",
        "main_pc_code.utils.env_loader.get_env",
        "TTS.api.TTS",
        "tkinter",
        "threading",
        "traceback"
      ]
    },
    "TranslationService": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/translation_service.py",
      "lines_of_code": 2228,
      "classes": [
        "AdvancedTimeoutManager",
        "ConnectionManager",
        "BaseEngineClient",
        "NLLBEngineClient",
        "StreamingEngineClient",
        "RemoteGoogleEngineClient",
        "DictionaryEngineClient",
        "LanguageDetector",
        "TranslationCache",
        "SessionManager",
        "LocalPatternEngineClient",
        "EmergencyWordEngineClient",
        "EngineManager",
        "TranslationService"
      ],
      "functions": [
        "is_secure_zmq_enabled",
        "AdvancedTimeoutManager.__init__",
        "AdvancedTimeoutManager.calculate_timeout",
        "AdvancedTimeoutManager.record_response_time",
        "AdvancedTimeoutManager._get_length_bucket",
        "ConnectionManager.__init__",
        "ConnectionManager._create_socket",
        "ConnectionManager.get_socket",
        "ConnectionManager.reset_socket",
        "ConnectionManager.cleanup",
        "BaseEngineClient.__init__",
        "BaseEngineClient._send_request",
        "BaseEngineClient.translate",
        "BaseEngineClient.cleanup",
        "NLLBEngineClient.__init__",
        "NLLBEngineClient.translate",
        "StreamingEngineClient.__init__",
        "StreamingEngineClient.translate",
        "RemoteGoogleEngineClient.__init__",
        "RemoteGoogleEngineClient.translate",
        "DictionaryEngineClient.__init__",
        "DictionaryEngineClient.translate",
        "LanguageDetector.__init__",
        "LanguageDetector._test_tagabert_connection",
        "LanguageDetector._is_taglish_candidate",
        "LanguageDetector.detect_language",
        "TranslationCache.__init__",
        "TranslationCache.get",
        "TranslationCache._read_from_memory",
        "TranslationCache._add_to_memory_cache",
        "TranslationCache._update_access_order",
        "TranslationCache._remove_from_memory_cache",
        "TranslationCache.set",
        "TranslationCache._persist_entry_async",
        "TranslationCache._cleanup_expired_entries",
        "TranslationCache._load_cache_stats",
        "TranslationCache.clear",
        "TranslationCache._hash_key",
        "TranslationCache.generate_key",
        "TranslationCache.get_metrics",
        "SessionManager.__init__",
        "SessionManager.update_session",
        "SessionManager._read_session_from_memory",
        "SessionManager._persist_session_async",
        "SessionManager.add_translation",
        "SessionManager.get_session",
        "SessionManager.cleanup_expired_sessions",
        "LocalPatternEngineClient.__init__",
        "LocalPatternEngineClient.translate",
        "EmergencyWordEngineClient.__init__",
        "EmergencyWordEngineClient.translate",
        "EngineManager.__init__",
        "EngineManager.translate",
        "TranslationService.__init__",
        "TranslationService._init_circuit_breakers",
        "TranslationService._get_fallback_translation",
        "TranslationService._resilient_send_request",
        "TranslationService.send_request_to_agent",
        "TranslationService._setup_sockets",
        "TranslationService._register_with_digital_twin",
        "TranslationService.run",
        "TranslationService._process_translation",
        "TranslationService.cleanup",
        "TranslationService._report_error",
        "TranslationService._get_health_status",
        "TranslationService._update_metrics",
        "__init__",
        "calculate_timeout",
        "record_response_time",
        "_get_length_bucket",
        "__init__",
        "_create_socket",
        "get_socket",
        "reset_socket",
        "cleanup",
        "__init__",
        "_send_request",
        "translate",
        "cleanup",
        "__init__",
        "translate",
        "__init__",
        "translate",
        "__init__",
        "translate",
        "__init__",
        "translate",
        "__init__",
        "_test_tagabert_connection",
        "_is_taglish_candidate",
        "detect_language",
        "__init__",
        "get",
        "_read_from_memory",
        "_add_to_memory_cache",
        "_update_access_order",
        "_remove_from_memory_cache",
        "set",
        "_persist_entry_async",
        "_cleanup_expired_entries",
        "_load_cache_stats",
        "clear",
        "_hash_key",
        "generate_key",
        "get_metrics",
        "__init__",
        "update_session",
        "_read_session_from_memory",
        "_persist_session_async",
        "add_translation",
        "get_session",
        "cleanup_expired_sessions",
        "__init__",
        "translate",
        "__init__",
        "translate",
        "__init__",
        "translate",
        "__init__",
        "_init_circuit_breakers",
        "_get_fallback_translation",
        "_resilient_send_request",
        "send_request_to_agent",
        "_setup_sockets",
        "_register_with_digital_twin",
        "run",
        "_process_translation",
        "cleanup",
        "_report_error",
        "_get_health_status",
        "_update_metrics"
      ],
      "health_checks": [
        "TranslationService._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->get_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->get_status"
      ],
      "agent_dependencies": [
        "main_pc_code.agents.request_coordinator.CircuitBreaker",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager"
      ],
      "external_dependencies": [
        "logging",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "time",
        "uuid",
        "json",
        "re",
        "os",
        "random",
        "hashlib",
        "zmq",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Tuple",
        "pathlib.Path",
        "concurrent.futures.ThreadPoolExecutor",
        "common.utils.data_models.ErrorSeverity",
        "sys",
        "os",
        "pathlib.Path",
        "numpy",
        "collections.defaultdict",
        "common.env_helpers.get_env",
        "langdetect",
        "langdetect.detect",
        "langdetect.lang_detect_exception.LangDetectException",
        "fasttext",
        "langdetect",
        "langdetect.DetectorFactory",
        "langdetect.lang_detect_exception.LangDetectException",
        "fasttext",
        "traceback"
      ]
    },
    "DynamicIdentityAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/DynamicIdentityAgent.py",
      "lines_of_code": 445,
      "classes": [
        "IdentityProfile",
        "IdentityContext",
        "DynamicIdentityAgent"
      ],
      "functions": [
        "DynamicIdentityAgent.__init__",
        "DynamicIdentityAgent.load_identity_profiles",
        "DynamicIdentityAgent.initialize_default_profiles",
        "DynamicIdentityAgent.save_identity_profiles",
        "DynamicIdentityAgent.analyze_context",
        "DynamicIdentityAgent.select_identity",
        "DynamicIdentityAgent.switch_identity",
        "DynamicIdentityAgent.get_current_identity_info",
        "DynamicIdentityAgent.process_request",
        "DynamicIdentityAgent.start_monitoring",
        "DynamicIdentityAgent._monitor_identity_usage",
        "DynamicIdentityAgent.cleanup",
        "__init__",
        "load_identity_profiles",
        "initialize_default_profiles",
        "save_identity_profiles",
        "analyze_context",
        "select_identity",
        "switch_identity",
        "get_current_identity_info",
        "process_request",
        "start_monitoring",
        "_monitor_identity_usage",
        "cleanup"
      ],
      "health_checks": [
        "start_monitoring",
        "_monitor_identity_usage",
        "cleanup->is_alive",
        "start_monitoring",
        "_monitor_identity_usage",
        "cleanup->is_alive"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url"
      ],
      "external_dependencies": [
        "json",
        "time",
        "threading",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "datetime.datetime",
        "asyncio",
        "zmq",
        "dataclasses.dataclass",
        "dataclasses.field",
        "enum.Enum",
        "common.utils.data_models.ErrorSeverity",
        "asyncio"
      ]
    },
    "EmotionSynthesisAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/emotion_synthesis_agent.py",
      "lines_of_code": 252,
      "classes": [
        "EmotionSynthesisAgent"
      ],
      "functions": [
        "EmotionSynthesisAgent.__init__",
        "EmotionSynthesisAgent._add_emotional_markers",
        "EmotionSynthesisAgent.synthesize_emotion",
        "EmotionSynthesisAgent.handle_request",
        "EmotionSynthesisAgent.cleanup",
        "EmotionSynthesisAgent._get_health_status",
        "EmotionSynthesisAgent.health_check",
        "__init__",
        "_add_emotional_markers",
        "synthesize_emotion",
        "handle_request",
        "cleanup",
        "_get_health_status",
        "health_check"
      ],
      "health_checks": [
        "EmotionSynthesisAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "EmotionSynthesisAgent.health_check",
        "health_check",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "health_check"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "sys",
        "os",
        "pathlib.Path",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "logging",
        "random",
        "datetime.datetime",
        "typing.Dict",
        "time",
        "psutil",
        "traceback"
      ]
    },
    "STTService": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/services/stt_service.py",
      "lines_of_code": 603,
      "classes": [
        "STTService"
      ],
      "functions": [
        "STTService.__init__",
        "STTService._register_service",
        "STTService.transcribe",
        "STTService._transcribe_fallback",
        "STTService.batch_transcribe",
        "STTService.queue_for_batch",
        "STTService._batch_processing_loop",
        "STTService.report_error",
        "STTService.handle_request",
        "STTService._get_health_status",
        "STTService._get_performance_metrics",
        "STTService.run",
        "STTService.cleanup",
        "__init__",
        "_register_service",
        "transcribe",
        "_transcribe_fallback",
        "batch_transcribe",
        "queue_for_batch",
        "_batch_processing_loop",
        "report_error",
        "handle_request",
        "_get_health_status",
        "_get_performance_metrics",
        "run",
        "cleanup"
      ],
      "health_checks": [
        "handle_request->_get_health_status",
        "STTService._get_health_status",
        "_get_health_status",
        "cleanup->is_alive",
        "handle_request->_get_health_status",
        "_get_health_status",
        "cleanup->is_alive"
      ],
      "agent_dependencies": [
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "main_pc_code.utils.service_discovery_client.discover_service",
        "main_pc_code.utils.service_discovery_client.register_service"
      ],
      "external_dependencies": [
        "zmq",
        "numpy",
        "time",
        "logging",
        "os",
        "json",
        "threading",
        "traceback",
        "datetime.datetime",
        "uuid",
        "pathlib.Path",
        "sys",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "common.utils.path_env.get_project_root",
        "main_pc_code.utils.config_loader.load_config",
        "main_pc_code.utils.network_utils.get_zmq_connection_string",
        "main_pc_code.utils.network_utils.get_machine_ip",
        "main_pc_code.utils.model_client",
        "common.env_helpers.get_env"
      ]
    },
    "TTSService": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/services/tts_service.py",
      "lines_of_code": 498,
      "classes": [
        "TTSService"
      ],
      "functions": [
        "TTSService.__init__",
        "TTSService._register_service",
        "TTSService._add_to_cache",
        "TTSService.speak",
        "TTSService._stream_audio",
        "TTSService.audio_playback_loop",
        "TTSService._interrupt_listener",
        "TTSService._start_interrupt_thread",
        "TTSService.report_error",
        "TTSService.handle_request",
        "TTSService._get_health_status",
        "TTSService.run",
        "TTSService.cleanup",
        "__init__",
        "_register_service",
        "_add_to_cache",
        "speak",
        "_stream_audio",
        "audio_playback_loop",
        "_interrupt_listener",
        "_start_interrupt_thread",
        "report_error",
        "handle_request",
        "_get_health_status",
        "run",
        "cleanup"
      ],
      "health_checks": [
        "handle_request->_get_health_status",
        "TTSService._get_health_status",
        "_get_health_status",
        "handle_request->_get_health_status",
        "_get_health_status"
      ],
      "agent_dependencies": [
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "main_pc_code.utils.service_discovery_client.discover_service",
        "main_pc_code.utils.service_discovery_client.register_service"
      ],
      "external_dependencies": [
        "zmq",
        "numpy",
        "time",
        "logging",
        "os",
        "json",
        "threading",
        "traceback",
        "datetime.datetime",
        "uuid",
        "pathlib.Path",
        "sys",
        "queue",
        "sounddevice",
        "hashlib",
        "collections.OrderedDict",
        "common.utils.path_env.get_project_root",
        "main_pc_code.utils.config_loader.load_config",
        "main_pc_code.utils.network_utils.get_zmq_connection_string",
        "main_pc_code.utils.network_utils.get_machine_ip",
        "main_pc_code.utils.model_client",
        "common.env_helpers.get_env"
      ]
    },
    "AudioCapture": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/streaming_audio_capture.py",
      "lines_of_code": 1078,
      "classes": [
        "StreamingAudioCapture"
      ],
      "functions": [
        "find_available_port",
        "StreamingAudioCapture.__init__",
        "StreamingAudioCapture.setup_zmq",
        "StreamingAudioCapture._bind_socket_with_retry",
        "StreamingAudioCapture._get_health_status",
        "StreamingAudioCapture.__enter__",
        "StreamingAudioCapture._cleanup_resources",
        "StreamingAudioCapture.__exit__",
        "StreamingAudioCapture.initialize_wake_word_detection",
        "StreamingAudioCapture.wake_word_detection_loop",
        "StreamingAudioCapture._similar_string",
        "StreamingAudioCapture.process_audio_buffer_for_wake_word",
        "StreamingAudioCapture.check_wake_word",
        "StreamingAudioCapture.check_energy_levels",
        "StreamingAudioCapture.audio_callback",
        "StreamingAudioCapture._propagate_error",
        "StreamingAudioCapture.run",
        "StreamingAudioCapture.health_check",
        "StreamingAudioCapture.cleanup",
        "StreamingAudioCapture._get_health_status",
        "__init__",
        "setup_zmq",
        "_bind_socket_with_retry",
        "_get_health_status",
        "__enter__",
        "_cleanup_resources",
        "__exit__",
        "initialize_wake_word_detection",
        "wake_word_detection_loop",
        "_similar_string",
        "process_audio_buffer_for_wake_word",
        "check_wake_word",
        "check_energy_levels",
        "audio_callback",
        "_propagate_error",
        "run",
        "health_check",
        "cleanup",
        "_get_health_status",
        "setup_health_check_server",
        "register_service"
      ],
      "health_checks": [
        "StreamingAudioCapture._get_health_status",
        "_get_health_status",
        "StreamingAudioCapture.check_wake_word",
        "check_wake_word",
        "StreamingAudioCapture.check_energy_levels",
        "check_energy_levels",
        "audio_callback->check_wake_word",
        "audio_callback->check_energy_levels",
        "StreamingAudioCapture.health_check",
        "health_check",
        "cleanup->is_alive",
        "StreamingAudioCapture._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status",
        "check_wake_word",
        "check_energy_levels",
        "audio_callback->check_wake_word",
        "audio_callback->check_energy_levels",
        "health_check",
        "cleanup->is_alive",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "setup_health_check_server"
      ],
      "agent_dependencies": [
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "main_pc_code.utils.service_discovery_client.register_service"
      ],
      "external_dependencies": [
        "sounddevice",
        "time",
        "pickle",
        "zmq",
        "numpy",
        "logging",
        "json",
        "threading",
        "sys",
        "queue",
        "wave",
        "os",
        "pathlib.Path",
        "collections.deque",
        "datetime.datetime",
        "socket",
        "psutil",
        "sys",
        "os",
        "pathlib.Path",
        "common.env_helpers.get_env",
        "pyaudio",
        "main_pc_code.core.http_server.setup_health_check_server",
        "collections.deque",
        "zmq",
        "threading",
        "pyaudio",
        "time",
        "pyaudio",
        "pyaudio",
        "torch",
        "torch",
        "traceback",
        "whisper",
        "whisper",
        "main_pc_code.src.network.secure_zmq.secure_server_socket",
        "main_pc_code.src.network.secure_zmq.start_auth"
      ]
    },
    "FusedAudioPreprocessor": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/fused_audio_preprocessor.py",
      "lines_of_code": 981,
      "classes": [
        "FusedAudioPreprocessor"
      ],
      "functions": [
        "FusedAudioPreprocessor.__init__",
        "FusedAudioPreprocessor._load_config",
        "FusedAudioPreprocessor._init_aec",
        "FusedAudioPreprocessor._init_agc",
        "FusedAudioPreprocessor._init_sockets",
        "FusedAudioPreprocessor._init_vad_model",
        "FusedAudioPreprocessor.apply_noise_reduction",
        "FusedAudioPreprocessor._resample_audio",
        "FusedAudioPreprocessor._update_adaptive_threshold",
        "FusedAudioPreprocessor.detect_speech",
        "FusedAudioPreprocessor._publish_vad_event",
        "FusedAudioPreprocessor.apply_aec",
        "FusedAudioPreprocessor.apply_agc",
        "FusedAudioPreprocessor.process_audio_loop",
        "FusedAudioPreprocessor.health_check",
        "FusedAudioPreprocessor.cleanup",
        "FusedAudioPreprocessor.run",
        "__init__",
        "_load_config",
        "_init_aec",
        "_init_agc",
        "_init_sockets",
        "_init_vad_model",
        "apply_noise_reduction",
        "_resample_audio",
        "_update_adaptive_threshold",
        "detect_speech",
        "_publish_vad_event",
        "apply_aec",
        "apply_agc",
        "process_audio_loop",
        "health_check",
        "cleanup",
        "run",
        "_get_health_status"
      ],
      "health_checks": [
        "FusedAudioPreprocessor.health_check",
        "health_check",
        "cleanup->is_alive",
        "health_check",
        "cleanup->is_alive",
        "_get_health_status",
        "_get_health_status->_get_health_status"
      ],
      "agent_dependencies": [
        "common.utils.path_manager.PathManager",
        "common.config_manager.load_unified_config",
        "main_pc_code.utils.service_discovery_client.discover_service",
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager",
        "main_pc_code.utils.service_discovery_client.register_service"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "zmq",
        "pickle",
        "numpy",
        "time",
        "threading",
        "logging",
        "os",
        "sys",
        "json",
        "torch",
        "pathlib.Path",
        "datetime.datetime",
        "collections.deque",
        "noisereduce",
        "scipy.signal",
        "librosa",
        "psutil",
        "sys",
        "os",
        "pathlib.Path",
        "common.env_helpers.get_env",
        "traceback",
        "main_pc_code.src.network.secure_zmq.secure_client_socket",
        "main_pc_code.src.network.secure_zmq.start_auth",
        "main_pc_code.src.network.secure_zmq.secure_server_socket",
        "main_pc_code.src.network.secure_zmq.secure_server_socket"
      ]
    },
    "StreamingInterruptHandler": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/streaming_interrupt_handler.py",
      "lines_of_code": 344,
      "classes": [
        "StreamingInterruptHandler"
      ],
      "functions": [
        "StreamingInterruptHandler.__init__",
        "StreamingInterruptHandler._register_service",
        "StreamingInterruptHandler.detect_interruption",
        "StreamingInterruptHandler.send_tts_stop_command",
        "StreamingInterruptHandler.publish_interrupt",
        "StreamingInterruptHandler.run",
        "StreamingInterruptHandler.cleanup",
        "StreamingInterruptHandler.health_check",
        "StreamingInterruptHandler._get_health_status",
        "StreamingInterruptHandler._perform_initialization",
        "StreamingInterruptHandler.report_error",
        "__init__",
        "_register_service",
        "detect_interruption",
        "send_tts_stop_command",
        "publish_interrupt",
        "run",
        "cleanup",
        "health_check",
        "_get_health_status",
        "_perform_initialization",
        "report_error"
      ],
      "health_checks": [
        "StreamingInterruptHandler.health_check",
        "health_check",
        "StreamingInterruptHandler._get_health_status",
        "_get_health_status",
        "health_check",
        "_get_health_status"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "main_pc_code.utils.service_discovery_client.discover_service",
        "main_pc_code.utils.service_discovery_client.register_service",
        "main_pc_code.utils.service_discovery_client.get_service_address",
        "main_pc_code.utils.service_discovery_client.register_service"
      ],
      "external_dependencies": [
        "common.env_helpers.get_env",
        "psutil",
        "datetime.datetime",
        "zmq",
        "pickle",
        "json",
        "time",
        "logging",
        "threading",
        "os",
        "main_pc_code.utils.env_loader.get_env",
        "psutil",
        "datetime.datetime"
      ]
    },
    "StreamingSpeechRecognition": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/streaming_speech_recognition.py",
      "lines_of_code": 1004,
      "classes": [
        "ResourceManager",
        "StreamingSpeechRecognition"
      ],
      "functions": [
        "ResourceManager.__init__",
        "ResourceManager.get_system_load",
        "ResourceManager.get_batch_size",
        "ResourceManager.get_quantization",
        "ResourceManager.use_tensorrt",
        "StreamingSpeechRecognition.__init__",
        "StreamingSpeechRecognition._connect_to_request_coordinator",
        "StreamingSpeechRecognition._init_sockets",
        "StreamingSpeechRecognition._connect_to_stt_service",
        "StreamingSpeechRecognition._check_wake_word_events",
        "StreamingSpeechRecognition._check_vad_events",
        "StreamingSpeechRecognition.apply_noise_reduction",
        "StreamingSpeechRecognition.detect_language",
        "StreamingSpeechRecognition.process_audio_loop",
        "StreamingSpeechRecognition._cleanup_idle_models",
        "StreamingSpeechRecognition.health_broadcast_loop",
        "StreamingSpeechRecognition.start",
        "StreamingSpeechRecognition.stop",
        "StreamingSpeechRecognition.health_check",
        "StreamingSpeechRecognition.cleanup",
        "StreamingSpeechRecognition.run",
        "StreamingSpeechRecognition._process_audio_buffer",
        "__init__",
        "get_system_load",
        "get_batch_size",
        "get_quantization",
        "use_tensorrt",
        "__init__",
        "_connect_to_request_coordinator",
        "_init_sockets",
        "_connect_to_stt_service",
        "_check_wake_word_events",
        "_check_vad_events",
        "apply_noise_reduction",
        "detect_language",
        "process_audio_loop",
        "_cleanup_idle_models",
        "health_broadcast_loop",
        "start",
        "stop",
        "health_check",
        "cleanup",
        "run",
        "_process_audio_buffer",
        "_get_health_status"
      ],
      "health_checks": [
        "StreamingSpeechRecognition._check_wake_word_events",
        "_check_wake_word_events",
        "StreamingSpeechRecognition._check_vad_events",
        "_check_vad_events",
        "process_audio_loop->_check_wake_word_events",
        "process_audio_loop->_check_vad_events",
        "StreamingSpeechRecognition.health_broadcast_loop",
        "health_broadcast_loop",
        "StreamingSpeechRecognition.health_check",
        "health_check",
        "cleanup->is_alive",
        "cleanup->is_alive",
        "cleanup->is_alive",
        "_check_wake_word_events",
        "_check_vad_events",
        "process_audio_loop->_check_wake_word_events",
        "process_audio_loop->_check_vad_events",
        "health_broadcast_loop",
        "health_check",
        "cleanup->is_alive",
        "cleanup->is_alive",
        "cleanup->is_alive",
        "_get_health_status",
        "_get_health_status->_get_health_status"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "main_pc_code.utils.service_discovery_client.discover_service",
        "main_pc_code.utils.service_discovery_client.register_service"
      ],
      "external_dependencies": [
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "pickle",
        "numpy",
        "time",
        "threading",
        "logging",
        "os",
        "tempfile",
        "wave",
        "orjson",
        "json",
        "collections.deque",
        "datetime.datetime",
        "uuid",
        "socket",
        "sys",
        "noisereduce",
        "scipy.signal",
        "pathlib.Path",
        "queue.Queue",
        "psutil",
        "traceback",
        "common.env_helpers.get_env",
        "torch",
        "traceback",
        "scipy.signal",
        "main_pc_code.src.network.secure_zmq.secure_client_socket",
        "main_pc_code.src.network.secure_zmq.start_auth",
        "main_pc_code.src.network.secure_zmq.secure_client_socket",
        "main_pc_code.src.network.secure_zmq.secure_client_socket",
        "main_pc_code.src.network.secure_zmq.secure_server_socket",
        "main_pc_code.src.network.secure_zmq.secure_server_socket",
        "main_pc_code.src.network.secure_zmq.secure_client_socket"
      ]
    },
    "StreamingTTSAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/streaming_tts_agent.py",
      "lines_of_code": 750,
      "classes": [
        "UltimateTTSAgent"
      ],
      "functions": [
        "UltimateTTSAgent.__init__",
        "UltimateTTSAgent._register_service",
        "UltimateTTSAgent._connect_to_tts_service",
        "UltimateTTSAgent._async_initialize_tts_engines",
        "UltimateTTSAgent._add_to_cache",
        "UltimateTTSAgent.split_into_sentences",
        "UltimateTTSAgent.speak",
        "UltimateTTSAgent._speak_with_tts_service",
        "UltimateTTSAgent._speak_with_sapi",
        "UltimateTTSAgent._speak_with_pyttsx3",
        "UltimateTTSAgent._speak_with_console",
        "UltimateTTSAgent.audio_playback_loop",
        "UltimateTTSAgent._send_health_updates",
        "UltimateTTSAgent._interrupt_listener",
        "UltimateTTSAgent._start_interrupt_thread",
        "UltimateTTSAgent._get_health_status",
        "UltimateTTSAgent.run",
        "UltimateTTSAgent._update_service_status",
        "UltimateTTSAgent._shutdown",
        "UltimateTTSAgent.health_check",
        "UltimateTTSAgent.report_error",
        "__init__",
        "_register_service",
        "_connect_to_tts_service",
        "_async_initialize_tts_engines",
        "_add_to_cache",
        "split_into_sentences",
        "speak",
        "_speak_with_tts_service",
        "_speak_with_sapi",
        "_speak_with_pyttsx3",
        "_speak_with_console",
        "audio_playback_loop",
        "_send_health_updates",
        "_interrupt_listener",
        "_start_interrupt_thread",
        "_get_health_status",
        "run",
        "_update_service_status",
        "_shutdown",
        "health_check",
        "report_error",
        "cleanup"
      ],
      "health_checks": [
        "_async_initialize_tts_engines->_update_service_status",
        "UltimateTTSAgent._send_health_updates",
        "_send_health_updates",
        "_send_health_updates->_get_health_status",
        "UltimateTTSAgent._get_health_status",
        "_get_health_status",
        "run->_update_service_status",
        "UltimateTTSAgent._update_service_status",
        "_update_service_status",
        "_shutdown->_update_service_status",
        "UltimateTTSAgent.health_check",
        "health_check",
        "_async_initialize_tts_engines->_update_service_status",
        "_send_health_updates",
        "_send_health_updates->_get_health_status",
        "_get_health_status",
        "run->_update_service_status",
        "_update_service_status",
        "_shutdown->_update_service_status",
        "health_check"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "main_pc_code.utils.service_discovery_client.register_service",
        "main_pc_code.utils.service_discovery_client.get_service_address",
        "main_pc_code.utils.service_discovery_client.discover_service"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "zmq",
        "json",
        "time",
        "logging",
        "sys",
        "logging",
        "os",
        "threading",
        "queue",
        "numpy",
        "sounddevice",
        "pathlib.Path",
        "hashlib",
        "tempfile",
        "re",
        "main_pc_code.utils.env_loader.get_env",
        "pickle",
        "collections.OrderedDict",
        "traceback",
        "pyttsx3",
        "win32com.client"
      ]
    },
    "WakeWordDetector": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/wake_word_detector.py",
      "lines_of_code": 464,
      "classes": [
        "WakeWordDetector"
      ],
      "functions": [
        "WakeWordDetector.__init__",
        "WakeWordDetector._load_api_key",
        "WakeWordDetector._init_zmq",
        "WakeWordDetector._init_porcupine",
        "WakeWordDetector._calculate_energy",
        "WakeWordDetector._convert_audio_format",
        "WakeWordDetector._publish_wake_word_event",
        "WakeWordDetector._publish_health_status",
        "WakeWordDetector._check_vad_events",
        "WakeWordDetector._audio_capture_thread",
        "WakeWordDetector._health_broadcast_thread",
        "WakeWordDetector._calculate_confidence",
        "WakeWordDetector.start",
        "WakeWordDetector.stop",
        "WakeWordDetector.__enter__",
        "WakeWordDetector.__exit__",
        "WakeWordDetector._perform_initialization",
        "WakeWordDetector.health_check",
        "WakeWordDetector._get_health_status",
        "WakeWordDetector.cleanup",
        "__init__",
        "_load_api_key",
        "_init_zmq",
        "_init_porcupine",
        "_calculate_energy",
        "_convert_audio_format",
        "_publish_wake_word_event",
        "_publish_health_status",
        "_check_vad_events",
        "_audio_capture_thread",
        "_health_broadcast_thread",
        "_calculate_confidence",
        "start",
        "stop",
        "__enter__",
        "__exit__",
        "_perform_initialization",
        "health_check",
        "_get_health_status",
        "cleanup"
      ],
      "health_checks": [
        "WakeWordDetector._publish_health_status",
        "_publish_health_status",
        "WakeWordDetector._check_vad_events",
        "_check_vad_events",
        "_audio_capture_thread->_check_vad_events",
        "WakeWordDetector._health_broadcast_thread",
        "_health_broadcast_thread",
        "_health_broadcast_thread->_publish_health_status",
        "WakeWordDetector.health_check",
        "health_check",
        "WakeWordDetector._get_health_status",
        "_get_health_status",
        "_publish_health_status",
        "_check_vad_events",
        "_audio_capture_thread->_check_vad_events",
        "_health_broadcast_thread",
        "_health_broadcast_thread->_publish_health_status",
        "health_check",
        "_get_health_status"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "common.utils.path_manager.PathManager",
        "main_pc_code.utils.service_discovery_client.discover_service",
        "main_pc_code.utils.service_discovery_client.register_service"
      ],
      "external_dependencies": [
        "pvporcupine",
        "pyaudio",
        "numpy",
        "json",
        "os",
        "logging",
        "threading",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "time",
        "pickle",
        "datetime.datetime",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "psutil",
        "common.env_helpers.get_env",
        "traceback"
      ]
    },
    "StreamingLanguageAnalyzer": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/streaming_language_analyzer.py",
      "lines_of_code": 795,
      "classes": [
        "StreamingLanguageAnalyzer"
      ],
      "functions": [
        "find_available_port",
        "StreamingLanguageAnalyzer.__init__",
        "StreamingLanguageAnalyzer._register_service",
        "StreamingLanguageAnalyzer._connect_to_tagabert",
        "StreamingLanguageAnalyzer._connect_to_translation_service",
        "StreamingLanguageAnalyzer._contains_potential_taglish_short_words",
        "StreamingLanguageAnalyzer.report_health",
        "StreamingLanguageAnalyzer.analyze_tagalog_sentiment",
        "StreamingLanguageAnalyzer.analyze_language",
        "StreamingLanguageAnalyzer.analyze_with_llm",
        "StreamingLanguageAnalyzer.start",
        "StreamingLanguageAnalyzer.shutdown",
        "StreamingLanguageAnalyzer.cleanup",
        "StreamingLanguageAnalyzer._process_loop",
        "StreamingLanguageAnalyzer._get_health_status",
        "__init__",
        "_register_service",
        "_connect_to_tagabert",
        "_connect_to_translation_service",
        "_contains_potential_taglish_short_words",
        "report_health",
        "analyze_tagalog_sentiment",
        "analyze_language",
        "analyze_with_llm",
        "start",
        "shutdown",
        "cleanup",
        "_process_loop",
        "_get_health_status"
      ],
      "health_checks": [
        "StreamingLanguageAnalyzer.report_health",
        "report_health",
        "shutdown->is_alive",
        "shutdown->is_alive",
        "StreamingLanguageAnalyzer._get_health_status",
        "_get_health_status",
        "report_health",
        "shutdown->is_alive",
        "shutdown->is_alive",
        "_get_health_status"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "main_pc_code.utils.service_discovery_client.register_service",
        "main_pc_code.utils.service_discovery_client.get_service_address",
        "common.utils.path_manager.PathManager"
      ],
      "external_dependencies": [
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "pickle",
        "logging",
        "re",
        "time",
        "json",
        "threading",
        "os",
        "psutil",
        "collections.deque",
        "datetime.datetime",
        "pathlib.Path",
        "requests",
        "socket",
        "typing.Dict",
        "typing.Optional",
        "typing.Any",
        "main_pc_code.utils.env_loader.get_env",
        "main_pc_code.utils.network_utils.get_zmq_connection_string",
        "main_pc_code.utils.network_utils.get_machine_ip",
        "main_pc_code.utils.model_client",
        "common.env_helpers.get_env",
        "fasttext",
        "traceback"
      ]
    },
    "ProactiveAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/ProactiveAgent.py",
      "lines_of_code": 580,
      "classes": [
        "ProactivityLevel",
        "SuggestionType",
        "ProactiveSuggestion",
        "ProactiveAgent"
      ],
      "functions": [
        "ProactiveAgent.__init__",
        "ProactiveAgent._initialize_suggestion_rules",
        "ProactiveAgent.generate_suggestion_id",
        "ProactiveAgent.analyze_context",
        "ProactiveAgent.generate_suggestion",
        "ProactiveAgent.evaluate_suggestion_relevance",
        "ProactiveAgent.should_generate_suggestion",
        "ProactiveAgent._calculate_recent_acceptance_rate",
        "ProactiveAgent.process_user_feedback",
        "ProactiveAgent._publish_feedback_event",
        "ProactiveAgent.cleanup_expired_suggestions",
        "ProactiveAgent.get_active_suggestions",
        "ProactiveAgent.process_context_update",
        "ProactiveAgent._monitoring_loop",
        "ProactiveAgent.cleanup",
        "__init__",
        "_initialize_suggestion_rules",
        "generate_suggestion_id",
        "analyze_context",
        "generate_suggestion",
        "evaluate_suggestion_relevance",
        "should_generate_suggestion",
        "_calculate_recent_acceptance_rate",
        "process_user_feedback",
        "_publish_feedback_event",
        "cleanup_expired_suggestions",
        "get_active_suggestions",
        "process_context_update",
        "_monitoring_loop",
        "cleanup"
      ],
      "health_checks": [
        "_monitoring_loop",
        "cleanup->is_alive",
        "_monitoring_loop",
        "cleanup->is_alive"
      ],
      "agent_dependencies": [
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url"
      ],
      "external_dependencies": [
        "asyncio",
        "json",
        "threading",
        "time",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "dataclasses.dataclass",
        "dataclasses.field",
        "enum.Enum",
        "zmq",
        "common.utils.data_models.ErrorSeverity",
        "asyncio",
        "uuid"
      ]
    },
    "EmotionEngine": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/emotion_engine.py",
      "lines_of_code": 466,
      "classes": [
        "EmotionEngine"
      ],
      "functions": [
        "EmotionEngine.__init__",
        "EmotionEngine._signal_handler",
        "EmotionEngine.setup_zmq",
        "EmotionEngine._bind_socket_with_retry",
        "EmotionEngine._get_health_status",
        "EmotionEngine._broadcast_emotional_state",
        "EmotionEngine.get_emotional_state",
        "EmotionEngine.run",
        "EmotionEngine.handle_request",
        "EmotionEngine.update_emotional_state",
        "EmotionEngine.health_check",
        "EmotionEngine.cleanup",
        "__init__",
        "_signal_handler",
        "setup_zmq",
        "_bind_socket_with_retry",
        "_get_health_status",
        "_broadcast_emotional_state",
        "get_emotional_state",
        "run",
        "handle_request",
        "update_emotional_state",
        "health_check",
        "cleanup"
      ],
      "health_checks": [
        "EmotionEngine._get_health_status",
        "_get_health_status",
        "handle_request->_get_health_status",
        "EmotionEngine.health_check",
        "health_check",
        "_get_health_status",
        "handle_request->_get_health_status",
        "health_check"
      ],
      "agent_dependencies": [
        "common.utils.path_manager.PathManager",
        "common.config_manager.load_unified_config",
        "common.core.base_agent.BaseAgent"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "os",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "logging",
        "threading",
        "time",
        "psutil",
        "signal",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "common.env_helpers.get_env",
        "argparse",
        "traceback"
      ]
    },
    "MoodTrackerAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/mood_tracker_agent.py",
      "lines_of_code": 434,
      "classes": [
        "MoodTrackerAgent"
      ],
      "functions": [
        "MoodTrackerAgent.__init__",
        "MoodTrackerAgent._monitor_emotions",
        "MoodTrackerAgent._update_mood",
        "MoodTrackerAgent._handle_queries",
        "MoodTrackerAgent._process_request",
        "MoodTrackerAgent.get_current_mood",
        "MoodTrackerAgent.get_mood_history",
        "MoodTrackerAgent.get_long_term_mood",
        "MoodTrackerAgent._get_health_status",
        "MoodTrackerAgent.health_check",
        "MoodTrackerAgent.run",
        "MoodTrackerAgent.cleanup",
        "__init__",
        "_monitor_emotions",
        "_update_mood",
        "_handle_queries",
        "_process_request",
        "get_current_mood",
        "get_mood_history",
        "get_long_term_mood",
        "_get_health_status",
        "health_check",
        "run",
        "cleanup"
      ],
      "health_checks": [
        "_monitor_emotions",
        "_process_request->_get_health_status",
        "MoodTrackerAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->is_alive",
        "MoodTrackerAgent.health_check",
        "health_check",
        "_monitor_emotions",
        "_process_request->_get_health_status",
        "_get_health_status",
        "_get_health_status->is_alive",
        "health_check"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.config_manager.load_unified_config",
        "common.core.base_agent.BaseAgent"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "sys",
        "os",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "logging",
        "threading",
        "time",
        "psutil",
        "datetime.datetime",
        "collections.deque",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "common.env_helpers.get_env",
        "traceback"
      ]
    },
    "HumanAwarenessAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/human_awareness_agent.py",
      "lines_of_code": 284,
      "classes": [
        "HumanAwarenessAgent"
      ],
      "functions": [
        "HumanAwarenessAgent.__init__",
        "HumanAwarenessAgent._load_config",
        "HumanAwarenessAgent._perform_initialization",
        "HumanAwarenessAgent._init_components",
        "HumanAwarenessAgent._get_health_status",
        "HumanAwarenessAgent.handle_request",
        "HumanAwarenessAgent.run",
        "HumanAwarenessAgent._update_presence",
        "HumanAwarenessAgent._update_emotion",
        "HumanAwarenessAgent.health_check",
        "HumanAwarenessAgent.cleanup",
        "__init__",
        "_load_config",
        "_perform_initialization",
        "_init_components",
        "_get_health_status",
        "handle_request",
        "run",
        "_update_presence",
        "_update_emotion",
        "health_check",
        "cleanup"
      ],
      "health_checks": [
        "HumanAwarenessAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "HumanAwarenessAgent.health_check",
        "health_check",
        "cleanup->is_alive",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "health_check",
        "cleanup->is_alive"
      ],
      "agent_dependencies": [
        "common.utils.path_manager.PathManager",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "time",
        "logging",
        "threading",
        "json",
        "os",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "sys",
        "sys",
        "os",
        "os",
        "sys",
        "pathlib.Path",
        "psutil",
        "common.env_helpers.get_env",
        "zmq",
        "traceback"
      ]
    },
    "ToneDetector": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/tone_detector.py",
      "lines_of_code": 679,
      "classes": [
        "ToneDetector"
      ],
      "functions": [
        "get_main_pc_code",
        "ToneDetector.__init__",
        "ToneDetector._start_tone_monitor",
        "ToneDetector._connect_to_whisper",
        "ToneDetector._initialize_whisper_model",
        "ToneDetector._connect_to_tagalog_analyzer",
        "ToneDetector._detect_language",
        "ToneDetector._analyze_tone",
        "ToneDetector._record_and_transcribe",
        "ToneDetector._simulate_tone_detection",
        "ToneDetector.handle_request",
        "ToneDetector.shutdown",
        "ToneDetector.cleanup",
        "ToneDetector._get_health_status",
        "ToneDetector.health_check",
        "__init__",
        "_start_tone_monitor",
        "_connect_to_whisper",
        "_initialize_whisper_model",
        "_connect_to_tagalog_analyzer",
        "_detect_language",
        "_analyze_tone",
        "_record_and_transcribe",
        "_simulate_tone_detection",
        "handle_request",
        "shutdown",
        "cleanup",
        "_get_health_status",
        "health_check"
      ],
      "health_checks": [
        "_start_tone_monitor",
        "cleanup->is_alive",
        "ToneDetector._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "ToneDetector.health_check",
        "health_check",
        "health_check->is_alive",
        "_start_tone_monitor",
        "cleanup->is_alive",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "health_check",
        "health_check->is_alive"
      ],
      "agent_dependencies": [
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "pathlib.Path",
        "sys",
        "os",
        "pathlib.Path",
        "sys",
        "os",
        "pathlib.Path",
        "time",
        "logging",
        "threading",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "yaml",
        "datetime.datetime",
        "queue.Queue",
        "re",
        "numpy",
        "wave",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "psutil",
        "common.env_helpers.get_env",
        "pyaudio",
        "whisper",
        "random",
        "traceback"
      ]
    },
    "VoiceProfilingAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/voice_profiling_agent.py",
      "lines_of_code": 431,
      "classes": [
        "VoiceProfilingAgent"
      ],
      "functions": [
        "VoiceProfilingAgent.__init__",
        "VoiceProfilingAgent.load_config",
        "VoiceProfilingAgent.load_voice_profiles",
        "VoiceProfilingAgent.save_voice_profile",
        "VoiceProfilingAgent.enroll_new_speaker",
        "VoiceProfilingAgent.identify_speaker",
        "VoiceProfilingAgent.update_voice_profile",
        "VoiceProfilingAgent.handle_request",
        "VoiceProfilingAgent.run",
        "VoiceProfilingAgent.cleanup",
        "VoiceProfilingAgent._get_health_status",
        "VoiceProfilingAgent.health_check",
        "__init__",
        "load_config",
        "load_voice_profiles",
        "save_voice_profile",
        "enroll_new_speaker",
        "identify_speaker",
        "update_voice_profile",
        "handle_request",
        "run",
        "cleanup",
        "_get_health_status",
        "health_check"
      ],
      "health_checks": [
        "VoiceProfilingAgent._get_health_status",
        "_get_health_status",
        "VoiceProfilingAgent.health_check",
        "health_check",
        "_get_health_status",
        "health_check"
      ],
      "agent_dependencies": [
        "common.config_manager.load_unified_config",
        "common.core.base_agent.BaseAgent",
        "common.utils.path_manager.PathManager"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "json",
        "uuid",
        "numpy",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "logging",
        "time",
        "psutil",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Tuple",
        "typing.Union",
        "typing.cast",
        "pathlib.Path",
        "sys",
        "os",
        "pathlib.Path",
        "common.env_helpers.get_env",
        "importlib.util",
        "sys",
        "traceback"
      ]
    },
    "EmpathyAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/main_pc_code/agents/EmpathyAgent.py",
      "lines_of_code": 469,
      "classes": [
        "EmpathyAgent"
      ],
      "functions": [
        "EmpathyAgent.__init__",
        "EmpathyAgent._initialize_connections",
        "EmpathyAgent.update_emotional_profile",
        "EmpathyAgent.send_voice_settings_to_tts",
        "EmpathyAgent._monitor_emotions",
        "EmpathyAgent._update_emotional_state",
        "EmpathyAgent.determine_voice_settings",
        "EmpathyAgent._send_voice_settings_to_tts",
        "EmpathyAgent._get_health_status",
        "EmpathyAgent.handle_request",
        "EmpathyAgent.run",
        "EmpathyAgent.stop",
        "EmpathyAgent.health_check",
        "_perform_initialization",
        "__init__",
        "_initialize_connections",
        "update_emotional_profile",
        "send_voice_settings_to_tts",
        "_monitor_emotions",
        "_update_emotional_state",
        "determine_voice_settings",
        "_send_voice_settings_to_tts",
        "_get_health_status",
        "handle_request",
        "run",
        "stop",
        "health_check",
        "get_health_status",
        "cleanup"
      ],
      "health_checks": [
        "_monitor_emotions",
        "EmpathyAgent._get_health_status",
        "_get_health_status",
        "handle_request->_get_health_status",
        "EmpathyAgent.health_check",
        "health_check",
        "_monitor_emotions",
        "_get_health_status",
        "handle_request->_get_health_status",
        "health_check",
        "get_health_status"
      ],
      "agent_dependencies": [
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "common.config_manager.load_unified_config",
        "main_pc_code.utils.service_discovery_client.get_service_address",
        "main_pc_code.utils.service_discovery_client.register_service"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "sys",
        "os",
        "os",
        "sys",
        "pathlib.Path",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "logging",
        "time",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "threading",
        "traceback"
      ]
    },
    "TieredResponder": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/tiered_responder.py",
      "lines_of_code": 501,
      "classes": [
        "ResourceManager",
        "TieredResponder"
      ],
      "functions": [
        "ResourceManager.__init__",
        "ResourceManager.get_stats",
        "ResourceManager.check_resources",
        "ResourceManager.get_average_stats",
        "TieredResponder.__init__",
        "TieredResponder._setup_sockets",
        "TieredResponder._setup_tiers",
        "TieredResponder._setup_logging",
        "TieredResponder._setup_health_monitoring",
        "TieredResponder.start",
        "TieredResponder._start_response_processor",
        "TieredResponder._handle_query",
        "TieredResponder._get_canned_response",
        "TieredResponder._handle_health_check",
        "TieredResponder.run",
        "TieredResponder._get_health_status",
        "TieredResponder.health_check",
        "TieredResponder.cleanup",
        "main",
        "load_network_config",
        "__init__",
        "get_stats",
        "check_resources",
        "get_average_stats",
        "__init__",
        "_setup_sockets",
        "_setup_tiers",
        "_setup_logging",
        "_setup_health_monitoring",
        "start",
        "_start_response_processor",
        "_handle_query",
        "_get_canned_response",
        "_handle_health_check",
        "run",
        "_get_health_status",
        "health_check",
        "cleanup",
        "monitor_health",
        "process_requests"
      ],
      "health_checks": [
        "ResourceManager.check_resources",
        "check_resources",
        "__init__->_setup_health_monitoring",
        "TieredResponder._setup_health_monitoring",
        "_setup_health_monitoring",
        "_setup_health_monitoring->check_resources",
        "_start_response_processor->check_resources",
        "_start_response_processor->_handle_health_check",
        "TieredResponder._handle_health_check",
        "_handle_health_check",
        "_handle_health_check->check_resources",
        "TieredResponder._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "TieredResponder.health_check",
        "health_check",
        "health_check->_get_health_status",
        "check_resources",
        "__init__->_setup_health_monitoring",
        "_setup_health_monitoring",
        "_setup_health_monitoring->check_resources",
        "_start_response_processor->check_resources",
        "_start_response_processor->_handle_health_check",
        "_handle_health_check",
        "_handle_health_check->check_resources",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "health_check",
        "health_check->_get_health_status",
        "monitor_health",
        "monitor_health->check_resources",
        "process_requests->check_resources",
        "process_requests->_handle_health_check"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.utils.config_loader.parse_agent_args",
        "pc2_code.agents.utils.config_loader.Config"
      ],
      "external_dependencies": [
        "zmq",
        "yaml",
        "sys",
        "os",
        "json",
        "time",
        "logging",
        "sqlite3",
        "psutil",
        "torch",
        "threading",
        "collections.deque",
        "pathlib.Path",
        "typing.Dict",
        "typing.Any",
        "typing.Callable",
        "typing.List",
        "typing.Optional",
        "datetime.datetime",
        "asyncio",
        "sys",
        "os",
        "pathlib.Path",
        "pc2_code.utils.config_loader.load_config",
        "traceback"
      ]
    },
    "AsyncProcessor": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/async_processor.py",
      "lines_of_code": 461,
      "classes": [
        "ResourceManager",
        "TaskQueue",
        "AsyncProcessor"
      ],
      "functions": [
        "ResourceManager.__init__",
        "ResourceManager.get_stats",
        "ResourceManager.check_resources",
        "TaskQueue.__init__",
        "TaskQueue.add_task",
        "TaskQueue.get_next_task",
        "TaskQueue.update_stats",
        "TaskQueue.get_stats",
        "AsyncProcessor.__init__",
        "AsyncProcessor._setup_sockets",
        "AsyncProcessor._setup_logging",
        "AsyncProcessor._setup_health_monitoring",
        "AsyncProcessor._start_task_processor",
        "AsyncProcessor._process_task",
        "AsyncProcessor._handle_task",
        "AsyncProcessor._handle_logging",
        "AsyncProcessor._handle_analysis",
        "AsyncProcessor._handle_memory",
        "AsyncProcessor._handle_health_check",
        "AsyncProcessor.send_task",
        "AsyncProcessor.run",
        "AsyncProcessor._get_health_status",
        "AsyncProcessor.health_check",
        "AsyncProcessor.cleanup",
        "async_task",
        "main",
        "load_network_config",
        "__init__",
        "get_stats",
        "check_resources",
        "__init__",
        "add_task",
        "get_next_task",
        "update_stats",
        "get_stats",
        "__init__",
        "_setup_sockets",
        "_setup_logging",
        "_setup_health_monitoring",
        "_start_task_processor",
        "_process_task",
        "_handle_task",
        "_handle_logging",
        "_handle_analysis",
        "_handle_memory",
        "_handle_health_check",
        "send_task",
        "run",
        "_get_health_status",
        "health_check",
        "cleanup",
        "decorator",
        "monitor_health",
        "process_requests",
        "wrapper"
      ],
      "health_checks": [
        "ResourceManager.check_resources",
        "check_resources",
        "__init__->_setup_health_monitoring",
        "AsyncProcessor._setup_health_monitoring",
        "_setup_health_monitoring",
        "_setup_health_monitoring->check_resources",
        "_start_task_processor->_handle_health_check",
        "AsyncProcessor._handle_health_check",
        "_handle_health_check",
        "_handle_health_check->check_resources",
        "AsyncProcessor._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "AsyncProcessor.health_check",
        "health_check",
        "health_check->_get_health_status",
        "check_resources",
        "__init__->_setup_health_monitoring",
        "_setup_health_monitoring",
        "_setup_health_monitoring->check_resources",
        "_start_task_processor->_handle_health_check",
        "_handle_health_check",
        "_handle_health_check->check_resources",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "health_check",
        "health_check->_get_health_status",
        "monitor_health",
        "monitor_health->check_resources",
        "process_requests->_handle_health_check"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.core.base_agent.BaseAgent",
        "pc2_code.utils.config_loader.parse_agent_args",
        "pc2_code.agents.utils.config_loader.Config"
      ],
      "external_dependencies": [
        "zmq",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "yaml",
        "sys",
        "os",
        "threading",
        "typing.Callable",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "functools.wraps",
        "time",
        "logging",
        "psutil",
        "torch",
        "datetime.datetime",
        "collections.deque",
        "collections.defaultdict",
        "asyncio",
        "pathlib.Path",
        "json",
        "sys",
        "os",
        "pathlib.Path",
        "pc2_code.utils.config_loader.load_config",
        "traceback",
        "traceback"
      ]
    },
    "VisionProcessingAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/VisionProcessingAgent.py",
      "lines_of_code": 216,
      "classes": [
        "VisionProcessingAgent"
      ],
      "functions": [
        "VisionProcessingAgent.__init__",
        "VisionProcessingAgent.handle_request",
        "VisionProcessingAgent._describe_image",
        "VisionProcessingAgent.health_check",
        "VisionProcessingAgent._get_health_status",
        "__init__",
        "handle_request",
        "_describe_image",
        "health_check",
        "_get_health_status",
        "cleanup"
      ],
      "health_checks": [
        "handle_request->health_check",
        "VisionProcessingAgent.health_check",
        "health_check",
        "VisionProcessingAgent._get_health_status",
        "_get_health_status",
        "handle_request->health_check",
        "health_check",
        "_get_health_status"
      ],
      "agent_dependencies": [
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.utils.config_loader.parse_agent_args"
      ],
      "external_dependencies": [
        "sys",
        "os",
        "json",
        "time",
        "logging",
        "base64",
        "io",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "PIL.Image",
        "psutil",
        "traceback"
      ]
    },
    "DreamWorldAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/DreamWorldAgent.py",
      "lines_of_code": 988,
      "classes": [
        "ScenarioType",
        "ScenarioTemplate",
        "MCTSNode",
        "DreamWorldAgent"
      ],
      "functions": [
        "MCTSNode.__init__",
        "MCTSNode.add_child",
        "MCTSNode.update",
        "MCTSNode.get_ucb",
        "DreamWorldAgent.__init__",
        "DreamWorldAgent._setup_sockets",
        "DreamWorldAgent._start_health_check",
        "DreamWorldAgent._initialize_background",
        "DreamWorldAgent._setup_dependencies",
        "DreamWorldAgent._init_database",
        "DreamWorldAgent._load_scenario_templates",
        "DreamWorldAgent._save_simulation",
        "DreamWorldAgent._save_simulation_state",
        "DreamWorldAgent._evaluate_state",
        "DreamWorldAgent._calculate_uncertainty",
        "DreamWorldAgent._apply_action",
        "DreamWorldAgent._analyze_causality",
        "DreamWorldAgent._generate_counterfactuals",
        "DreamWorldAgent._select_node",
        "DreamWorldAgent._expand_node",
        "DreamWorldAgent._simulate",
        "DreamWorldAgent._backpropagate",
        "DreamWorldAgent.run_simulation",
        "DreamWorldAgent._update_simulation_states",
        "DreamWorldAgent.handle_request",
        "DreamWorldAgent._get_simulation_history",
        "DreamWorldAgent._create_scenario",
        "DreamWorldAgent._get_scenario",
        "DreamWorldAgent._update_scenario",
        "DreamWorldAgent.start",
        "DreamWorldAgent._get_health_status",
        "DreamWorldAgent.run",
        "DreamWorldAgent.cleanup",
        "DreamWorldAgent.process_message",
        "load_network_config",
        "__init__",
        "add_child",
        "update",
        "get_ucb",
        "__init__",
        "_setup_sockets",
        "_start_health_check",
        "_initialize_background",
        "_setup_dependencies",
        "_init_database",
        "_load_scenario_templates",
        "_save_simulation",
        "_save_simulation_state",
        "_evaluate_state",
        "_calculate_uncertainty",
        "_apply_action",
        "_analyze_causality",
        "_generate_counterfactuals",
        "_select_node",
        "_expand_node",
        "_simulate",
        "_backpropagate",
        "run_simulation",
        "_update_simulation_states",
        "handle_request",
        "_get_simulation_history",
        "_create_scenario",
        "_get_scenario",
        "_update_scenario",
        "start",
        "_get_health_status",
        "run",
        "cleanup",
        "process_message",
        "health_check_loop"
      ],
      "health_checks": [
        "__init__->_start_health_check",
        "DreamWorldAgent._start_health_check",
        "_start_health_check",
        "DreamWorldAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "__init__->_start_health_check",
        "_start_health_check",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "health_check_loop"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "pc2_code.config.system_config.get_service_host",
        "pc2_code.config.system_config.get_service_port",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config",
        "common.utils.path_manager.PathManager",
        "pc2_code.utils.config_loader.parse_agent_args"
      ],
      "external_dependencies": [
        "os",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "yaml",
        "zmq",
        "json",
        "logging",
        "time",
        "threading",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "math",
        "random",
        "numpy",
        "concurrent.futures.ThreadPoolExecutor",
        "sqlite3",
        "dataclasses.dataclass",
        "enum.Enum",
        "sys",
        "pathlib.Path",
        "sys",
        "os",
        "pc2_code.utils.config_loader.load_config",
        "common.env_helpers.get_env",
        "traceback"
      ]
    },
    "UnifiedMemoryReasoningAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/unified_memory_reasoning_agent.py",
      "lines_of_code": 894,
      "classes": [
        "ContextManager",
        "UnifiedMemoryReasoningAgent"
      ],
      "functions": [
        "ContextManager.__init__",
        "ContextManager.add_to_context",
        "ContextManager.get_context",
        "ContextManager.get_context_text",
        "ContextManager.clear_context",
        "ContextManager._calculate_importance",
        "ContextManager._adjust_context_size",
        "ContextManager.prune_context",
        "UnifiedMemoryReasoningAgent._lazy_import_dependencies",
        "UnifiedMemoryReasoningAgent._lazy_import_dependencies",
        "UnifiedMemoryReasoningAgent.__init__",
        "UnifiedMemoryReasoningAgent._perform_initialization",
        "UnifiedMemoryReasoningAgent.load_context_store",
        "UnifiedMemoryReasoningAgent.save_context_store",
        "UnifiedMemoryReasoningAgent.load_error_patterns",
        "UnifiedMemoryReasoningAgent.save_error_patterns",
        "UnifiedMemoryReasoningAgent.load_twins",
        "UnifiedMemoryReasoningAgent.save_twins",
        "UnifiedMemoryReasoningAgent.update_twin",
        "UnifiedMemoryReasoningAgent.get_twin",
        "UnifiedMemoryReasoningAgent.delete_twin",
        "UnifiedMemoryReasoningAgent.get_session_id",
        "UnifiedMemoryReasoningAgent.add_interaction",
        "UnifiedMemoryReasoningAgent._update_session_summary",
        "UnifiedMemoryReasoningAgent._summarize_code",
        "UnifiedMemoryReasoningAgent._summarize_conversation",
        "UnifiedMemoryReasoningAgent._extract_key_errors",
        "UnifiedMemoryReasoningAgent.add_error_pattern",
        "UnifiedMemoryReasoningAgent.get_error_solution",
        "UnifiedMemoryReasoningAgent.get_context_summary",
        "UnifiedMemoryReasoningAgent._compress_summary",
        "UnifiedMemoryReasoningAgent.coordinate_memory",
        "UnifiedMemoryReasoningAgent.resolve_conflict",
        "UnifiedMemoryReasoningAgent.handle_request",
        "UnifiedMemoryReasoningAgent._get_health_status",
        "UnifiedMemoryReasoningAgent.cleanup",
        "main",
        "__init__",
        "add_to_context",
        "get_context",
        "get_context_text",
        "clear_context",
        "_calculate_importance",
        "_adjust_context_size",
        "prune_context",
        "_lazy_import_dependencies",
        "_lazy_import_dependencies",
        "__init__",
        "_perform_initialization",
        "load_context_store",
        "save_context_store",
        "load_error_patterns",
        "save_error_patterns",
        "load_twins",
        "save_twins",
        "update_twin",
        "get_twin",
        "delete_twin",
        "get_session_id",
        "add_interaction",
        "_update_session_summary",
        "_summarize_code",
        "_summarize_conversation",
        "_extract_key_errors",
        "add_error_pattern",
        "get_error_solution",
        "get_context_summary",
        "_compress_summary",
        "coordinate_memory",
        "resolve_conflict",
        "handle_request",
        "_get_health_status",
        "cleanup"
      ],
      "health_checks": [
        "handle_request->_get_health_status",
        "UnifiedMemoryReasoningAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "handle_request->_get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent"
      ],
      "external_dependencies": [
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "os",
        "threading",
        "time",
        "logging",
        "hashlib",
        "traceback",
        "re",
        "datetime.datetime",
        "collections.deque",
        "pathlib.Path",
        "sys",
        "sys",
        "os",
        "pc2_code.config.system_config.config",
        "common.env_helpers.get_env",
        "numpy"
      ]
    },
    "TutorAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/tutor_agent.py",
      "lines_of_code": 682,
      "classes": [
        "StudentProfile",
        "Lesson",
        "PerformanceMetrics",
        "AdaptiveLearningEngine",
        "ProgressTracker",
        "FeedbackGenerator",
        "ParentDashboard",
        "TutorAgent"
      ],
      "functions": [
        "AdaptiveLearningEngine.__init__",
        "AdaptiveLearningEngine._init_difficulty_model",
        "AdaptiveLearningEngine._init_learning_style_model",
        "AdaptiveLearningEngine.adjust_difficulty",
        "AdaptiveLearningEngine.analyze_learning_style",
        "ProgressTracker.__init__",
        "ProgressTracker.update_progress",
        "ProgressTracker.analyze_progress",
        "ProgressTracker._identify_weak_areas",
        "ProgressTracker._identify_strong_areas",
        "ProgressTracker._generate_recommendations",
        "FeedbackGenerator.__init__",
        "FeedbackGenerator._load_feedback_templates",
        "FeedbackGenerator.generate_feedback",
        "ParentDashboard.__init__",
        "ParentDashboard.update_dashboard",
        "ParentDashboard.get_dashboard_data",
        "ParentDashboard.set_goals",
        "ParentDashboard.add_notification",
        "TutorAgent._lazy_import_dependencies",
        "TutorAgent._lazy_import_dependencies",
        "TutorAgent.__init__",
        "TutorAgent._load_lessons",
        "TutorAgent._get_health_status",
        "TutorAgent.handle_request",
        "TutorAgent._handle_get_student",
        "TutorAgent._handle_update_student",
        "TutorAgent._handle_get_lesson",
        "TutorAgent._handle_submit_performance",
        "TutorAgent._handle_get_progress",
        "TutorAgent._handle_set_goal",
        "TutorAgent.cleanup",
        "__init__",
        "_init_difficulty_model",
        "_init_learning_style_model",
        "adjust_difficulty",
        "analyze_learning_style",
        "__init__",
        "update_progress",
        "analyze_progress",
        "_identify_weak_areas",
        "_identify_strong_areas",
        "_generate_recommendations",
        "__init__",
        "_load_feedback_templates",
        "generate_feedback",
        "__init__",
        "update_dashboard",
        "get_dashboard_data",
        "set_goals",
        "add_notification",
        "_lazy_import_dependencies",
        "_lazy_import_dependencies",
        "__init__",
        "_load_lessons",
        "_get_health_status",
        "handle_request",
        "_handle_get_student",
        "_handle_update_student",
        "_handle_get_lesson",
        "_handle_submit_performance",
        "_handle_get_progress",
        "_handle_set_goal",
        "cleanup"
      ],
      "health_checks": [
        "TutorAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "handle_request->_get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "handle_request->_get_health_status"
      ],
      "agent_dependencies": [
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config",
        "pc2_code.utils.config_loader.parse_agent_args"
      ],
      "external_dependencies": [
        "os",
        "json",
        "time",
        "logging",
        "threading",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.field",
        "zmq",
        "uuid",
        "sys",
        "pathlib.Path",
        "sys",
        "os",
        "pc2_code.utils.config_loader.load_config",
        "common_utils.zmq_helper.create_socket",
        "random",
        "numpy",
        "torch",
        "torch.nn",
        "torch.utils.data.DataLoader",
        "pandas",
        "sklearn.preprocessing.StandardScaler",
        "sklearn.cluster.KMeans"
      ]
    },
    "TutoringAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/tutoring_agent.py",
      "lines_of_code": 408,
      "classes": [
        "AdvancedTutoringAgent"
      ],
      "functions": [
        "load_network_config",
        "AdvancedTutoringAgent.__init__",
        "AdvancedTutoringAgent._start_health_check",
        "AdvancedTutoringAgent._get_health_status",
        "AdvancedTutoringAgent._generate_lesson",
        "AdvancedTutoringAgent._generate_fallback_lesson",
        "AdvancedTutoringAgent.handle_request",
        "AdvancedTutoringAgent.run",
        "AdvancedTutoringAgent.cleanup",
        "__init__",
        "_start_health_check",
        "_get_health_status",
        "_generate_lesson",
        "_generate_fallback_lesson",
        "handle_request",
        "run",
        "cleanup"
      ],
      "health_checks": [
        "__init__->_start_health_check",
        "AdvancedTutoringAgent._start_health_check",
        "_start_health_check",
        "AdvancedTutoringAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "handle_request->_get_health_status",
        "__init__->_start_health_check",
        "_start_health_check",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "handle_request->_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config"
      ],
      "external_dependencies": [
        "logging",
        "yaml",
        "os",
        "time",
        "json",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "threading",
        "sys",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "sys",
        "os",
        "common_utils.zmq_helper.create_socket",
        "traceback",
        "re"
      ]
    },
    "ContextManager": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/context_manager.py",
      "lines_of_code": 394,
      "classes": [
        "ContextManager",
        "ContextManagerAgent"
      ],
      "functions": [
        "ContextManager.__init__",
        "ContextManager.add_to_context",
        "ContextManager.get_context",
        "ContextManager.get_context_text",
        "ContextManager.clear_context",
        "ContextManager._calculate_importance",
        "ContextManager._adjust_context_size",
        "ContextManager.prune_context",
        "ContextManager.connect_to_main_pc_service",
        "ContextManagerAgent.__init__",
        "ContextManagerAgent._setup_sockets",
        "ContextManagerAgent._start_health_check",
        "ContextManagerAgent._initialize_background",
        "ContextManagerAgent.handle_request",
        "ContextManagerAgent.run",
        "ContextManagerAgent._get_health_status",
        "ContextManagerAgent.cleanup",
        "ContextManagerAgent.shutdown",
        "load_network_config",
        "__init__",
        "add_to_context",
        "get_context",
        "get_context_text",
        "clear_context",
        "_calculate_importance",
        "_adjust_context_size",
        "prune_context",
        "connect_to_main_pc_service",
        "__init__",
        "_setup_sockets",
        "_start_health_check",
        "_initialize_background",
        "handle_request",
        "run",
        "_get_health_status",
        "cleanup",
        "shutdown",
        "health_check_loop"
      ],
      "health_checks": [
        "__init__->_start_health_check",
        "ContextManagerAgent._start_health_check",
        "_start_health_check",
        "ContextManagerAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "__init__->_start_health_check",
        "_start_health_check",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "health_check_loop"
      ],
      "agent_dependencies": [
        "pc2_code.agents.utils.config_loader.Config",
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent"
      ],
      "external_dependencies": [
        "zmq",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "yaml",
        "json",
        "logging",
        "threading",
        "time",
        "sys",
        "os",
        "numpy",
        "collections.deque",
        "re",
        "datetime.datetime",
        "sys",
        "os",
        "main_pc_code.utils.config_loader.load_config",
        "traceback"
      ]
    },
    "ExperienceTracker": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/experience_tracker.py",
      "lines_of_code": 236,
      "classes": [
        "ExperienceTrackerAgent"
      ],
      "functions": [
        "load_network_config",
        "ExperienceTrackerAgent.__init__",
        "ExperienceTrackerAgent._setup_sockets",
        "ExperienceTrackerAgent._start_health_check",
        "ExperienceTrackerAgent._initialize_background",
        "ExperienceTrackerAgent.handle_request",
        "ExperienceTrackerAgent.run",
        "ExperienceTrackerAgent._get_health_status",
        "ExperienceTrackerAgent.cleanup",
        "ExperienceTrackerAgent.shutdown",
        "ExperienceTrackerAgent.connect_to_main_pc_service",
        "__init__",
        "_setup_sockets",
        "_start_health_check",
        "_initialize_background",
        "handle_request",
        "run",
        "_get_health_status",
        "cleanup",
        "shutdown",
        "connect_to_main_pc_service",
        "health_check_loop"
      ],
      "health_checks": [
        "__init__->_start_health_check",
        "ExperienceTrackerAgent._start_health_check",
        "_start_health_check",
        "ExperienceTrackerAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "__init__->_start_health_check",
        "_start_health_check",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "health_check_loop"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config"
      ],
      "external_dependencies": [
        "zmq",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "yaml",
        "json",
        "logging",
        "threading",
        "time",
        "sys",
        "os",
        "datetime.datetime",
        "sys",
        "os",
        "traceback"
      ]
    },
    "ResourceManager": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/resource_manager.py",
      "lines_of_code": 472,
      "classes": [
        "ResourceManager"
      ],
      "functions": [
        "ResourceManager.__init__",
        "ResourceManager._setup_sockets",
        "ResourceManager._start_health_check",
        "ResourceManager._initialize_background",
        "ResourceManager._init_resource_monitoring",
        "ResourceManager.get_current_stats",
        "ResourceManager.check_resources_available",
        "ResourceManager.allocate_resources",
        "ResourceManager.release_resources",
        "ResourceManager.get_resource_status",
        "ResourceManager.set_thresholds",
        "ResourceManager.handle_request",
        "ResourceManager.run",
        "ResourceManager._get_health_status",
        "ResourceManager.cleanup",
        "ResourceManager.shutdown",
        "ResourceManager.connect_to_main_pc_service",
        "load_network_config",
        "__init__",
        "_setup_sockets",
        "_start_health_check",
        "_initialize_background",
        "_init_resource_monitoring",
        "get_current_stats",
        "check_resources_available",
        "allocate_resources",
        "release_resources",
        "get_resource_status",
        "set_thresholds",
        "handle_request",
        "run",
        "_get_health_status",
        "cleanup",
        "shutdown",
        "connect_to_main_pc_service",
        "health_check_loop"
      ],
      "health_checks": [
        "__init__->_start_health_check",
        "ResourceManager._start_health_check",
        "_start_health_check",
        "_init_resource_monitoring",
        "ResourceManager.check_resources_available",
        "check_resources_available",
        "allocate_resources->check_resources_available",
        "ResourceManager.get_resource_status",
        "get_resource_status",
        "get_resource_status->check_resources_available",
        "handle_request->check_resources_available",
        "handle_request->get_resource_status",
        "ResourceManager._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "__init__->_start_health_check",
        "_start_health_check",
        "_init_resource_monitoring",
        "check_resources_available",
        "allocate_resources->check_resources_available",
        "get_resource_status",
        "get_resource_status->check_resources_available",
        "handle_request->check_resources_available",
        "handle_request->get_resource_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "health_check_loop"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config"
      ],
      "external_dependencies": [
        "zmq",
        "pathlib.Path",
        "yaml",
        "json",
        "logging",
        "threading",
        "time",
        "sys",
        "os",
        "psutil",
        "datetime.datetime",
        "collections.deque",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "torch",
        "traceback"
      ]
    },
    "TaskScheduler": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/task_scheduler.py",
      "lines_of_code": 231,
      "classes": [
        "TaskSchedulerAgent"
      ],
      "functions": [
        "load_network_config",
        "TaskSchedulerAgent.__init__",
        "TaskSchedulerAgent._setup_sockets",
        "TaskSchedulerAgent._start_health_check",
        "TaskSchedulerAgent._initialize_background",
        "TaskSchedulerAgent.handle_request",
        "TaskSchedulerAgent.run",
        "TaskSchedulerAgent._get_health_status",
        "TaskSchedulerAgent.cleanup",
        "TaskSchedulerAgent.shutdown",
        "TaskSchedulerAgent.connect_to_main_pc_service",
        "__init__",
        "_setup_sockets",
        "_start_health_check",
        "_initialize_background",
        "handle_request",
        "run",
        "_get_health_status",
        "cleanup",
        "shutdown",
        "connect_to_main_pc_service",
        "health_check_loop"
      ],
      "health_checks": [
        "__init__->_start_health_check",
        "TaskSchedulerAgent._start_health_check",
        "_start_health_check",
        "TaskSchedulerAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "__init__->_start_health_check",
        "_start_health_check",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "health_check_loop"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config"
      ],
      "external_dependencies": [
        "zmq",
        "yaml",
        "json",
        "logging",
        "threading",
        "time",
        "sys",
        "pathlib.Path",
        "os",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "main_pc_code.utils.network_utils.get_zmq_connection_string",
        "main_pc_code.utils.network_utils.get_machine_ip",
        "common.env_helpers.get_env",
        "traceback"
      ]
    },
    "AuthenticationAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/ForPC2/AuthenticationAgent.py",
      "lines_of_code": 463,
      "classes": [
        "AuthenticationAgent"
      ],
      "functions": [
        "load_network_config",
        "AuthenticationAgent.__init__",
        "AuthenticationAgent.setup_error_reporting",
        "AuthenticationAgent.report_error",
        "AuthenticationAgent._cleanup_sessions_loop",
        "AuthenticationAgent._cleanup_expired_sessions",
        "AuthenticationAgent._hash_password",
        "AuthenticationAgent._generate_token",
        "AuthenticationAgent._create_session",
        "AuthenticationAgent._validate_token",
        "AuthenticationAgent.handle_request",
        "AuthenticationAgent._handle_registration",
        "AuthenticationAgent._handle_login",
        "AuthenticationAgent._handle_logout",
        "AuthenticationAgent._handle_token_validation",
        "AuthenticationAgent._get_health_status",
        "AuthenticationAgent.run",
        "AuthenticationAgent.cleanup",
        "AuthenticationAgent.stop",
        "AuthenticationAgent.connect_to_main_pc_service",
        "__init__",
        "setup_error_reporting",
        "report_error",
        "_cleanup_sessions_loop",
        "_cleanup_expired_sessions",
        "_hash_password",
        "_generate_token",
        "_create_session",
        "_validate_token",
        "handle_request",
        "_handle_registration",
        "_handle_login",
        "_handle_logout",
        "_handle_token_validation",
        "_get_health_status",
        "run",
        "cleanup",
        "stop",
        "connect_to_main_pc_service"
      ],
      "health_checks": [
        "handle_request->_get_health_status",
        "AuthenticationAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->is_alive",
        "handle_request->_get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->is_alive"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config"
      ],
      "external_dependencies": [
        "zmq",
        "json",
        "logging",
        "pathlib.Path",
        "threading",
        "time",
        "hashlib",
        "os",
        "sys",
        "yaml",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "traceback"
      ]
    },
    "UnifiedUtilsAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/ForPC2/unified_utils_agent.py",
      "lines_of_code": 425,
      "classes": [
        "UnifiedUtilsAgent"
      ],
      "functions": [
        "load_network_config",
        "UnifiedUtilsAgent.__init__",
        "UnifiedUtilsAgent.setup_error_reporting",
        "UnifiedUtilsAgent.report_error",
        "UnifiedUtilsAgent.cleanup_temp_files",
        "UnifiedUtilsAgent.cleanup_logs",
        "UnifiedUtilsAgent.cleanup_cache",
        "UnifiedUtilsAgent.cleanup_browser_cache",
        "UnifiedUtilsAgent._get_dir_size",
        "UnifiedUtilsAgent.run_windows_disk_cleanup",
        "UnifiedUtilsAgent.cleanup_system",
        "UnifiedUtilsAgent._get_health_status",
        "UnifiedUtilsAgent.handle_request",
        "UnifiedUtilsAgent.run",
        "UnifiedUtilsAgent.cleanup",
        "UnifiedUtilsAgent.stop",
        "UnifiedUtilsAgent.connect_to_main_pc_service",
        "__init__",
        "setup_error_reporting",
        "report_error",
        "cleanup_temp_files",
        "cleanup_logs",
        "cleanup_cache",
        "cleanup_browser_cache",
        "_get_dir_size",
        "run_windows_disk_cleanup",
        "cleanup_system",
        "_get_health_status",
        "handle_request",
        "run",
        "cleanup",
        "stop",
        "connect_to_main_pc_service"
      ],
      "health_checks": [
        "UnifiedUtilsAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "handle_request->_get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "handle_request->_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config"
      ],
      "external_dependencies": [
        "os",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "yaml",
        "platform",
        "shutil",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "pathlib.Path",
        "subprocess",
        "sys",
        "zmq",
        "json",
        "threading",
        "time",
        "pathlib.Path",
        "traceback"
      ]
    },
    "ProactiveContextMonitor": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/ForPC2/proactive_context_monitor.py",
      "lines_of_code": 384,
      "classes": [
        "ProactiveContextMonitor"
      ],
      "functions": [
        "load_network_config",
        "ProactiveContextMonitor.__init__",
        "ProactiveContextMonitor.setup_error_reporting",
        "ProactiveContextMonitor.report_error",
        "ProactiveContextMonitor._start_background_threads",
        "ProactiveContextMonitor._context_analysis_loop",
        "ProactiveContextMonitor._get_health_status",
        "ProactiveContextMonitor.handle_request",
        "ProactiveContextMonitor._handle_add_context",
        "ProactiveContextMonitor._handle_get_context_history",
        "ProactiveContextMonitor._handle_clear_context_history",
        "ProactiveContextMonitor.run",
        "ProactiveContextMonitor.cleanup",
        "ProactiveContextMonitor.connect_to_main_pc_service",
        "__init__",
        "setup_error_reporting",
        "report_error",
        "_start_background_threads",
        "_context_analysis_loop",
        "_get_health_status",
        "handle_request",
        "_handle_add_context",
        "_handle_get_context_history",
        "_handle_clear_context_history",
        "run",
        "cleanup",
        "connect_to_main_pc_service"
      ],
      "health_checks": [
        "ProactiveContextMonitor._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "handle_request->_get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "handle_request->_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config"
      ],
      "external_dependencies": [
        "zmq",
        "json",
        "logging",
        "threading",
        "time",
        "os",
        "sys",
        "yaml",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "pathlib.Path",
        "pathlib.Path",
        "traceback"
      ]
    },
    "AgentTrustScorer": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/AgentTrustScorer.py",
      "lines_of_code": 368,
      "classes": [
        "AgentTrustScorer"
      ],
      "functions": [
        "load_network_config",
        "AgentTrustScorer.__init__",
        "AgentTrustScorer._init_database",
        "AgentTrustScorer._update_trust_score",
        "AgentTrustScorer._get_trust_score",
        "AgentTrustScorer._get_performance_history",
        "AgentTrustScorer.handle_request",
        "AgentTrustScorer._get_health_status",
        "AgentTrustScorer.cleanup",
        "AgentTrustScorer.run",
        "__init__",
        "_init_database",
        "_update_trust_score",
        "_get_trust_score",
        "_get_performance_history",
        "handle_request",
        "_get_health_status",
        "cleanup",
        "run"
      ],
      "health_checks": [
        "handle_request->_get_health_status",
        "AgentTrustScorer._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "handle_request->_get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config"
      ],
      "external_dependencies": [
        "zmq",
        "yaml",
        "sys",
        "os",
        "json",
        "time",
        "logging",
        "sqlite3",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "sys",
        "os",
        "traceback"
      ]
    },
    "FileSystemAssistantAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/filesystem_assistant_agent.py",
      "lines_of_code": 571,
      "classes": [
        "FileSystemAssistantAgent"
      ],
      "functions": [
        "load_network_config",
        "FileSystemAssistantAgent.__init__",
        "FileSystemAssistantAgent._start_health_check_thread",
        "FileSystemAssistantAgent._get_health_status",
        "FileSystemAssistantAgent.handle_query",
        "FileSystemAssistantAgent.get_status",
        "FileSystemAssistantAgent.run",
        "FileSystemAssistantAgent.cleanup",
        "FileSystemAssistantAgent.stop",
        "FileSystemAssistantAgent.connect_to_main_pc_service",
        "__init__",
        "_start_health_check_thread",
        "_get_health_status",
        "handle_query",
        "get_status",
        "run",
        "cleanup",
        "stop",
        "connect_to_main_pc_service"
      ],
      "health_checks": [
        "__init__->_start_health_check_thread",
        "FileSystemAssistantAgent._start_health_check_thread",
        "_start_health_check_thread",
        "FileSystemAssistantAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->is_alive",
        "handle_query->_get_health_status",
        "FileSystemAssistantAgent.get_status",
        "get_status",
        "get_status->_get_health_status",
        "cleanup->is_alive",
        "__init__->_start_health_check_thread",
        "_start_health_check_thread",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->is_alive",
        "handle_query->_get_health_status",
        "get_status",
        "get_status->_get_health_status",
        "cleanup->is_alive"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config",
        "pc2_code.utils.config_loader.parse_agent_args"
      ],
      "external_dependencies": [
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "os",
        "sys",
        "threading",
        "logging",
        "shutil",
        "yaml",
        "zmq",
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "time",
        "sys",
        "os",
        "pc2_code.utils.config_loader.load_config",
        "common_utils.zmq_helper.create_socket",
        "traceback"
      ]
    },
    "RemoteConnectorAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/remote_connector_agent.py",
      "lines_of_code": 843,
      "classes": [
        "RemoteConnectorAgent"
      ],
      "functions": [
        "load_network_config",
        "RemoteConnectorAgent._lazy_import_dependencies",
        "RemoteConnectorAgent.__init__",
        "RemoteConnectorAgent._start_health_check_thread",
        "RemoteConnectorAgent._get_health_status",
        "RemoteConnectorAgent._calculate_cache_key",
        "RemoteConnectorAgent._check_cache",
        "RemoteConnectorAgent._save_to_cache",
        "RemoteConnectorAgent.send_to_ollama",
        "RemoteConnectorAgent.send_to_deepseek",
        "RemoteConnectorAgent.check_model_status",
        "RemoteConnectorAgent.handle_model_status_updates",
        "RemoteConnectorAgent.handle_requests",
        "RemoteConnectorAgent.run",
        "RemoteConnectorAgent.cleanup",
        "RemoteConnectorAgent.connect_to_main_pc_service",
        "_lazy_import_dependencies",
        "__init__",
        "_start_health_check_thread",
        "_get_health_status",
        "_calculate_cache_key",
        "_check_cache",
        "_save_to_cache",
        "send_to_ollama",
        "send_to_deepseek",
        "check_model_status",
        "handle_model_status_updates",
        "handle_requests",
        "run",
        "cleanup",
        "connect_to_main_pc_service"
      ],
      "health_checks": [
        "RemoteConnectorAgent._start_health_check_thread",
        "_start_health_check_thread",
        "RemoteConnectorAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->is_alive",
        "_get_health_status->is_alive",
        "RemoteConnectorAgent._check_cache",
        "_check_cache",
        "send_to_ollama->_check_cache",
        "send_to_ollama->raise_for_status",
        "send_to_deepseek->_check_cache",
        "send_to_deepseek->raise_for_status",
        "RemoteConnectorAgent.check_model_status",
        "check_model_status",
        "check_model_status->raise_for_status",
        "RemoteConnectorAgent.handle_model_status_updates",
        "handle_model_status_updates",
        "handle_requests->_get_health_status",
        "handle_requests->check_model_status",
        "run->_start_health_check_thread",
        "cleanup->is_alive",
        "cleanup->is_alive",
        "_start_health_check_thread",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_get_health_status->is_alive",
        "_get_health_status->is_alive",
        "_check_cache",
        "send_to_ollama->_check_cache",
        "send_to_ollama->raise_for_status",
        "send_to_deepseek->_check_cache",
        "send_to_deepseek->raise_for_status",
        "check_model_status",
        "check_model_status->raise_for_status",
        "handle_model_status_updates",
        "handle_requests->_get_health_status",
        "handle_requests->check_model_status",
        "run->_start_health_check_thread",
        "cleanup->is_alive",
        "cleanup->is_alive"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config",
        "pc2_code.utils.config_loader.parse_agent_args"
      ],
      "external_dependencies": [
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "zmq",
        "json",
        "time",
        "logging",
        "threading",
        "sys",
        "os",
        "traceback",
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timedelta",
        "hashlib",
        "yaml",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "typing.List",
        "sys",
        "os",
        "pc2_code.utils.config_loader.load_config",
        "common.env_helpers.get_env",
        "traceback",
        "requests"
      ]
    },
    "UnifiedWebAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/unified_web_agent.py",
      "lines_of_code": 1900,
      "classes": [
        "UnifiedWebAgent"
      ],
      "functions": [
        "UnifiedWebAgent.__init__",
        "UnifiedWebAgent._load_config",
        "UnifiedWebAgent._create_tables",
        "UnifiedWebAgent._start_interrupt_thread",
        "UnifiedWebAgent._interrupt_monitor_loop",
        "UnifiedWebAgent._handle_interrupt",
        "UnifiedWebAgent._health_check",
        "UnifiedWebAgent.navigate_to_url",
        "UnifiedWebAgent.fill_form",
        "UnifiedWebAgent._get_cached_content",
        "UnifiedWebAgent._cache_content",
        "UnifiedWebAgent._send_to_llm",
        "UnifiedWebAgent._get_conversation_context",
        "UnifiedWebAgent._enhance_search_query",
        "UnifiedWebAgent._rank_search_results",
        "UnifiedWebAgent.search_web",
        "UnifiedWebAgent.analyze_conversation",
        "UnifiedWebAgent._extract_topics",
        "UnifiedWebAgent.proactive_info_gathering",
        "UnifiedWebAgent._generate_search_queries",
        "UnifiedWebAgent.get_status",
        "UnifiedWebAgent._get_cache_size",
        "UnifiedWebAgent._get_scraping_history_size",
        "UnifiedWebAgent._get_form_history_size",
        "UnifiedWebAgent.handle_request",
        "UnifiedWebAgent.run",
        "UnifiedWebAgent.cleanup",
        "UnifiedWebAgent.stop",
        "UnifiedWebAgent._init_web_driver",
        "UnifiedWebAgent._register_with_service_discovery",
        "UnifiedWebAgent._init_memory_connection",
        "UnifiedWebAgent._send_ping_to_memory",
        "UnifiedWebAgent.extract_links",
        "UnifiedWebAgent.search",
        "UnifiedWebAgent._extract_search_results",
        "UnifiedWebAgent._record_search",
        "UnifiedWebAgent.send_to_memory",
        "UnifiedWebAgent._start_proactive_thread",
        "UnifiedWebAgent._proactive_info_gathering_loop",
        "UnifiedWebAgent._recently_searched",
        "UnifiedWebAgent._store_proactive_info",
        "UnifiedWebAgent._update_proactive_info_memory_status",
        "UnifiedWebAgent.browse_with_context",
        "UnifiedWebAgent._refine_query_from_context",
        "UnifiedWebAgent._prioritize_results_with_context",
        "UnifiedWebAgent._extract_relevant_data",
        "UnifiedWebAgent._store_browsing_context",
        "UnifiedWebAgent._get_health_status",
        "__init__",
        "_load_config",
        "_create_tables",
        "_start_interrupt_thread",
        "_interrupt_monitor_loop",
        "_handle_interrupt",
        "_health_check",
        "navigate_to_url",
        "fill_form",
        "_get_cached_content",
        "_cache_content",
        "_send_to_llm",
        "_get_conversation_context",
        "_enhance_search_query",
        "_rank_search_results",
        "search_web",
        "analyze_conversation",
        "_extract_topics",
        "proactive_info_gathering",
        "_generate_search_queries",
        "get_status",
        "_get_cache_size",
        "_get_scraping_history_size",
        "_get_form_history_size",
        "handle_request",
        "run",
        "cleanup",
        "stop",
        "_init_web_driver",
        "_register_with_service_discovery",
        "_init_memory_connection",
        "_send_ping_to_memory",
        "extract_links",
        "search",
        "_extract_search_results",
        "_record_search",
        "send_to_memory",
        "_start_proactive_thread",
        "_proactive_info_gathering_loop",
        "_recently_searched",
        "_store_proactive_info",
        "_update_proactive_info_memory_status",
        "browse_with_context",
        "_refine_query_from_context",
        "_prioritize_results_with_context",
        "_extract_relevant_data",
        "_store_browsing_context",
        "_get_health_status"
      ],
      "health_checks": [
        "_interrupt_monitor_loop",
        "UnifiedWebAgent._health_check",
        "_health_check",
        "_health_check->_get_health_status",
        "navigate_to_url->raise_for_status",
        "UnifiedWebAgent.get_status",
        "get_status",
        "get_status->_get_scraping_history_size",
        "UnifiedWebAgent._get_scraping_history_size",
        "_get_scraping_history_size",
        "handle_request->_health_check",
        "handle_request->get_status",
        "_init_memory_connection->_send_ping_to_memory",
        "UnifiedWebAgent._send_ping_to_memory",
        "_send_ping_to_memory",
        "_proactive_info_gathering_loop->_update_proactive_info_memory_status",
        "UnifiedWebAgent._update_proactive_info_memory_status",
        "_update_proactive_info_memory_status",
        "UnifiedWebAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "_interrupt_monitor_loop",
        "_health_check",
        "_health_check->_get_health_status",
        "navigate_to_url->raise_for_status",
        "get_status",
        "get_status->_get_scraping_history_size",
        "_get_scraping_history_size",
        "handle_request->_health_check",
        "handle_request->get_status",
        "_init_memory_connection->_send_ping_to_memory",
        "_send_ping_to_memory",
        "_proactive_info_gathering_loop->_update_proactive_info_memory_status",
        "_update_proactive_info_memory_status",
        "_get_health_status",
        "_get_health_status->_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "selenium.webdriver.chrome.service.Service",
        "main_pc_code.utils.service_discovery_client.register_service",
        "main_pc_code.utils.service_discovery_client.discover_service",
        "main_pc_code.utils.service_discovery_client.get_service_address",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config",
        "pc2_code.utils.config_loader.parse_agent_args",
        "webdriver_manager.chrome.ChromeDriverManager",
        "selenium.webdriver.chrome.service.Service"
      ],
      "external_dependencies": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "typing.List",
        "typing.Tuple",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "time",
        "logging",
        "sys",
        "os",
        "traceback",
        "threading",
        "requests",
        "re",
        "sqlite3",
        "pathlib.Path",
        "datetime.datetime",
        "hashlib",
        "base64",
        "bs4.BeautifulSoup",
        "urllib.parse",
        "tempfile",
        "socket",
        "yaml",
        "pickle",
        "selenium.webdriver",
        "selenium.webdriver.chrome.options.Options",
        "selenium.webdriver.common.by.By",
        "selenium.webdriver.support.ui.WebDriverWait",
        "selenium.webdriver.support.expected_conditions",
        "selenium.common.exceptions.TimeoutException",
        "selenium.common.exceptions.NoSuchElementException",
        "selenium.common.exceptions.WebDriverException",
        "selenium.common.exceptions.StaleElementReferenceException",
        "main_pc_code.utils.network_utils.load_network_config",
        "main_pc_code.utils.network_utils.get_current_machine",
        "main_pc_code.utils.env_loader.get_env",
        "pc2_code.utils.config_loader.load_config",
        "common.env_helpers.get_env",
        "main_pc_code.src.network.secure_zmq.configure_secure_client",
        "main_pc_code.src.network.secure_zmq.configure_secure_server",
        "main_pc_code.src.network.secure_zmq.start_auth",
        "collections.Counter",
        "traceback",
        "selenium.webdriver.firefox.options.Options"
      ]
    },
    "DreamingModeAgent": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/DreamingModeAgent.py",
      "lines_of_code": 481,
      "classes": [
        "DreamingModeAgent"
      ],
      "functions": [
        "load_network_config",
        "DreamingModeAgent.__init__",
        "DreamingModeAgent.setup_error_reporting",
        "DreamingModeAgent.report_error",
        "DreamingModeAgent._start_health_check_thread",
        "DreamingModeAgent._start_scheduler_thread",
        "DreamingModeAgent._health_check",
        "DreamingModeAgent._get_health_status",
        "DreamingModeAgent.start_dreaming",
        "DreamingModeAgent.stop_dreaming",
        "DreamingModeAgent._dream_cycle",
        "DreamingModeAgent._record_dream_result",
        "DreamingModeAgent.get_dream_status",
        "DreamingModeAgent.set_dream_interval",
        "DreamingModeAgent.optimize_dream_schedule",
        "DreamingModeAgent.handle_request",
        "DreamingModeAgent.run",
        "DreamingModeAgent._dream_scheduler_loop",
        "DreamingModeAgent.cleanup",
        "DreamingModeAgent.stop",
        "__init__",
        "setup_error_reporting",
        "report_error",
        "_start_health_check_thread",
        "_start_scheduler_thread",
        "_health_check",
        "_get_health_status",
        "start_dreaming",
        "stop_dreaming",
        "_dream_cycle",
        "_record_dream_result",
        "get_dream_status",
        "set_dream_interval",
        "optimize_dream_schedule",
        "handle_request",
        "run",
        "_dream_scheduler_loop",
        "cleanup",
        "stop"
      ],
      "health_checks": [
        "__init__->_start_health_check_thread",
        "DreamingModeAgent._start_health_check_thread",
        "_start_health_check_thread",
        "DreamingModeAgent._health_check",
        "_health_check",
        "_health_check->_get_health_status",
        "DreamingModeAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "DreamingModeAgent.get_dream_status",
        "get_dream_status",
        "handle_request->_get_health_status",
        "handle_request->get_dream_status",
        "__init__->_start_health_check_thread",
        "_start_health_check_thread",
        "_health_check",
        "_health_check->_get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "get_dream_status",
        "handle_request->_get_health_status",
        "handle_request->get_dream_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config",
        "pc2_code.utils.config_loader.parse_agent_args"
      ],
      "external_dependencies": [
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "json",
        "logging",
        "time",
        "threading",
        "sys",
        "os",
        "yaml",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "random",
        "sys",
        "os",
        "pc2_code.utils.config_loader.load_config",
        "traceback"
      ]
    },
    "AdvancedRouter": {
      "file_path": "/home/haymayndz/AI_System_Monorepo/pc2_code/agents/advanced_router.py",
      "lines_of_code": 557,
      "classes": [
        "AdvancedRouterAgent"
      ],
      "functions": [
        "load_network_config",
        "detect_task_type",
        "map_task_to_model_capabilities",
        "AdvancedRouterAgent.__init__",
        "AdvancedRouterAgent.setup_error_reporting",
        "AdvancedRouterAgent.report_error",
        "AdvancedRouterAgent._start_health_check_thread",
        "AdvancedRouterAgent._health_check",
        "AdvancedRouterAgent._get_health_status",
        "AdvancedRouterAgent.handle_request",
        "AdvancedRouterAgent.run",
        "AdvancedRouterAgent.cleanup",
        "__init__",
        "setup_error_reporting",
        "report_error",
        "_start_health_check_thread",
        "_health_check",
        "_get_health_status",
        "handle_request",
        "run",
        "cleanup"
      ],
      "health_checks": [
        "__init__->_start_health_check_thread",
        "AdvancedRouterAgent._start_health_check_thread",
        "_start_health_check_thread",
        "AdvancedRouterAgent._health_check",
        "_health_check",
        "_health_check->_get_health_status",
        "AdvancedRouterAgent._get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "handle_request->_get_health_status",
        "__init__->_start_health_check_thread",
        "_start_health_check_thread",
        "_health_check",
        "_health_check->_get_health_status",
        "_get_health_status",
        "_get_health_status->_get_health_status",
        "handle_request->_get_health_status"
      ],
      "agent_dependencies": [
        "common.config_manager.get_service_ip",
        "common.config_manager.get_service_url",
        "common.config_manager.get_redis_url",
        "common.utils.path_manager.PathManager",
        "common.core.base_agent.BaseAgent",
        "pc2_code.agents.utils.config_loader.Config",
        "pc2_code.utils.config_loader.parse_agent_args"
      ],
      "external_dependencies": [
        "re",
        "json",
        "logging",
        "common.pools.zmq_pool.get_req_socket",
        "common.pools.zmq_pool.get_rep_socket",
        "common.pools.zmq_pool.get_pub_socket",
        "common.pools.zmq_pool.get_sub_socket",
        "time",
        "os",
        "sys",
        "threading",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "typing.Optional",
        "typing.Union",
        "pathlib.Path",
        "sys",
        "os",
        "pc2_code.utils.config_loader.load_config",
        "yaml",
        "threading",
        "traceback"
      ]
    }
  }
}