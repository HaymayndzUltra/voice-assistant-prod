if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Enhanced Translator Agent: Translates commands from Filipino to English using tiered approach.")
    parser.add_argument('--server', action='store_true', help='Run in server mode, waiting for ZMQ messages')
    parser.add_argument('--test', action='store_true', help='Run a self-test to verify translation functionality')
    args = parser.parse_args()
    
    # Use a global try-except to catch any errors during startup
    try:
        with open("translator_agent_early.log", "a", encoding="utf-8") as f:
            f.write(f"[EARLY LOG {datetime.now()}] Translator agent script started.\n")
        
        # Create the agent
        agent = TranslatorAgent()
        logger.info("Translator Agent running and entering main loop...")
        
        if args.test:
            # Run a self-test
            logger.info("Running self-test...")
            
            test_phrases = [
                "buksan mo ang file",
                "i-save mo ang document",
                "magsimula ng bagong project",
                "Kumusta ka na?",
                "Mahalaga ang pamilya sa ating kultura.",
                "Hello, can you help me?",  # Already English
                "Pwede mo ba i-translate ito?",  # Should be translated
                "Can you please i-open ang file na ito?"  # Taglish
            ]
            
            for phrase in test_phrases:
                logger.info(f"Testing translation for: '{phrase}'")
                translated = agent.translate_command(phrase)
                logger.info(f"Translation result: '{phrase}' -> '{translated}'")
            
            logger.info("Self-test complete.")
            logger.info(f"Translation stats: {json.dumps(agent.stats)}")
            
        elif args.server:
            # Just initialize the agent and keep it running, waiting for ZMQ messages
            logger.info("Translator Agent running in server mode, waiting for messages...")
            try:
                # Keep the process alive with resilient main loop
                while True:
                    try:
                        # Run the agent's main loop
                        agent.run()
                        # If run() somehow returns (it shouldn't), log and continue
                        logger.critical("Agent.run() returned unexpectedly - restarting main loop")
                        time.sleep(1)  # Prevent rapid restart loops
                    except KeyboardInterrupt:
                        # Handle keyboard interrupt but don't exit
                        logger.info("Keyboard interrupt received, but continuing operation")
                        time.sleep(1)
                    except Exception as e:
                        # Log any exceptions but don't exit
                        logger.error(f"Error in main loop: {str(e)}")
                        traceback.print_exc()
                        time.sleep(5)  # Longer delay on errors
                        
            except KeyboardInterrupt:
                logger.info("Translator Agent interrupted by user")
        else:
            # Run the full agent
            agent.run()
    except Exception as e:
        # Only catch startup exceptions here
        with open("translator_agent_early.log", "a", encoding="utf-8") as f:
            f.write(f"[EARLY EXCEPTION] {str(e)}\n")
        logger.error(f"[EARLY EXCEPTION] {str(e)}")
        traceback.print_exc()
        
        # Keep the process alive even on startup errors if in server mode
        if args.server:
            logger.error("Error during startup, but keeping process alive in server mode")
            while True:
                time.sleep(60)  # Sleep indefinitely
        else:
            sys.exit(1)  # Exit with error in non-server mode
