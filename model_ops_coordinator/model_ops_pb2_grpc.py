# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import model_ops_pb2 as model__ops__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in model_ops_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class ModelOpsStub(object):
    """ModelOps service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Infer = channel.unary_unary(
                '/modelops.ModelOps/Infer',
                request_serializer=model__ops__pb2.InferenceRequest.SerializeToString,
                response_deserializer=model__ops__pb2.InferenceResponse.FromString,
                _registered_method=True)
        self.LoadModel = channel.unary_unary(
                '/modelops.ModelOps/LoadModel',
                request_serializer=model__ops__pb2.ModelLoadRequest.SerializeToString,
                response_deserializer=model__ops__pb2.ModelLoadReply.FromString,
                _registered_method=True)
        self.UnloadModel = channel.unary_unary(
                '/modelops.ModelOps/UnloadModel',
                request_serializer=model__ops__pb2.ModelUnloadRequest.SerializeToString,
                response_deserializer=model__ops__pb2.ModelUnloadReply.FromString,
                _registered_method=True)
        self.ListModels = channel.unary_unary(
                '/modelops.ModelOps/ListModels',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=model__ops__pb2.ModelList.FromString,
                _registered_method=True)
        self.AcquireGpuLease = channel.unary_unary(
                '/modelops.ModelOps/AcquireGpuLease',
                request_serializer=model__ops__pb2.GpuLeaseRequest.SerializeToString,
                response_deserializer=model__ops__pb2.GpuLeaseReply.FromString,
                _registered_method=True)
        self.ReleaseGpuLease = channel.unary_unary(
                '/modelops.ModelOps/ReleaseGpuLease',
                request_serializer=model__ops__pb2.GpuLeaseRelease.SerializeToString,
                response_deserializer=model__ops__pb2.GpuLeaseReleaseAck.FromString,
                _registered_method=True)


class ModelOpsServicer(object):
    """ModelOps service definition
    """

    def Infer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnloadModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcquireGpuLease(self, request, context):
        """GPU lease management for coordinating VRAM contention across services
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseGpuLease(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelOpsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Infer': grpc.unary_unary_rpc_method_handler(
                    servicer.Infer,
                    request_deserializer=model__ops__pb2.InferenceRequest.FromString,
                    response_serializer=model__ops__pb2.InferenceResponse.SerializeToString,
            ),
            'LoadModel': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadModel,
                    request_deserializer=model__ops__pb2.ModelLoadRequest.FromString,
                    response_serializer=model__ops__pb2.ModelLoadReply.SerializeToString,
            ),
            'UnloadModel': grpc.unary_unary_rpc_method_handler(
                    servicer.UnloadModel,
                    request_deserializer=model__ops__pb2.ModelUnloadRequest.FromString,
                    response_serializer=model__ops__pb2.ModelUnloadReply.SerializeToString,
            ),
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=model__ops__pb2.ModelList.SerializeToString,
            ),
            'AcquireGpuLease': grpc.unary_unary_rpc_method_handler(
                    servicer.AcquireGpuLease,
                    request_deserializer=model__ops__pb2.GpuLeaseRequest.FromString,
                    response_serializer=model__ops__pb2.GpuLeaseReply.SerializeToString,
            ),
            'ReleaseGpuLease': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseGpuLease,
                    request_deserializer=model__ops__pb2.GpuLeaseRelease.FromString,
                    response_serializer=model__ops__pb2.GpuLeaseReleaseAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'modelops.ModelOps', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelOps(object):
    """ModelOps service definition
    """

    @staticmethod
    def Infer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/modelops.ModelOps/Infer',
            model__ops__pb2.InferenceRequest.SerializeToString,
            model__ops__pb2.InferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/modelops.ModelOps/LoadModel',
            model__ops__pb2.ModelLoadRequest.SerializeToString,
            model__ops__pb2.ModelLoadReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnloadModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/modelops.ModelOps/UnloadModel',
            model__ops__pb2.ModelUnloadRequest.SerializeToString,
            model__ops__pb2.ModelUnloadReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/modelops.ModelOps/ListModels',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            model__ops__pb2.ModelList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AcquireGpuLease(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/modelops.ModelOps/AcquireGpuLease',
            model__ops__pb2.GpuLeaseRequest.SerializeToString,
            model__ops__pb2.GpuLeaseReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReleaseGpuLease(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/modelops.ModelOps/ReleaseGpuLease',
            model__ops__pb2.GpuLeaseRelease.SerializeToString,
            model__ops__pb2.GpuLeaseReleaseAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
