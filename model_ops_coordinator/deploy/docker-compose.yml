version: '3.8'

services:
  # Primary ModelOps Coordinator replica
  moc-primary:
    image: model-ops-coordinator:latest
    container_name: moc-primary
    hostname: moc-primary
    restart: unless-stopped
    
    ports:
      - "7211:7211"  # ZMQ
      - "7212:7212"  # gRPC  
      - "8008:8008"  # REST
    
    environment:
      # Service identification
      MOC_INSTANCE_ID: "primary"
      MOC_REPLICA_ID: "1"
      
      # Production configuration
      MOC_LOG_LEVEL: "INFO"
      MOC_CONFIG_DIR: "/app/config"
      PYTHONUNBUFFERED: "1"
      
      # Server configuration
      MOC_SERVER_MAX_WORKERS: "32"
      MOC_SERVER_ZMQ_PORT: "7211"
      MOC_SERVER_GRPC_PORT: "7212"
      MOC_SERVER_REST_PORT: "8008"
      
      # Resource management
      MOC_RESOURCES_VRAM_SOFT_LIMIT_MB: "22000"
      MOC_RESOURCES_GPU_POLL_INTERVAL: "5"
      MOC_RESOURCES_EVICTION_THRESHOLD_PCT: "90"
      
      # Security
      MOC_API_KEY: "${MOC_API_KEY}"
      MOC_ENABLE_TLS: "true"
      MOC_CERT_PATH: "/app/certs"
      
      # High availability
      MOC_HA_ENABLED: "true"
      MOC_HA_PRIMARY: "true"
      MOC_HA_SECONDARY_HOST: "moc-secondary"
      
      # Database and storage
      MOC_LEARNING_STORE: "/app/data/learning_jobs.db"
      MOC_REDIS_URL: "redis://redis:6379"
      
      # Monitoring
      MOC_PROMETHEUS_PORT: "9090"
      MOC_HEALTH_CHECK_INTERVAL: "30"
    
    volumes:
      - moc-data-primary:/app/data
      - moc-logs-primary:/app/logs
      - moc-certs:/app/certs:ro
      - /models:/models:ro  # Mount model directory
    
    networks:
      - moc-network
    
    depends_on:
      - redis
      - prometheus
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 16G
        reservations:
          cpus: '4.0'
          memory: 8G
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.moc-primary.rule=Host(`moc.company.com`)"
      - "traefik.http.services.moc-primary.loadbalancer.server.port=8008"

  # Secondary ModelOps Coordinator replica for HA
  moc-secondary:
    image: model-ops-coordinator:latest
    container_name: moc-secondary
    hostname: moc-secondary
    restart: unless-stopped
    
    ports:
      - "7213:7211"  # ZMQ (different external port)
      - "7214:7212"  # gRPC (different external port)
      - "8009:8008"  # REST (different external port)
    
    environment:
      # Service identification
      MOC_INSTANCE_ID: "secondary"
      MOC_REPLICA_ID: "2"
      
      # Production configuration
      MOC_LOG_LEVEL: "INFO"
      MOC_CONFIG_DIR: "/app/config"
      PYTHONUNBUFFERED: "1"
      
      # Server configuration (same internal ports)
      MOC_SERVER_MAX_WORKERS: "32"
      MOC_SERVER_ZMQ_PORT: "7211"
      MOC_SERVER_GRPC_PORT: "7212"
      MOC_SERVER_REST_PORT: "8008"
      
      # Resource management
      MOC_RESOURCES_VRAM_SOFT_LIMIT_MB: "22000"
      MOC_RESOURCES_GPU_POLL_INTERVAL: "5"
      MOC_RESOURCES_EVICTION_THRESHOLD_PCT: "90"
      
      # Security
      MOC_API_KEY: "${MOC_API_KEY}"
      MOC_ENABLE_TLS: "true"
      MOC_CERT_PATH: "/app/certs"
      
      # High availability
      MOC_HA_ENABLED: "true"
      MOC_HA_PRIMARY: "false"
      MOC_HA_PRIMARY_HOST: "moc-primary"
      
      # Database and storage (separate instance)
      MOC_LEARNING_STORE: "/app/data/learning_jobs.db"
      MOC_REDIS_URL: "redis://redis:6379"
      
      # Monitoring
      MOC_PROMETHEUS_PORT: "9090"
      MOC_HEALTH_CHECK_INTERVAL: "30"
    
    volumes:
      - moc-data-secondary:/app/data
      - moc-logs-secondary:/app/logs
      - moc-certs:/app/certs:ro
      - /models:/models:ro  # Mount model directory
    
    networks:
      - moc-network
    
    depends_on:
      - redis
      - prometheus
      - moc-primary  # Start after primary
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 16G
        reservations:
          cpus: '4.0'
          memory: 8G
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.moc-secondary.rule=Host(`moc-secondary.company.com`)"
      - "traefik.http.services.moc-secondary.loadbalancer.server.port=8008"

  # Redis for shared state and caching
  redis:
    image: redis:7-alpine
    container_name: moc-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis-data:/data
    
    networks:
      - moc-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: moc-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://prometheus.company.com'
    
    networks:
      - moc-network
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: moc-grafana
    restart: unless-stopped
    
    ports:
      - "3000:3000"
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWORD}"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-piechart-panel"
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - moc-network
    
    depends_on:
      - prometheus

  # Load balancer (HAProxy)
  haproxy:
    image: haproxy:2.8-alpine
    container_name: moc-haproxy
    restart: unless-stopped
    
    ports:
      - "80:80"     # HTTP
      - "443:443"   # HTTPS
      - "7210:7210" # gRPC Load Balancer
      - "8080:8080" # HAProxy Stats
    
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - moc-certs:/etc/ssl/certs:ro
    
    networks:
      - moc-network
    
    depends_on:
      - moc-primary
      - moc-secondary
    
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "80"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  moc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  moc-data-primary:
    driver: local
  moc-data-secondary:
    driver: local
  moc-logs-primary:
    driver: local
  moc-logs-secondary:
    driver: local
  moc-certs:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local