syntax = "proto3";

package modelops;

import "google/protobuf/empty.proto";

// ModelOps service definition
service ModelOps {
  rpc Infer (InferenceRequest) returns (InferenceResponse);
  rpc LoadModel (ModelLoadRequest) returns (ModelLoadReply);
  rpc UnloadModel (ModelUnloadRequest) returns (ModelUnloadReply);
  rpc ListModels (google.protobuf.Empty) returns (ModelList);
  // GPU lease management for coordinating VRAM contention across services
  rpc AcquireGpuLease (GpuLeaseRequest) returns (GpuLeaseReply);
  rpc ReleaseGpuLease (GpuLeaseRelease) returns (GpuLeaseReleaseAck);
}

// Inference request message
message InferenceRequest {
  string model_name = 1;
  string prompt = 2;
  map<string, string> parameters = 3;
  int32 max_tokens = 4;
  float temperature = 5;
}

// Inference response message
message InferenceResponse {
  string response_text = 1;
  int32 tokens_generated = 2;
  float inference_time_ms = 3;
  string status = 4;
  string error_message = 5;
}

// Model load request message
message ModelLoadRequest {
  string model_name = 1;
  string model_path = 2;
  map<string, string> load_params = 3;
  int32 shards = 4;
}

// Model load reply message
message ModelLoadReply {
  bool success = 1;
  string message = 2;
  string model_id = 3;
  int64 vram_used_mb = 4;
}

// Model unload request message
message ModelUnloadRequest {
  string model_name = 1;
  bool force = 2;
}

// Model unload reply message
message ModelUnloadReply {
  bool success = 1;
  string message = 2;
  int64 vram_freed_mb = 3;
}

// Model info message
message ModelInfo {
  string name = 1;
  string path = 2;
  string status = 3;
  int64 vram_mb = 4;
  int32 shards = 5;
  int64 load_time = 6;
}

// Model list response message
message ModelList {
  repeated ModelInfo models = 1;
  int32 total_count = 2;
  int64 total_vram_mb = 3;
}

// ------------------------------
// GPU Lease API messages
// ------------------------------
message GpuLeaseRequest  {
  string client = 1;
  string model_name = 2;
  int64  vram_estimate_mb = 3;
  int32  priority = 4;        // 1 = highest priority
  int32  ttl_seconds = 5;     // requested lease TTL
}

message GpuLeaseReply {
  bool   granted = 1;
  string lease_id = 2;
  int64  vram_reserved_mb = 3;
  string reason = 4;
  int32  retry_after_ms = 5;
}

message GpuLeaseRelease   { string lease_id = 1; }
message GpuLeaseReleaseAck{ bool   success  = 1; }