# AI System Unified Configuration v3.0
# Single Source of Truth for All Machines and Environments
# Created: 2025-01-16
# Description: Consolidated configuration for MainPC (RTX 4090) and PC2 (RTX 3060) with Docker support

version: "3.0"
created: "2025-01-16"
description: "Unified startup configuration for MainPC and PC2 with machine-specific overrides"

# Global settings shared across all machines
global_settings:
  environment:
    PYTHONPATH: "${PWD}:${PWD}/.."
    LOG_LEVEL: INFO
    DEBUG_MODE: 'false'
    ENABLE_METRICS: 'true'
    ENABLE_TRACING: 'true'
    ENABLE_DATA_OPTIMIZER: 'true'
    DATA_OPTIMIZER_METHOD: compressed_msgpack
    
  # Default resource limits (can be overridden per machine)
  resource_limits:
    cpu_percent: 80
    memory_mb: 2048
    max_threads: 4
    
  # Health check settings
  health_checks:
    interval_seconds: 30
    timeout_seconds: 10
    retries: 3
    start_period_seconds: 300
    
  # Networking defaults
  network:
    name: ai_system_network
    driver: bridge
    
  # Volume mappings (relative to project root)
  volumes:
    - source: ./logs
      target: /app/logs
    - source: ./models
      target: /app/models
    - source: ./data
      target: /app/data
    - source: ./config
      target: /app/config
    - source: ./cache
      target: /app/cache

# Agent definitions organized by functional groups
agent_groups:
  # Core infrastructure services (required on all machines)
  core_services:
    ServiceRegistry:
      script_path: main_pc_code/agents/service_registry_agent.py
      port: 7100
      health_check_port: 8100
      required: true
      dependencies: []
      config:
        backend: memory  # Options: memory, redis
        redis:
          url: redis://localhost:6379/0
          prefix: "service_registry:"
          
    SystemDigitalTwin:
      script_path: main_pc_code/agents/system_digital_twin.py
      port: 7120
      health_check_port: 8120
      required: true
      dependencies: [ServiceRegistry]
      config:
        db_path: data/unified_memory.db
        redis:
          host: localhost
          port: 6379
          db: 0
        zmq_request_timeout: 5000
        
    RequestCoordinator:
      script_path: main_pc_code/agents/request_coordinator.py
      port: 26002
      health_check_port: 27002
      required: true
      dependencies: [SystemDigitalTwin]
      
    UnifiedSystemAgent:
      script_path: main_pc_code/agents/unified_system_agent.py
      port: 7125
      health_check_port: 8125
      required: true
      dependencies: [SystemDigitalTwin]

  # Memory and knowledge management
  memory_system:
    MemoryClient:
      script_path: main_pc_code/agents/memory_client.py
      port: 26008
      health_check_port: 27008
      required: true
      dependencies: [SystemDigitalTwin]
      
    SessionMemoryAgent:
      script_path: main_pc_code/agents/session_memory_agent.py
      port: 26009
      health_check_port: 27009
      required: true
      dependencies: [MemoryClient]
      
    KnowledgeBase:
      script_path: main_pc_code/agents/knowledge_base.py
      port: 26010
      health_check_port: 27010
      required: true
      dependencies: [MemoryClient]
      
    MemoryOrchestratorService:
      script_path: pc2_code/agents/memory_orchestrator_service.py
      port: 7140
      health_check_port: 8140
      required: true
      dependencies: []
      
  # GPU and model management (MainPC primary)
  gpu_infrastructure:
    GGUFModelManager:
      script_path: main_pc_code/agents/gguf_model_manager.py
      port: 26013
      health_check_port: 27013
      required: true
      dependencies: [SystemDigitalTwin]
      
    ModelManagerAgent:
      script_path: main_pc_code/agents/model_manager_agent.py
      port: 5568
      health_check_port: 6568
      required: true
      dependencies: [GGUFModelManager]
      
    VRAMOptimizerAgent:
      script_path: main_pc_code/agents/vram_optimizer_agent.py
      port: 26014
      health_check_port: 27014
      required: true
      dependencies: [ModelManagerAgent]
      
    PredictiveLoader:
      script_path: main_pc_code/agents/predictive_loader.py
      port: 26015
      health_check_port: 27015
      required: true
      dependencies: [VRAMOptimizerAgent]

  # AI reasoning and processing
  reasoning_services:
    ChainOfThoughtAgent:
      script_path: main_pc_code/agents/FORMAINPC/ChainOfThoughtAgent.py
      port: 26016
      health_check_port: 27016
      required: true
      dependencies: [ModelManagerAgent]
      
    GoTToTAgent:
      script_path: main_pc_code/agents/FORMAINPC/GOT_TOTAgent.py
      port: 26017
      health_check_port: 27017
      required: true
      dependencies: [ModelManagerAgent]
      
    CognitiveModelAgent:
      script_path: main_pc_code/agents/FORMAINPC/CognitiveModelAgent.py
      port: 26018
      health_check_port: 27018
      required: true
      dependencies: [ModelManagerAgent]

  # Utility and support services
  utility_services:
    CodeGenerator:
      script_path: main_pc_code/agents/code_generator.py
      port: 5604
      health_check_port: 6604
      required: false
      dependencies: [ModelManagerAgent]
      
    Executor:
      script_path: main_pc_code/agents/executor.py
      port: 5603
      health_check_port: 6603
      required: false
      dependencies: [SystemDigitalTwin]
      
    PredictiveHealthMonitor:
      script_path: main_pc_code/agents/predictive_health_monitor.py
      port: 26019
      health_check_port: 27019
      required: true
      dependencies: [SystemDigitalTwin]
      
    FixedStreamingTranslation:
      script_path: main_pc_code/agents/fixed_streaming_translation.py
      port: 5581
      health_check_port: 6581
      required: false
      dependencies: [ModelManagerAgent]

  # Learning and adaptation
  learning_services:
    ModelEvaluationFramework:
      script_path: main_pc_code/agents/model_evaluation_framework.py
      port: 26020
      health_check_port: 27020
      required: false
      dependencies: [ModelManagerAgent]
      
    LearningOrchestrationService:
      script_path: main_pc_code/agents/learning_orchestration_service.py
      port: 26021
      health_check_port: 27021
      required: false
      dependencies: [ModelEvaluationFramework]
      
    LearningOpportunityDetector:
      script_path: main_pc_code/agents/learning_opportunity_detector.py
      port: 26022
      health_check_port: 27022
      required: false
      dependencies: [LearningOrchestrationService]

  # PC2 specific services
  pc2_services:
    TieredResponder:
      script_path: pc2_code/agents/tiered_responder.py
      port: 7100
      health_check_port: 8100
      required: true
      dependencies: [ResourceManager]
      
    AsyncProcessor:
      script_path: pc2_code/agents/async_processor.py
      port: 7101
      health_check_port: 8101
      required: true
      dependencies: [ResourceManager]
      
    CacheManager:
      script_path: pc2_code/agents/cache_manager.py
      port: 7102
      health_check_port: 8102
      required: true
      dependencies: [ResourceManager]
      
    ResourceManager:
      script_path: pc2_code/agents/resource_manager.py
      port: 7103
      health_check_port: 8103
      required: true
      dependencies: []

# Machine profiles defining which agent groups run where
machine_profiles:
  mainpc:
    enabled_groups: [core_services, memory_system, gpu_infrastructure, reasoning_services, utility_services, learning_services]
    hardware:
      gpu: RTX_4090
      memory_gb: 32
      cpu_cores: 16
      
  pc2:
    enabled_groups: [core_services, memory_system, pc2_services]
    hardware:
      gpu: RTX_3060
      memory_gb: 16
      cpu_cores: 8

# Override mechanism - these files will be merged with this config
overrides:
  mainpc: config/overrides/mainpc.yaml
  pc2: config/overrides/pc2.yaml
  docker: config/overrides/docker.yaml
  production: config/overrides/production.yaml 