======================================================================
COMPREHENSIVE MAIN-PC SYSTEM ANALYSIS  (2025-07-19)
======================================================================

The notes below are already formatted as a single block so you can
copy-paste them in one go.  They are split into four logical phases
matching your request.

──────────────────────────────────────────────────────────────────────
PHASE 1 – CODE-BASE AUDIT  ▸  Syntax & Static­-Analysis
──────────────────────────────────────────────────────────────────────
1.1  Incomplete statements
     •  50 + lines that contain nothing but the token  self.
     •  38 of them live in the Main-PC tree; the rest are in pc2_code.
       Core-service hits (blocking the boot sequence):
         main_pc_code/agents/request_coordinator.py   818, 880, 882
         main_pc_code/agents/unified_system_agent.py  678, 717
         main_pc_code/agents/predictive_health_monitor.py 1604, 1606
         main_pc_code/agents/emotion_engine.py        431, 450
         …plus 30 other files in non-core groups.
     •  Each line raises  SyntaxError: invalid syntax  during import,
       preventing the agent module from loading.

1.2  Other high-frequency linter errors
     •  unused-import, undefined-name, duplicate-function-definition.
     •  >500 warnings surfaced when running  ruff check  over agents/.

1.3  Static compilation test
     •  Running  python -m py_compile $(git ls-files '*.py')  fails on
       the first “self.” occurrence – proof that fixing these is the
       very first unblocker.

Suggested batch-fix script (run once after a clean commit):
--------------------------------------------------------------------
#!/usr/bin/env python3
"""
Quick-n-dirty patch: comment out stray 'self.' lines so the
interpreter can at least import the modules again.  Real fixes should
replace them with meaningful logic later.
"""
import pathlib, re, sys
ROOT = pathlib.Path(__file__).resolve().parents[1] / "main_pc_code"
pattern = re.compile(r'^\s*self\.\s*$')
for py in ROOT.rglob("*.py"):
    txt = py.read_text().splitlines(keepends=True)
    patched = [re.sub(pattern, "# TODO-FIXME – removed stray 'self.'", l)
               for l in txt]
    if txt != patched:
        py.write_text("".join(patched))
--------------------------------------------------------------------

After the patch, re-run  py_compile; remaining SyntaxErrors are
usually genuine logic mistakes and will be simpler to track.

──────────────────────────────────────────────────────────────────────
PHASE 2 – ARCHITECTURE & CONFIG REVIEW
──────────────────────────────────────────────────────────────────────
2.1  Port duplication in  startup_config.yaml
     •  LearningOrchestrationService and ModelOrchestrator
       - both use  port: 7210  → conflict inside the same host.
     •  health_check_port values are unique, but ZMQ sockets clash
       before the HTTP checker is even started.

2.2  Docker-Compose host-port clashes (docker-compose.mainpc.yml)
     •  "7210:7210" is mapped twice
         – core-services container (LearningOrchestrationService)
         – language-processing container (ModelOrchestrator)
     •  "7225:XXXX" is also mapped twice (core-services + gpu-infra)
     •  Result: second container fails to start with
         Error starting userland proxy: listen tcp4 0.0.0.0:7210…

2.3  BaseAgent class
     •  http_health_port = health_check_port + 1  ⇒ design is good.
     •  _setup_graceful_shutdown()   is an empty stub.
     •  atexit cleanup never registered.

──────────────────────────────────────────────────────────────────────
PHASE 3 – STEP-BY-STEP FIX PLAN
──────────────────────────────────────────────────────────────────────
Step 0  (safety)  Commit the current state to a “pre-cleanup” branch.

Step 1  Automated syntax cleanup
   1.1  Run the batch-fix script above.
   1.2  Run  python -m py_compile  on the entire tree.
        •  Iterate until zero SyntaxErrors remain.
   1.3  Push fix-commit “Batch-remove stray self. placeholders”.

Step 2  BaseAgent hardening  (single edit in common/core/base_agent.py)
   2.1  Implement _setup_graceful_shutdown:
        import signal, atexit
        def _setup_graceful_shutdown(self):
            for sig in (signal.SIGTERM, signal.SIGINT):
                signal.signal(sig, lambda *a: self.cleanup())
            atexit.register(self._atexit_cleanup)
   2.2  Test with  minimal_agent.py  inside a container; send SIGTERM
        and verify sockets close gracefully.

Step 3  Port-map sanitisation
   3.1  Decide canonical owner of host-port 7210.
        •  Keep it for core-services/LearningOrchestrationService.
        •  Bump ModelOrchestrator to 7213 / 8213.
   3.2  Search-replace in:
        •  main_pc_code/config/startup_config.yaml
        •  docker/docker-compose.mainpc.yml
   3.3  Repeat for host port 7225 (choose 7226 for gpu-infra side).
   3.4  Run  scripts/check_port_conflicts.py  (already exists) - zero
        conflicts should be reported.

Step 4  Re-generate containers
   4.1  docker compose -f docker/docker-compose.mainpc.yml build --no-cache
   4.2  docker compose up core-services  – waits for HEALTHY.
   4.3  Bring up remaining groups sequentially, watching logs.

Step 5  End-to-End verification
   5.1  ./main_pc_code/scripts/start_system.py  (outside Docker)
   5.2  ./main_pc_code/tests/test_system_integration.py
   5.3  curl http://localhost:8220/health  → {"status":"ok",…}

──────────────────────────────────────────────────────────────────────
PHASE 4 – PROGRESSIVE GROUP VALIDATION
──────────────────────────────────────────────────────────────────────
4.1  Core Services
     •  ServiceRegistry  (7200/8200)
     •  SystemDigitalTwin (7220/8220)
     •  ModelManagerSuite (7211/8211)
     •  RequestCoordinator
     Validate each via  health_check_port  first.

4.2  Memory System  →  GPU Infra  →  Reasoning Services
     Bring up one container at a time; run  test_health_simple.py
     after each stage to ensure no regression.

4.3  Observability
     •  Prometheus should scrape 9100/metrics.
     •  Grafana dashboard “Core-Overview” should populate within 2 min.

4.4  Automated smoke test
     •  ./validate_stability_fixed.py  – should exit 0.
     •  ./run_tests_in_container.sh   – CI green.

──────────────────────────────────────────────────────────────────────
SUCCESS CRITERIA CHECK-LIST
──────────────────────────────────────────────────────────────────────
☑  No SyntaxErrors when importing any Main-PC module
☑  docker compose up  completes with all containers healthy
☑  curl health endpoints for every core agent returns status ok
☑  No duplicate host-ports in docker-compose.mainpc.yml
☑  SIGTERM / docker stop triggers graceful cleanup (no orphans)
☑  Prometheus & Grafana show all agents alive for ≥ 10 min

You now have a tactical roadmap that unblocks the Main-PC stack and
lets you iterate on higher-level logic later.  Good luck 🚀