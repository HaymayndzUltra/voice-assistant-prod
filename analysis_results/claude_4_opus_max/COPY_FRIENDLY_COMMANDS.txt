================================================================================
MAINPC AI SYSTEM - COPY-FRIENDLY COMMANDS
================================================================================

# VALIDATION COMMANDS
================================================================================

# Quick validation (no external dependencies)
python3 main_pc_code/scripts/quick_validate.py

# Full syntax analysis
python3 main_pc_code/scripts/analyze_syntax_errors.py

# Check only critical agents
python3 main_pc_code/scripts/quick_validate.py | grep -E "(ServiceRegistry|SystemDigitalTwin|RequestCoordinator|UnifiedSystemAgent|ModelManagerSuite)"


# FIX COMMANDS (ALREADY EXECUTED)
================================================================================

# Fix incomplete self. statements
python3 main_pc_code/scripts/fix_all_syntax_errors.py

# Fix BaseAgent port conflicts
python3 main_pc_code/scripts/fix_baseagent_ports.py

# Fix critical agents
python3 main_pc_code/scripts/fix_critical_agents.py


# SYSTEM STARTUP COMMANDS
================================================================================

# Option 1: Docker Compose (Recommended)
docker-compose -f docker/docker-compose.mainpc.yml up -d redis nats
docker-compose -f docker/docker-compose.mainpc.yml up core-services

# Option 2: Manual Startup
cd /workspace
export PYTHONPATH=/workspace:/workspace/main_pc_code:/workspace/common
python3 main_pc_code/scripts/start_system.py

# Option 3: Start individual agents for testing
python3 main_pc_code/agents/service_registry_agent.py --port 7200 --health-port 8200
python3 main_pc_code/agents/system_digital_twin.py --port 7220 --health-port 8220


# HEALTH CHECK COMMANDS
================================================================================

# Check all agent health endpoints
python3 main_pc_code/scripts/verify_all_health_checks.py

# Check specific agent health
curl http://localhost:8200/health  # ServiceRegistry
curl http://localhost:8220/health  # SystemDigitalTwin
curl http://localhost:8211/health  # ModelManagerSuite


# CLEANUP COMMANDS
================================================================================

# Stop all agents
pkill -f "python.*agent.py"

# Stop Docker containers
docker-compose -f docker/docker-compose.mainpc.yml down

# Remove backup files (if needed)
find /workspace/main_pc_code -name "*.bak" -delete
find /workspace/main_pc_code -name "*.bak2" -delete
find /workspace/main_pc_code -name "*.bak3" -delete
find /workspace/main_pc_code -name "*.bak.ports" -delete


# MONITORING COMMANDS
================================================================================

# View agent logs
tail -f /workspace/logs/*.log

# View specific agent log
tail -f /workspace/logs/serviceregistry.log
tail -f /workspace/logs/systemdigitaltwin.log

# Check running processes
ps aux | grep -E "(ServiceRegistry|SystemDigitalTwin|RequestCoordinator)"

# Check port usage
netstat -tlnp | grep -E "(7200|7220|7211|8200|8220|8211)"


# TROUBLESHOOTING COMMANDS
================================================================================

# If agents fail to start, check imports
python3 -c "import zmq; print('ZMQ OK')"
python3 -c "import yaml; print('YAML OK')"
python3 -c "import msgpack; print('MSGPACK OK')"

# Test ZMQ connectivity
python3 -c "import zmq; ctx=zmq.Context(); s=ctx.socket(zmq.REQ); s.connect('tcp://localhost:7220'); print('Connected')"

# Check Docker status
docker ps
docker logs ai_system_monorepo-redis-1
docker logs ai_system_monorepo-nats-1


================================================================================
SUMMARY OF FIXES APPLIED
================================================================================

1. Fixed 50+ incomplete self. statements across 27 agent files
2. Fixed BaseAgent port conflict (HTTP health now on health_check_port)
3. Fixed port conflict (ModelOrchestrator moved to 7215)
4. Fixed 6 critical agents for startup
5. Created comprehensive validation and fix scripts

System is ready for startup with core functionality intact!